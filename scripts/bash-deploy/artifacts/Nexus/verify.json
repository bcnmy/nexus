{"language":"Solidity","sources":{"contracts/Nexus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { UUPSUpgradeable } from \"solady/utils/UUPSUpgradeable.sol\";\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport { ExecLib } from \"./lib/ExecLib.sol\";\nimport { INexus } from \"./interfaces/INexus.sol\";\nimport { BaseAccount } from \"./base/BaseAccount.sol\";\nimport { IERC7484 } from \"./interfaces/IERC7484.sol\";\nimport { ModuleManager } from \"./base/ModuleManager.sol\";\nimport { ExecutionHelper } from \"./base/ExecutionHelper.sol\";\nimport { IValidator } from \"./interfaces/modules/IValidator.sol\";\nimport {\n    MODULE_TYPE_VALIDATOR,\n    MODULE_TYPE_EXECUTOR,\n    MODULE_TYPE_FALLBACK,\n    MODULE_TYPE_HOOK,\n    MODULE_TYPE_MULTI,\n    MODULE_TYPE_PREVALIDATION_HOOK_ERC1271,\n    MODULE_TYPE_PREVALIDATION_HOOK_ERC4337,\n    SUPPORTS_ERC7739,\n    VALIDATION_SUCCESS,\n    VALIDATION_FAILED\n} from \"./types/Constants.sol\";\nimport {\n    ModeLib,\n    ExecutionMode,\n    ExecType,\n    CallType,\n    CALLTYPE_BATCH,\n    CALLTYPE_SINGLE,\n    CALLTYPE_DELEGATECALL,\n    EXECTYPE_DEFAULT,\n    EXECTYPE_TRY\n} from \"./lib/ModeLib.sol\";\nimport { NonceLib } from \"./lib/NonceLib.sol\";\nimport { SentinelListLib, SENTINEL, ZERO_ADDRESS } from \"sentinellist/SentinelList.sol\";\nimport { Initializable } from \"./lib/Initializable.sol\";\nimport { EmergencyUninstall } from \"./types/DataTypes.sol\";\nimport { LibPREP } from \"./lib/local/LibPREP.sol\";\nimport { ComposableExecutionBase, ComposableExecution } from \"composability/ComposableExecutionBase.sol\";\n\n/// @title Nexus - Smart Account\n/// @notice This contract integrates various functionalities to handle modular smart accounts compliant with ERC-7579 and ERC-4337 standards.\n/// @dev Comprehensive suite of methods for managing smart accounts, integrating module management, execution management, and upgradability via UUPS.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract Nexus is INexus, BaseAccount, ExecutionHelper, ModuleManager, UUPSUpgradeable, ComposableExecutionBase {\n    using ModeLib for ExecutionMode;\n    using ExecLib for bytes;\n    using NonceLib for uint256;\n    using SentinelListLib for SentinelListLib.SentinelList;\n\n    /// @dev The timelock period for emergency hook uninstallation.\n    uint256 internal constant _EMERGENCY_TIMELOCK = 1 days;\n\n    /// @dev The event emitted when an emergency hook uninstallation is initiated.\n    event EmergencyHookUninstallRequest(address hook, uint256 timestamp);\n\n    /// @dev The event emitted when an emergency hook uninstallation request is reset.\n    event EmergencyHookUninstallRequestReset(address hook, uint256 timestamp);\n\n    /// @notice Initializes the smart account with the specified entry point.\n    constructor(\n        address anEntryPoint,\n        address defaultValidator,\n        bytes memory initData\n    )\n        ModuleManager(defaultValidator, initData)\n    {\n        require(address(anEntryPoint) != address(0), EntryPointCanNotBeZero());\n        _ENTRYPOINT = anEntryPoint;\n    }\n\n    /// @notice Validates a user operation against a specified validator, extracted from the operation's nonce.\n    /// @param op The user operation to validate, encapsulating all transaction details.\n    /// @param userOpHash Hash of the user operation data, used for signature validation.\n    /// @param missingAccountFunds Funds missing from the account's deposit necessary for transaction execution.\n    /// This can be zero if covered by a paymaster or if sufficient deposit exists.\n    /// @return validationData Encoded validation result or failure, propagated from the validator module.\n    /// - Encoded format in validationData:\n    ///     - First 20 bytes: Address of the Validator module, to which the validation task is forwarded.\n    ///       The validator module returns:\n    ///         - `SIG_VALIDATION_SUCCESS` (0) indicates successful validation.\n    ///         - `SIG_VALIDATION_FAILED` (1) indicates signature validation failure.\n    /// @dev Expects the validator's address to be encoded in the upper 96 bits of the user operation's nonce.\n    /// This method forwards the validation task to the extracted validator module address.\n    /// @dev The entryPoint calls this function. If validation fails, it returns `VALIDATION_FAILED` (1) otherwise `0`.\n    /// @dev Features Module Enable Mode.\n    /// This Module Enable Mode flow is intended for the module acting as the validator\n    /// for the user operation that triggers the Module Enable Flow. Otherwise, a call to\n    /// `Nexus.installModule` should be included in `userOp.callData`.\n    function validateUserOp(\n        PackedUserOperation calldata op,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    )\n        external\n        virtual\n        payPrefund(missingAccountFunds)\n        onlyEntryPoint\n        returns (uint256 validationData)\n    {\n        address validator;\n        PackedUserOperation memory userOp = op;\n    \n        if (op.nonce.isValidateMode()) {\n            // do nothing special. This is introduced\n            // to quickly identify the most commonly used \n            // mode which is validate mode\n            // and avoid checking two above conditions\n        } else if (op.nonce.isModuleEnableMode()) {\n            // if it is module enable mode, we need to enable the module first\n            // and get the cleaned signature\n            userOp.signature = _enableMode(userOpHash, op.signature);\n        } else if (op.nonce.isPrepMode()) {\n            // PREP Mode. Authorize prep signature\n            // and initialize the account\n            // PREP mode is only used for the uninited PREPs\n            require(!isInitialized(), AccountAlreadyInitialized());\n            bytes calldata initData;\n            (userOp.signature, initData) = _handlePREP(op.signature);\n            _initializeAccount(initData);\n        }\n        validator = _handleValidator(op.nonce.getValidator());\n        (userOpHash, userOp.signature) = _withPreValidationHook(userOpHash, userOp, missingAccountFunds);\n        validationData = IValidator(validator).validateUserOp(userOp, userOpHash);\n    }\n\n    /// @notice Executes transactions in single or batch modes as specified by the execution mode.\n    /// @param mode The execution mode detailing how transactions should be handled (single, batch, default, try/catch).\n    /// @param executionCalldata The encoded transaction data to execute.\n    /// @dev This function handles transaction execution flexibility and is protected by the `onlyEntryPoint` modifier.\n    /// @dev This function also goes through hook checks via withHook modifier.\n    function execute(ExecutionMode mode, bytes calldata executionCalldata) external payable onlyEntryPoint withHook {\n        (CallType callType, ExecType execType) = mode.decodeBasic();\n        if (callType == CALLTYPE_SINGLE) {\n            _handleSingleExecution(executionCalldata, execType);\n        } else if (callType == CALLTYPE_BATCH) {\n            _handleBatchExecution(executionCalldata, execType);\n        } else if (callType == CALLTYPE_DELEGATECALL) {\n            _handleDelegateCallExecution(executionCalldata, execType);\n        } else {\n            revert UnsupportedCallType(callType);\n        }\n    }\n\n    /// @notice Executes transactions from an executor module, supporting both single and batch transactions.\n    /// @param mode The execution mode (single or batch, default or try).\n    /// @param executionCalldata The transaction data to execute.\n    /// @return returnData The results of the transaction executions, which may include errors in try mode.\n    /// @dev This function is callable only by an executor module and goes through hook checks.\n    function executeFromExecutor(\n        ExecutionMode mode,\n        bytes calldata executionCalldata\n    )\n        external\n        payable\n        onlyExecutorModule\n        withHook\n        withRegistry(msg.sender, MODULE_TYPE_EXECUTOR)\n        returns (bytes[] memory returnData)\n    {\n        (CallType callType, ExecType execType) = mode.decodeBasic();\n        // check if calltype is batch or single or delegate call\n        if (callType == CALLTYPE_SINGLE) {\n            returnData = _handleSingleExecutionAndReturnData(executionCalldata, execType);\n        } else if (callType == CALLTYPE_BATCH) {\n            returnData = _handleBatchExecutionAndReturnData(executionCalldata, execType);\n        } else if (callType == CALLTYPE_DELEGATECALL) {\n            returnData = _handleDelegateCallExecutionAndReturnData(executionCalldata, execType);\n        } else {\n            revert UnsupportedCallType(callType);\n        }\n    }\n\n    /// @notice Executes a user operation via a call using the contract's context.\n    /// @param userOp The user operation to execute, containing transaction details.\n    /// @param - Hash of the user operation.\n    /// @dev Only callable by the EntryPoint. Decodes the user operation calldata, skipping the first four bytes, and executes the inner call.\n    function executeUserOp(PackedUserOperation calldata userOp, bytes32) external payable virtual onlyEntryPoint withHook {\n        bytes calldata callData = userOp.callData[4:];\n        (bool success, bytes memory innerCallRet) = address(this).delegatecall(callData);\n        if (!success) {\n            revert ExecutionFailed();\n        }\n    }\n\n    /// @notice Executes a composable execution\n    /// See more about composability here: https://docs.biconomy.io/composability\n    /// @param executions The composable executions to execute\n    function executeComposable(ComposableExecution[] calldata executions) external payable override onlyEntryPoint withHook {\n        _executeComposable(executions);\n    }\n\n    /// @notice Executes a call to a target address with specified value and data.\n    /// @param to The address to execute the action on\n    /// @param value The value to send with the action\n    /// @param data The data to send with the action\n    /// @return result The result of the execution\n    function _executeAction(address to, uint256 value, bytes memory data) internal override returns (bytes memory) {\n        return _executeMemory(to, value, data);\n    }\n\n    /// @notice Installs a new module to the smart account.\n    /// @param moduleTypeId The type identifier of the module being installed, which determines its role:\n    /// - 1 for Validator\n    /// - 2 for Executor\n    /// - 3 for Fallback\n    /// - 4 for Hook\n    /// - 8 for 1271 Prevalidation Hook\n    /// - 9 for 4337 Prevalidation Hook\n    /// @param module The address of the module to install.\n    /// @param initData Initialization data for the module.\n    /// @dev This function can only be called by the EntryPoint or the account itself for security reasons.\n    /// @dev This function goes through hook checks via withHook modifier through internal function _installModule.\n    function installModule(uint256 moduleTypeId, address module, bytes calldata initData) external payable virtual override onlyEntryPointOrSelf {\n        _installModule(moduleTypeId, module, initData);\n        emit ModuleInstalled(moduleTypeId, module);\n    }\n\n    /// @notice Uninstalls a module from the smart account.\n    /// @param moduleTypeId The type ID of the module to be uninstalled, matching the installation type:\n    /// - 1 for Validator\n    /// - 2 for Executor\n    /// - 3 for Fallback\n    /// - 4 for Hook\n    /// - 8 for 1271 Prevalidation Hook\n    /// - 9 for 4337 Prevalidation Hook\n    /// @dev Attention: All the underlying functions _uninstall[ModuleType] are calling module.onInstall() method.\n    /// If the module is malicious (which is not likely because such a module won't be attested), it can prevent\n    /// itself from being uninstalled by spending all gas in the onUninstall() method. Then 1/64 gas left can\n    /// be not enough to finish the uninstallation, assuming there may be hook postCheck() call.\n    /// In this highly unlikely scenario, user will have to uninstall the hook, then uninstall the malicious\n    /// module => in this case 1/64 gas left should be enough to finish the uninstallation.\n    /// @param module The address of the module to uninstall.\n    /// @param deInitData De-initialization data for the module.\n    /// @dev Ensures that the operation is authorized and valid before proceeding with the uninstallation.\n    function uninstallModule(\n        uint256 moduleTypeId,\n        address module,\n        bytes calldata deInitData\n    ) \n        external \n        payable\n        onlyEntryPointOrSelf\n        withHook \n    {\n        require(_isModuleInstalled(moduleTypeId, module, deInitData), ModuleNotInstalled(moduleTypeId, module));\n\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\n            _uninstallValidator(module, deInitData);\n            _checkInitializedValidators();\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\n            _uninstallExecutor(module, deInitData);\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\n            _uninstallFallbackHandler(module, deInitData);\n        } else if (\n            moduleTypeId == MODULE_TYPE_HOOK || moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337\n        ) {\n            _uninstallHook(module, moduleTypeId, deInitData);\n        }\n        emit ModuleUninstalled(moduleTypeId, module);\n    }\n\n    function emergencyUninstallHook(EmergencyUninstall calldata data, bytes calldata signature) external payable {\n        // Validate the signature\n        _checkEmergencyUninstallSignature(data, signature);\n        // Parse uninstall data\n        (uint256 hookType, address hook, bytes calldata deInitData) = (data.hookType, data.hook, data.deInitData);\n\n        // Validate the hook is of a supported type and is installed\n        require(\n            hookType == MODULE_TYPE_HOOK || hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337,\n            UnsupportedModuleType(hookType)\n        );\n        require(_isModuleInstalled(hookType, hook, deInitData), ModuleNotInstalled(hookType, hook));\n\n        // Get the account storage\n        AccountStorage storage accountStorage = _getAccountStorage();\n        uint256 hookTimelock = accountStorage.emergencyUninstallTimelock[hook];\n\n        if (hookTimelock == 0) {\n            // if the timelock hasnt been initiated, initiate it\n            accountStorage.emergencyUninstallTimelock[hook] = block.timestamp;\n            emit EmergencyHookUninstallRequest(hook, block.timestamp);\n        } else if (block.timestamp >= hookTimelock + 3 * _EMERGENCY_TIMELOCK) {\n            // if the timelock has been left for too long, reset it\n            accountStorage.emergencyUninstallTimelock[hook] = block.timestamp;\n            emit EmergencyHookUninstallRequestReset(hook, block.timestamp);\n        } else if (block.timestamp >= hookTimelock + _EMERGENCY_TIMELOCK) {\n            // if the timelock expired, clear it and uninstall the hook\n            accountStorage.emergencyUninstallTimelock[hook] = 0;\n            _uninstallHook(hook, hookType, deInitData);\n            emit ModuleUninstalled(hookType, hook);\n        } else {\n            // if the timelock is initiated but not expired, revert\n            revert EmergencyTimeLockNotExpired();\n        }\n    }\n\n    /// @notice Initializes the smart account with the specified initialization data.\n    /// @param initData The initialization data for the smart account.\n    /// @dev This function can only be called by the account itself or the proxy factory.\n    /// When a 7702 account is created, the first userOp should contain self-call to initialize the account.\n    function initializeAccount(bytes calldata initData) external payable virtual {\n        // Protect this function to only be callable when used with the proxy factory or when\n        // account calls itself\n        if (msg.sender != address(this)) {\n            Initializable.requireInitializable();\n        }\n        _initializeAccount(initData);\n    }\n\n    function _initializeAccount(bytes calldata initData) internal {\n        require(initData.length >= 24, InvalidInitData());\n\n        address bootstrap;\n        bytes calldata bootstrapCall;\n\n        assembly {\n            bootstrap := calldataload(initData.offset)\n            let s := calldataload(add(initData.offset, 0x20))\n            let u := add(initData.offset, s)\n            bootstrapCall.offset := add(u, 0x20)\n            bootstrapCall.length := calldataload(u)\n        }\n\n        (bool success, ) = bootstrap.delegatecall(bootstrapCall);\n\n        require(success, NexusInitializationFailed());\n        if(!_amIERC7702()) {\n            require(isInitialized(), AccountNotInitialized());\n        }\n    }\n\n    /// @notice Sets the registry for the smart account.\n    /// @param newRegistry The new registry to set.\n    /// @param attesters The attesters to set.\n    /// @param threshold The threshold to set.\n    /// @dev This function can only be called by the EntryPoint or the account itself.\n    function setRegistry(IERC7484 newRegistry, address[] calldata attesters, uint8 threshold) external payable {\n        require(msg.sender == address(this), AccountAccessUnauthorized());\n        _configureRegistry(newRegistry, attesters, threshold);\n    }\n\n    /// @notice Validates a signature according to ERC-1271 standards.\n    /// @param hash The hash of the data being validated.\n    /// @param signature Signature data that needs to be validated.\n    /// @return The status code of the signature validation (`0x1626ba7e` if valid).\n    /// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\") = 0x1626ba7e\n    /// @dev Delegates the validation to a validator module specified within the signature data.\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view virtual override returns (bytes4) {\n        // Handle potential ERC7739 support detection request\n        if (signature.length == 0) {\n            // Forces the compiler to optimize for smaller bytecode size.\n            if (uint256(hash) == (~signature.length / 0xffff) * 0x7739) {\n                return checkERC7739Support(hash, signature);\n            }\n        }\n        // else proceed with normal signature verification\n        // First 20 bytes of data will be validator address and rest of the bytes is complete signature.\n        address validator = _handleValidator(address(bytes20(signature[0:20]))); \n        bytes memory signature_;\n        (hash, signature_) = _withPreValidationHook(hash, signature[20:]);\n        try IValidator(validator).isValidSignatureWithSender(msg.sender, hash, signature_) returns (bytes4 res) {\n            return res;\n        } catch {\n            return bytes4(0xffffffff);\n        }\n    }\n\n    /// @notice Retrieves the address of the current implementation from the EIP-1967 slot.\n    /// @notice Checks the 1967 implementation slot, if not found then checks the slot defined by address (Biconomy V2 smart account)\n    /// @return implementation The address of the current contract implementation.\n    function getImplementation() external view returns (address implementation) {\n        assembly {\n            implementation := sload(_ERC1967_IMPLEMENTATION_SLOT)\n        }\n        if (implementation == address(0)) {\n            assembly {\n                implementation := sload(address())\n            }\n        }\n    }\n\n    /// @notice Checks if a specific module type is supported by this smart account.\n    /// @param moduleTypeId The identifier of the module type to check.\n    /// @return True if the module type is supported, false otherwise.\n    function supportsModule(uint256 moduleTypeId) external view virtual returns (bool) {\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR ||\n            moduleTypeId == MODULE_TYPE_EXECUTOR ||\n            moduleTypeId == MODULE_TYPE_FALLBACK ||\n            moduleTypeId == MODULE_TYPE_HOOK ||\n            moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 ||\n            moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337 ||\n            moduleTypeId == MODULE_TYPE_MULTI)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Determines if a specific execution mode is supported.\n    /// @param mode The execution mode to evaluate.\n    /// @return isSupported True if the execution mode is supported, false otherwise.\n    function supportsExecutionMode(ExecutionMode mode) external view virtual returns (bool isSupported) {\n        (CallType callType, ExecType execType) = mode.decodeBasic();\n\n        // Return true if both the call type and execution type are supported.\n        return (callType == CALLTYPE_SINGLE || callType == CALLTYPE_BATCH || callType == CALLTYPE_DELEGATECALL)\n            && (execType == EXECTYPE_DEFAULT || execType == EXECTYPE_TRY);\n    }\n\n    /// @notice Determines whether a module is installed on the smart account.\n    /// @param moduleTypeId The ID corresponding to the type of module (Validator, Executor, Fallback, Hook).\n    /// @param module The address of the module to check.\n    /// @param additionalContext Optional context that may be needed for certain checks.\n    /// @return True if the module is installed, false otherwise.\n    function isModuleInstalled(uint256 moduleTypeId, address module, bytes calldata additionalContext) external view returns (bool) {\n        return _isModuleInstalled(moduleTypeId, module, additionalContext);\n    }\n\n    /// @notice Checks if the smart account is initialized.\n    /// @return True if the smart account is initialized, false otherwise.\n    /// @dev In case default validator is initialized, two other SLOADS from _areSentinelListsInitialized() are not checked,\n    /// this method should not introduce huge gas overhead.\n    function isInitialized() public view returns (bool) {\n        return (\n            IValidator(_DEFAULT_VALIDATOR).isInitialized(address(this)) ||\n            _areSentinelListsInitialized()\n        );\n    }\n\n    /// Returns the account's implementation ID.\n    /// @return The unique identifier for this account implementation.\n    function accountId() external pure virtual returns (string memory) {\n        return _ACCOUNT_IMPLEMENTATION_ID;\n    }\n\n    /// Upgrades the contract to a new implementation and calls a function on the new contract.\n    /// @notice Updates two slots 1. ERC1967 slot and\n    /// 2. address() slot in case if it's potentially upgraded earlier from Biconomy V2 account,\n    /// as Biconomy v2 Account (proxy) reads implementation from the slot that is defined by its address\n    /// @param newImplementation The address of the new contract implementation.\n    /// @param data The calldata to be sent to the new implementation.\n    function upgradeToAndCall(address newImplementation, bytes calldata data) public payable virtual override withHook {\n        require(newImplementation != address(0), InvalidImplementationAddress());\n        bool res;\n        assembly {\n            res := gt(extcodesize(newImplementation), 0)\n        }\n        require(res, InvalidImplementationAddress());\n        // update the address() storage slot as well.\n        assembly {\n            sstore(address(), newImplementation)\n        }\n        UUPSUpgradeable.upgradeToAndCall(newImplementation, data);\n    }\n\n    /// @dev For automatic detection that the smart account supports the ERC7739 workflow\n    /// Iterates over all the validators but only if this is a detection request\n    /// ERC-7739 spec assumes that if the account doesn't support ERC-7739\n    /// it will try to handle the detection request as it was normal sig verification\n    /// request and will return 0xffffffff since it won't be able to verify the 0x signature\n    /// against 0x7739...7739 hash.\n    /// So this approach is consistent with the ERC-7739 spec.\n    /// If no validator supports ERC-7739, this function returns false\n    /// thus the account will proceed with normal signature verification\n    /// and return 0xffffffff as a result.\n    function checkERC7739Support(bytes32 hash, bytes calldata signature) public view virtual returns (bytes4) {\n        bytes4 result;\n        unchecked {\n            SentinelListLib.SentinelList storage validators = _getAccountStorage().validators;\n            address next = validators.entries[SENTINEL];\n            while (next != ZERO_ADDRESS && next != SENTINEL) {\n                result = _get7739Version(next, result, hash, signature);\n                next = validators.getNext(next);\n            }\n        }\n        result = _get7739Version(_DEFAULT_VALIDATOR, result, hash, signature); // check default validator\n        return result == bytes4(0) ? bytes4(0xffffffff) : result;\n    }\n\n    function _get7739Version(address validator, bytes4 prevResult, bytes32 hash, bytes calldata signature) internal view returns (bytes4) {\n        bytes4 support = IValidator(validator).isValidSignatureWithSender(msg.sender, hash, signature);\n        if (bytes2(support) == bytes2(SUPPORTS_ERC7739) && support > prevResult) {\n            return support;\n        }\n        return prevResult;\n    }\n\n    /// @dev Ensures that only authorized callers can upgrade the smart contract implementation.\n    /// This is part of the UUPS (Universal Upgradeable Proxy Standard) pattern.\n    /// @param newImplementation The address of the new implementation to upgrade to.\n    function _authorizeUpgrade(address newImplementation) internal virtual override(UUPSUpgradeable) onlyEntryPointOrSelf {\n        if(_amIERC7702()) {\n            revert ERC7702AccountCannotBeUpgradedThisWay();\n        }\n    }\n\n    /// @dev Handles the PREP initialization.\n    /// @param data The packed data to be handled.\n    /// @return cleanedSignature The cleaned signature for Nexus 4337 (validateUserOp) flow.\n    /// @return initData The data to initialize the account with.\n    function _handlePREP(bytes calldata data) internal returns (bytes calldata cleanedSignature, bytes calldata initData) {\n        bytes32 saltAndDelegation;\n        // unpack the data\n        assembly {\n            if lt(data.length, 0xf9) {\n                mstore(0x0, 0xaed59595) // NotInitializable()\n                revert(0x1c, 0x04)\n            }\n            \n            saltAndDelegation := calldataload(data.offset)\n\n            // initData\n            let p := calldataload(add(data.offset, 0x20))\n            let u := add(data.offset, p)\n            initData.offset := add(u, 0x20)\n            initData.length := calldataload(u)\n\n            // cleanedSignature\n            p := calldataload(add(data.offset, 0x40))\n            u := add(data.offset, p)\n            cleanedSignature.offset := add(u, 0x20)\n            cleanedSignature.length := calldataload(u)\n        }\n        \n        // check r is valid\n        bytes32 r = LibPREP.rPREP(address(this), keccak256(initData), saltAndDelegation);\n        if (r == bytes32(0)) {\n            revert InvalidPREP();\n        }\n        emit PREPInitialized(r);\n    }\n\n    // checks if there's at least one validator initialized\n    function _checkInitializedValidators() internal view {\n        if(!_amIERC7702() && !IValidator(_DEFAULT_VALIDATOR).isInitialized(address(this))) {\n            unchecked {\n                SentinelListLib.SentinelList storage validators = _getAccountStorage().validators;\n                address next = validators.entries[SENTINEL];\n                while (next != ZERO_ADDRESS && next != SENTINEL) {\n                    if(IValidator(next).isInitialized(address(this))) {\n                        break;\n                    }\n                    next = validators.getNext(next);\n                }\n                if(next == SENTINEL) { //went through all validators and none was initialized\n                    revert CanNotRemoveLastValidator();\n                }\n            }\n        }\n    }\n    \n    /// @dev EIP712 domain name and version.\n    function _domainNameAndVersion() internal pure override returns (string memory name, string memory version) {\n        name = \"Nexus\";\n        version = \"1.2.0\";\n    }\n}\n"},"node_modules/solady/src/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {CallContextChecker} from \"./CallContextChecker.sol\";\n\n/// @notice UUPS proxy mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/UUPSUpgradeable.sol)\n/// @author Modified from OpenZeppelin\n/// (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/UUPSUpgradeable.sol)\n///\n/// @dev Note:\n/// - This implementation is intended to be used with ERC1967 proxies.\n/// See: `LibClone.deployERC1967` and related functions.\n/// - This implementation is NOT compatible with legacy OpenZeppelin proxies\n/// which do not store the implementation at `_ERC1967_IMPLEMENTATION_SLOT`.\nabstract contract UUPSUpgradeable is CallContextChecker {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The upgrade failed.\n    error UpgradeFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Emitted when the proxy's implementation is upgraded.\n    event Upgraded(address indexed implementation);\n\n    /// @dev `keccak256(bytes(\"Upgraded(address)\"))`.\n    uint256 private constant _UPGRADED_EVENT_SIGNATURE =\n        0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ERC-1967 storage slot for the implementation in the proxy.\n    /// `uint256(keccak256(\"eip1967.proxy.implementation\")) - 1`.\n    bytes32 internal constant _ERC1967_IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      UUPS OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Please override this function to check if `msg.sender` is authorized\n    /// to upgrade the proxy to `newImplementation`, reverting if not.\n    /// ```\n    ///     function _authorizeUpgrade(address) internal override onlyOwner {}\n    /// ```\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /// @dev Returns the storage slot used by the implementation,\n    /// as specified in [ERC1822](https://eips.ethereum.org/EIPS/eip-1822).\n    ///\n    /// Note: The `notDelegated` modifier prevents accidental upgrades to\n    /// an implementation that is a proxy contract.\n    function proxiableUUID() public view virtual notDelegated returns (bytes32) {\n        // This function must always return `_ERC1967_IMPLEMENTATION_SLOT` to comply with ERC1967.\n        return _ERC1967_IMPLEMENTATION_SLOT;\n    }\n\n    /// @dev Upgrades the proxy's implementation to `newImplementation`.\n    /// Emits a {Upgraded} event.\n    ///\n    /// Note: Passing in empty `data` skips the delegatecall to `newImplementation`.\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\n        public\n        payable\n        virtual\n        onlyProxy\n    {\n        _authorizeUpgrade(newImplementation);\n        /// @solidity memory-safe-assembly\n        assembly {\n            newImplementation := shr(96, shl(96, newImplementation)) // Clears upper 96 bits.\n            mstore(0x00, returndatasize())\n            mstore(0x01, 0x52d1902d) // `proxiableUUID()`.\n            let s := _ERC1967_IMPLEMENTATION_SLOT\n            // Check if `newImplementation` implements `proxiableUUID` correctly.\n            if iszero(eq(mload(staticcall(gas(), newImplementation, 0x1d, 0x04, 0x01, 0x20)), s)) {\n                mstore(0x01, 0x55299b49) // `UpgradeFailed()`.\n                revert(0x1d, 0x04)\n            }\n            // Emit the {Upgraded} event.\n            log2(codesize(), 0x00, _UPGRADED_EVENT_SIGNATURE, newImplementation)\n            sstore(s, newImplementation) // Updates the implementation.\n\n            // Perform a delegatecall to `newImplementation` if `data` is non-empty.\n            if data.length {\n                // Forwards the `data` to `newImplementation` via delegatecall.\n                let m := mload(0x40)\n                calldatacopy(m, data.offset, data.length)\n                if iszero(delegatecall(gas(), newImplementation, m, data.length, codesize(), 0x00))\n                {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n        }\n    }\n}\n"},"node_modules/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"},"contracts/lib/ExecLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { Execution } from \"../types/DataTypes.sol\";\n\n/// @title ExecutionLib\n/// @author zeroknots.eth | rhinestone.wtf\n/// Helper Library for decoding Execution calldata\n/// malloc for memory allocation is bad for gas. use this assembly instead\nlibrary ExecLib {\n    error InvalidBatchCallData();\n\n    function get2771CallData(bytes calldata cd) internal view returns (bytes memory callData) {\n        /// @solidity memory-safe-assembly\n        (cd);\n        assembly {\n            // as per solidity docs\n            function allocate(length) -> pos {\n                pos := mload(0x40)\n                mstore(0x40, add(pos, length))\n            }\n\n            callData := allocate(add(calldatasize(), 0x20)) //allocate extra 0x20 to store length\n            mstore(callData, add(calldatasize(), 0x14)) //store length, extra 0x14 is for msg.sender address\n            calldatacopy(add(callData, 0x20), 0, calldatasize())\n\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            let senderPtr := allocate(0x14)\n            mstore(senderPtr, shl(96, caller()))\n        }\n    }\n\n    /**\n     * @notice Decode a batch of `Execution` executionBatch from a `bytes` calldata.\n     * @dev code is copied from solady's LibERC7579.sol\n     * https://github.com/Vectorized/solady/blob/740812cedc9a1fc11e17cb3d4569744367dedf19/src/accounts/LibERC7579.sol#L146\n     *      Credits to Vectorized and the Solady Team\n     */\n    function decodeBatch(bytes calldata executionCalldata) internal pure returns (Execution[] calldata executionBatch) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let u := calldataload(executionCalldata.offset)\n            let s := add(executionCalldata.offset, u)\n            let e := sub(add(executionCalldata.offset, executionCalldata.length), 0x20)\n            executionBatch.offset := add(s, 0x20)\n            executionBatch.length := calldataload(s)\n            if or(shr(64, u), gt(add(s, shl(5, executionBatch.length)), e)) {\n                mstore(0x00, 0xba597e7e) // `DecodingError()`.\n                revert(0x1c, 0x04)\n            }\n            if executionBatch.length {\n                // Perform bounds checks on the decoded `executionBatch`.\n                // Loop runs out-of-gas if `executionBatch.length` is big enough to cause overflows.\n                for { let i := executionBatch.length } 1 { } {\n                    i := sub(i, 1)\n                    let p := calldataload(add(executionBatch.offset, shl(5, i)))\n                    let c := add(executionBatch.offset, p)\n                    let q := calldataload(add(c, 0x40))\n                    let o := add(c, q)\n                    // forgefmt: disable-next-item\n                    if or(shr(64, or(calldataload(o), or(p, q))),\n                        or(gt(add(c, 0x40), e), gt(add(o, calldataload(o)), e))) {\n                        mstore(0x00, 0xba597e7e) // `DecodingError()`.\n                        revert(0x1c, 0x04)\n                    }\n                    if iszero(i) { break }\n                }\n            }\n        }\n    }   \n\n    function encodeBatch(Execution[] memory executions) internal pure returns (bytes memory callData) {\n        callData = abi.encode(executions);\n    }\n\n    function decodeSingle(bytes calldata executionCalldata) internal pure returns (address target, uint256 value, bytes calldata callData) {\n        target = address(bytes20(executionCalldata[0:20]));\n        value = uint256(bytes32(executionCalldata[20:52]));\n        callData = executionCalldata[52:];\n    }\n\n    function decodeDelegateCall(bytes calldata executionCalldata) internal pure returns (address delegate, bytes calldata callData) {\n        // destructure executionCallData according to single exec\n        delegate = address(uint160(bytes20(executionCalldata[0:20])));\n        callData = executionCalldata[20:];\n    }\n\n    function encodeSingle(address target, uint256 value, bytes memory callData) internal pure returns (bytes memory userOpCalldata) {\n        userOpCalldata = abi.encodePacked(target, value, callData);\n    }\n}\n"},"contracts/interfaces/INexus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IERC4337Account } from \"./IERC4337Account.sol\";\nimport { IERC7579Account } from \"./IERC7579Account.sol\";\nimport { INexusEventsAndErrors } from \"./INexusEventsAndErrors.sol\";\n\n/// @title Nexus - INexus Interface\n/// @notice Integrates ERC-4337 and ERC-7579 standards to manage smart accounts within the Nexus suite.\n/// @dev Consolidates ERC-4337 user operations and ERC-7579 configurations into a unified interface for smart account management.\n/// It extends both IERC4337Account and IERC7579Account, enhancing modular capabilities and supporting advanced contract architectures.\n/// Includes error definitions for robust handling of common issues such as unsupported module types and execution failures.\n/// The initialize function sets up the account with validators and configurations, ensuring readiness for use.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface INexus is IERC4337Account, IERC7579Account, INexusEventsAndErrors {\n    /// @notice Initializes the smart account with a validator and custom data.\n    /// @dev This method sets up the account for operation, linking it with a validator and initializing it with specific data.\n    /// Can be called directly or via a factory.\n    /// @param initData Encoded data used for the account's configuration during initialization.\n    function initializeAccount(bytes calldata initData) external payable;\n}\n"},"contracts/base/BaseAccount.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IEntryPoint } from \"account-abstraction/interfaces/IEntryPoint.sol\";\nimport { IBaseAccount } from \"../interfaces/base/IBaseAccount.sol\";\n\n/// @title Nexus - BaseAccount\n/// @notice Implements ERC-4337 and ERC-7579 standards for account management and access control within the Nexus suite.\n/// @dev Manages entry points and configurations as specified in the ERC-4337 and ERC-7579 documentation.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract BaseAccount is IBaseAccount {\n    /// @notice Identifier for this implementation on the network\n    string internal constant _ACCOUNT_IMPLEMENTATION_ID = \"biconomy.nexus.1.2.0\";\n\n    /// @notice The canonical address for the ERC4337 EntryPoint contract, version 0.7.\n    /// This address is consistent across all supported networks.\n    address internal immutable _ENTRYPOINT;\n\n    /// @dev Ensures the caller is either the EntryPoint or this account itself.\n    /// Reverts with AccountAccessUnauthorized if the check fails.\n    modifier onlyEntryPointOrSelf() {\n        require(msg.sender == _ENTRYPOINT || msg.sender == address(this), AccountAccessUnauthorized());\n        _;\n    }\n\n    /// @dev Ensures the caller is the EntryPoint.\n    /// Reverts with AccountAccessUnauthorized if the check fails.\n    modifier onlyEntryPoint() {\n        require(msg.sender == _ENTRYPOINT, AccountAccessUnauthorized());\n        _;\n    }\n\n    /// @dev Sends to the EntryPoint (i.e. `msg.sender`) the missing funds for this transaction.\n    /// Subclass MAY override this modifier for better funds management.\n    /// (e.g. send to the EntryPoint more than the minimum required, so that in future transactions\n    /// it will not be required to send again)\n    ///\n    /// `missingAccountFunds` is the minimum value this modifier should send the EntryPoint,\n    /// which MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\n    modifier payPrefund(uint256 missingAccountFunds) virtual {\n        _;\n        /// @solidity memory-safe-assembly\n        assembly {\n            if missingAccountFunds {\n                // Ignore failure (it's EntryPoint's job to verify, not the account's).\n                pop(call(gas(), caller(), missingAccountFunds, codesize(), 0x00, codesize(), 0x00))\n            }\n        }\n    }\n\n    /// @notice Adds deposit to the EntryPoint to fund transactions.\n    function addDeposit() external payable virtual {\n        address entryPointAddress = _ENTRYPOINT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The EntryPoint has balance accounting logic in the `receive()` function.\n            if iszero(call(gas(), entryPointAddress, callvalue(), codesize(), 0x00, codesize(), 0x00)) {\n                revert(codesize(), 0x00)\n            } // For gas estimation.\n        }\n    }\n\n    /// @notice Withdraws ETH from the EntryPoint to a specified address.\n    /// @param to The address to receive the withdrawn funds.\n    /// @param amount The amount to withdraw.\n    function withdrawDepositTo(address to, uint256 amount) external payable virtual onlyEntryPointOrSelf {\n        address entryPointAddress = _ENTRYPOINT;\n        assembly {\n            let freeMemPtr := mload(0x40) // Store the free memory pointer.\n            mstore(0x14, to) // Store the `to` argument.\n            mstore(0x34, amount) // Store the `amount` argument.\n            mstore(0x00, 0x205c2878000000000000000000000000) // `withdrawTo(address,uint256)`.\n            if iszero(call(gas(), entryPointAddress, 0, 0x10, 0x44, codesize(), 0x00)) {\n                returndatacopy(freeMemPtr, 0x00, returndatasize())\n                revert(freeMemPtr, returndatasize())\n            }\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\n        }\n    }\n\n    /// @notice Gets the nonce for a particular key.\n    /// @param key The nonce key.\n    /// @return The nonce associated with the key.\n    function nonce(uint192 key) external view virtual returns (uint256) {\n        return IEntryPoint(_ENTRYPOINT).getNonce(address(this), key);\n    }\n\n    /// @notice Returns the current deposit balance of this account on the EntryPoint.\n    /// @return result The current balance held at the EntryPoint.\n    function getDeposit() external view virtual returns (uint256 result) {\n        address entryPointAddress = _ENTRYPOINT;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, address()) // Store the `account` argument.\n            mstore(0x00, 0x70a08231) // `balanceOf(address)`.\n            result := mul(\n                // Returns 0 if the EntryPoint does not exist.\n                mload(0x20),\n                and(\n                    // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), entryPointAddress, 0x1c, 0x24, 0x20, 0x20)\n                )\n            )\n        }\n    }\n\n    /// @notice Retrieves the address of the EntryPoint contract, currently using version 0.7.\n    /// @dev This function returns the address of the canonical ERC4337 EntryPoint contract.\n    /// It can be overridden to return a different EntryPoint address if needed.\n    /// @return The address of the EntryPoint contract.\n    function entryPoint() external view returns (address) {\n        return _ENTRYPOINT;\n    }\n}\n"},"contracts/interfaces/IERC7484.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\ninterface IERC7484 {\n    event NewTrustedAttesters();\n\n    /**\n     * Allows Smart Accounts - the end users of the registry - to appoint\n     * one or many attesters as trusted.\n     * @dev this function reverts, if address(0), or duplicates are provided in attesters[]\n     *\n     * @param threshold The minimum number of attestations required for a module\n     *                  to be considered secure.\n     * @param attesters The addresses of the attesters to be trusted.\n     */\n    function trustAttesters(uint8 threshold, address[] calldata attesters) external;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*          Check with Registry internal attesters            */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n    function check(address module) external view;\n\n    function checkForAccount(address smartAccount, address module) external view;\n\n    function check(address module, uint256 moduleType) external view;\n\n    function checkForAccount(address smartAccount, address module, uint256 moduleType) external view;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*              Check with external attester(s)               */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    function check(address module, address[] calldata attesters, uint256 threshold) external view;\n\n    function check(address module, uint256 moduleType, address[] calldata attesters, uint256 threshold) external view;\n}\n"},"contracts/base/ModuleManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { SentinelListLib } from \"sentinellist/SentinelList.sol\";\nimport { Storage } from \"./Storage.sol\";\nimport { IHook } from \"../interfaces/modules/IHook.sol\";\nimport { IModule } from \"../interfaces/modules/IModule.sol\";\nimport { IPreValidationHookERC1271, IPreValidationHookERC4337 } from \"../interfaces/modules/IPreValidationHook.sol\";\nimport { IExecutor } from \"../interfaces/modules/IExecutor.sol\";\nimport { IFallback } from \"../interfaces/modules/IFallback.sol\";\nimport { IValidator } from \"../interfaces/modules/IValidator.sol\";\nimport { CallType, CALLTYPE_SINGLE, CALLTYPE_STATIC } from \"../lib/ModeLib.sol\";\nimport { ExecLib } from \"../lib/ExecLib.sol\";\nimport { LocalCallDataParserLib } from \"../lib/local/LocalCallDataParserLib.sol\";\nimport { IModuleManager } from \"../interfaces/base/IModuleManager.sol\";\nimport {\n    MODULE_TYPE_VALIDATOR,\n    MODULE_TYPE_EXECUTOR,\n    MODULE_TYPE_FALLBACK,\n    MODULE_TYPE_HOOK,\n    MODULE_TYPE_PREVALIDATION_HOOK_ERC1271,\n    MODULE_TYPE_PREVALIDATION_HOOK_ERC4337,\n    MODULE_TYPE_MULTI,\n    MODULE_ENABLE_MODE_TYPE_HASH,\n    EMERGENCY_UNINSTALL_TYPE_HASH,\n    ERC1271_MAGICVALUE\n} from \"../types/Constants.sol\";\nimport { EIP712 } from \"solady/utils/EIP712.sol\";\nimport { ExcessivelySafeCall } from \"excessively-safe-call/ExcessivelySafeCall.sol\";\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport { RegistryAdapter } from \"./RegistryAdapter.sol\";\nimport { EmergencyUninstall } from \"../types/DataTypes.sol\";\nimport { ECDSA } from \"solady/utils/ECDSA.sol\";\n\n/// @title Nexus - ModuleManager\n/// @notice Manages Validator, Executor, Hook, and Fallback modules within the Nexus suite, supporting\n/// @dev Implements SentinelList for managing modules via a linked list structure, adhering to ERC-7579.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\nabstract contract ModuleManager is Storage, EIP712, IModuleManager, RegistryAdapter {\n    using SentinelListLib for SentinelListLib.SentinelList;\n    using LocalCallDataParserLib for bytes;\n    using ExecLib for address;\n    using ExcessivelySafeCall for address;\n    using ECDSA for bytes32;\n\n    /// @dev The default validator address.\n    /// @notice To explicitly initialize the default validator, Nexus.execute(_DEFAULT_VALIDATOR.onInstall(...)) should be called.\n    address internal immutable _DEFAULT_VALIDATOR;\n\n    /// @dev initData should block the implementation from being used as a Smart Account\n    constructor(address _defaultValidator, bytes memory _initData) {\n        if (!IValidator(_defaultValidator).isModuleType(MODULE_TYPE_VALIDATOR)) \n            revert MismatchModuleTypeId(); \n        IValidator(_defaultValidator).onInstall(_initData);\n        _DEFAULT_VALIDATOR = _defaultValidator;\n    }\n\n    /// @notice Ensures the message sender is a registered executor module.\n    modifier onlyExecutorModule() virtual {\n        require(_getAccountStorage().executors.contains(msg.sender), InvalidModule(msg.sender));\n        _;\n    }\n\n    /// @notice Does pre-checks and post-checks using an installed hook on the account.\n    /// @dev sender, msg.data and msg.value is passed to the hook to implement custom flows.\n    modifier withHook() {\n        address hook = _getHook();\n        if (hook == address(0)) {\n            _;\n        } else {\n            bytes memory hookData = IHook(hook).preCheck(msg.sender, msg.value, msg.data);\n            _;\n            IHook(hook).postCheck(hookData);\n        }\n    }\n\n    // receive function\n    receive() external payable { }\n\n    /// @dev Fallback function to manage incoming calls using designated handlers based on the call type.\n    /// Hooked manually in the _fallback function\n    fallback() external payable {\n        _fallback(msg.data);\n    }\n\n    /// @dev Retrieves a paginated list of validator addresses from the linked list.\n    /// This utility function is not defined by the ERC-7579 standard and is implemented to facilitate\n    /// easier management and retrieval of large sets of validator modules.\n    /// @param cursor The address to start pagination from, or zero to start from the first entry.\n    /// @param size The number of validator addresses to return.\n    /// @return array An array of validator addresses.\n    /// @return next The address to use as a cursor for the next page of results.\n    function getValidatorsPaginated(address cursor, uint256 size) external view returns (address[] memory array, address next) {\n        (array, next) = _paginate(_getAccountStorage().validators, cursor, size);\n    }\n\n    /// @dev Retrieves a paginated list of executor addresses from the linked list.\n    /// This utility function is not defined by the ERC-7579 standard and is implemented to facilitate\n    /// easier management and retrieval of large sets of executor modules.\n    /// @param cursor The address to start pagination from, or zero to start from the first entry.\n    /// @param size The number of executor addresses to return.\n    /// @return array An array of executor addresses.\n    /// @return next The address to use as a cursor for the next page of results.\n    function getExecutorsPaginated(address cursor, uint256 size) external view returns (address[] memory array, address next) {\n        (array, next) = _paginate(_getAccountStorage().executors, cursor, size);\n    }\n\n    /// @notice Retrieves the currently active hook address.\n    /// @return hook The address of the active hook module.\n    function getActiveHook() external view returns (address hook) {\n        return _getHook();\n    }\n\n    /// @notice Fetches the fallback handler for a specific selector.\n    /// @param selector The function selector to query.\n    /// @return calltype The type of call that the handler manages.\n    /// @return handler The address of the fallback handler.\n    function getFallbackHandlerBySelector(bytes4 selector) external view returns (CallType, address) {\n        FallbackHandler memory handler = _getAccountStorage().fallbacks[selector];\n        return (handler.calltype, handler.handler);\n    }\n\n    /// @dev Initializes the module manager by setting up default states for validators and executors.\n    function _initSentinelLists() internal virtual {\n        // account module storage\n        AccountStorage storage ams = _getAccountStorage();\n        ams.executors.init();\n        ams.validators.init();\n    }\n\n    /// @dev Implements Module Enable Mode flow.\n    /// @param packedData Data source to parse data required to perform Module Enable mode from.\n    /// @return userOpSignature the clean signature which can be further used for userOp validation\n    function _enableMode(bytes32 userOpHash, bytes calldata packedData) internal returns (bytes calldata userOpSignature) {\n        address module;\n        uint256 moduleType;\n        bytes calldata moduleInitData;\n        bytes calldata enableModeSignature;\n\n        (module, moduleType, moduleInitData, enableModeSignature, userOpSignature) = packedData.parseEnableModeData();\n\n        address enableModeSigValidator = _handleValidator(address(bytes20(enableModeSignature[0:20])));\n        \n        enableModeSignature = enableModeSignature[20:];\n        \n        if (!_checkEnableModeSignature({\n            structHash: _getEnableModeDataHash(module, moduleType, userOpHash, moduleInitData), \n            sig: enableModeSignature,\n            validator: enableModeSigValidator\n        })) {\n            revert EnableModeSigError();\n        }\n        this.installModule(moduleType, module, moduleInitData);\n    }\n\n    /// @notice Installs a new module to the smart account.\n    /// @param moduleTypeId The type identifier of the module being installed, which determines its role:\n    /// - 0 for MultiType\n    /// - 1 for Validator\n    /// - 2 for Executor\n    /// - 3 for Fallback\n    /// - 4 for Hook\n    /// - 8 for PreValidationHookERC1271\n    /// - 9 for PreValidationHookERC4337\n    /// @param module The address of the module to install.\n    /// @param initData Initialization data for the module.\n    /// @dev This function goes through hook checks via withHook modifier.\n    /// @dev No need to check that the module is already installed, as this check is done\n    /// when trying to sstore the module in an appropriate SentinelList\n    function _installModule(uint256 moduleTypeId, address module, bytes calldata initData) internal {\n        if (!_areSentinelListsInitialized()) {\n            _initSentinelLists();\n        }\n        if (module == address(0)) revert ModuleAddressCanNotBeZero();\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\n            _installValidator(module, initData);\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\n            _installExecutor(module, initData);\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\n            _installFallbackHandler(module, initData);\n        } else if (moduleTypeId == MODULE_TYPE_HOOK) {\n            _installHook(module, initData);\n        } else if (moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337) {\n            _installPreValidationHook(moduleTypeId, module, initData);\n        } else if (moduleTypeId == MODULE_TYPE_MULTI) {\n            _multiTypeInstall(module, initData);\n        } else {\n            revert InvalidModuleTypeId(moduleTypeId);\n        }\n    }\n\n    /// @dev Installs a new validator module after checking if it matches the required module type.\n    /// @param validator The address of the validator module to be installed.\n    /// @param data Initialization data to configure the validator upon installation.\n    function _installValidator(\n        address validator,\n        bytes calldata data\n    )\n        internal\n        virtual\n        withHook\n        withRegistry(validator, MODULE_TYPE_VALIDATOR) \n    {\n        if (!IValidator(validator).isModuleType(MODULE_TYPE_VALIDATOR)) revert MismatchModuleTypeId();\n        if (validator == _DEFAULT_VALIDATOR) {\n            revert DefaultValidatorAlreadyInstalled();\n        }\n        _getAccountStorage().validators.push(validator);\n        IValidator(validator).onInstall(data);\n    }\n\n    /// @dev Uninstalls a validator module.\n    /// @param validator The address of the validator to be uninstalled.\n    /// @param data De-initialization data to configure the validator upon uninstallation.\n    function _uninstallValidator(address validator, bytes calldata data) internal virtual {\n        SentinelListLib.SentinelList storage validators = _getAccountStorage().validators;\n\n        (address prev, bytes memory disableModuleData) = abi.decode(data, (address, bytes));\n\n        // Perform the removal first\n        validators.pop(prev, validator);\n\n        validator.excessivelySafeCall(gasleft(), 0, 0, abi.encodeWithSelector(IModule.onUninstall.selector, disableModuleData));\n    }\n\n    /// @dev Installs a new executor module after checking if it matches the required module type.\n    /// @param executor The address of the executor module to be installed.\n    /// @param data Initialization data to configure the executor upon installation.\n    function _installExecutor(\n        address executor,\n        bytes calldata data\n    ) \n        internal\n        virtual\n        withHook\n        withRegistry(executor, MODULE_TYPE_EXECUTOR) \n    {\n        if (!IExecutor(executor).isModuleType(MODULE_TYPE_EXECUTOR)) revert MismatchModuleTypeId();\n        _getAccountStorage().executors.push(executor);\n        IExecutor(executor).onInstall(data);\n    }\n\n    /// @dev Uninstalls an executor module by removing it from the executors list.\n    /// @param executor The address of the executor to be uninstalled.\n    /// @param data De-initialization data to configure the executor upon uninstallation.\n    function _uninstallExecutor(address executor, bytes calldata data) internal virtual {\n        (address prev, bytes memory disableModuleData) = abi.decode(data, (address, bytes));\n        _getAccountStorage().executors.pop(prev, executor);\n        executor.excessivelySafeCall(gasleft(), 0, 0, abi.encodeWithSelector(IModule.onUninstall.selector, disableModuleData));\n    }\n\n    /// @dev Installs a hook module, ensuring no other hooks are installed before proceeding.\n    /// @param hook The address of the hook to be installed.\n    /// @param data Initialization data to configure the hook upon installation.\n    function _installHook(\n        address hook,\n        bytes calldata data\n    ) \n        internal\n        virtual\n        withHook\n        withRegistry(hook, MODULE_TYPE_HOOK) \n    {\n        if (!IHook(hook).isModuleType(MODULE_TYPE_HOOK)) revert MismatchModuleTypeId();\n        address currentHook = _getHook();\n        require(currentHook == address(0), HookAlreadyInstalled(currentHook));\n        _setHook(hook);\n        IHook(hook).onInstall(data);\n    }\n\n    /// @dev Uninstalls a hook module, ensuring the current hook matches the one intended for uninstallation.\n    /// @param hook The address of the hook to be uninstalled.\n    /// @param hookType The type of the hook to be uninstalled.\n    /// @param data De-initialization data to configure the hook upon uninstallation.\n    function _uninstallHook(address hook, uint256 hookType, bytes calldata data) internal virtual {\n        if (hookType == MODULE_TYPE_HOOK) {\n            _setHook(address(0));\n        } else if (hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337) {\n            _uninstallPreValidationHook(hook, hookType, data);\n        }\n        hook.excessivelySafeCall(gasleft(), 0, 0, abi.encodeWithSelector(IModule.onUninstall.selector, data));\n    }\n\n    /// @dev Sets the current hook in the storage to the specified address.\n    /// @param hook The new hook address.\n    function _setHook(address hook) internal virtual {\n        _getAccountStorage().hook = IHook(hook);\n    }\n\n    /// @dev Installs a fallback handler for a given selector with initialization data.\n    /// @param handler The address of the fallback handler to install.\n    /// @param params The initialization parameters including the selector and call type.\n    function _installFallbackHandler(\n        address handler, \n        bytes calldata params\n    )\n        internal \n        virtual\n        withHook\n        withRegistry(handler, MODULE_TYPE_FALLBACK) \n    {\n        if (!IFallback(handler).isModuleType(MODULE_TYPE_FALLBACK)) revert MismatchModuleTypeId();\n        // Extract the function selector from the provided parameters.\n        bytes4 selector = bytes4(params[0:4]);\n\n        // Extract the call type from the provided parameters.\n        CallType calltype = CallType.wrap(bytes1(params[4]));\n\n        require(calltype == CALLTYPE_SINGLE || calltype == CALLTYPE_STATIC, FallbackCallTypeInvalid());\n\n        // Extract the initialization data from the provided parameters.\n        bytes memory initData = params[5:];\n\n        // Revert if the selector is either `onInstall(bytes)` (0x6d61fe70) or `onUninstall(bytes)` (0x8a91b0e3) or explicit bytes(0).\n        // These selectors are explicitly forbidden to prevent security vulnerabilities.\n        // Allowing these selectors would enable unauthorized users to uninstall and reinstall critical modules.\n        // If a validator module is uninstalled and reinstalled without proper authorization, it can compromise\n        // the account's security and integrity. By restricting these selectors, we ensure that the fallback handler\n        // cannot be manipulated to disrupt the expected behavior and security of the account.\n        require(!(selector == bytes4(0x6d61fe70) || selector == bytes4(0x8a91b0e3) || selector == bytes4(0)), FallbackSelectorForbidden());\n\n        // Revert if a fallback handler is already installed for the given selector.\n        // This check ensures that we do not overwrite an existing fallback handler, which could lead to unexpected behavior.\n        require(!_isFallbackHandlerInstalled(selector), FallbackAlreadyInstalledForSelector(selector));\n\n        // Store the fallback handler and its call type in the account storage.\n        // This maps the function selector to the specified fallback handler and call type.\n        _getAccountStorage().fallbacks[selector] = FallbackHandler(handler, calltype);\n\n        // Invoke the `onInstall` function of the fallback handler with the provided initialization data.\n        // This step allows the fallback handler to perform any necessary setup or initialization.\n        IFallback(handler).onInstall(initData);\n    }\n\n    /// @dev Uninstalls a fallback handler for a given selector.\n    /// @param fallbackHandler The address of the fallback handler to uninstall.\n    /// @param data The de-initialization data containing the selector.\n    function _uninstallFallbackHandler(address fallbackHandler, bytes calldata data) internal virtual {\n        _getAccountStorage().fallbacks[bytes4(data[0:4])] = FallbackHandler(address(0), CallType.wrap(0x00));\n        fallbackHandler.excessivelySafeCall(gasleft(), 0, 0, abi.encodeWithSelector(IModule.onUninstall.selector, data[4:]));\n    }\n\n    /// @dev Installs a pre-validation hook module, ensuring no other pre-validation hooks are installed before proceeding.\n    /// @param preValidationHookType The type of the pre-validation hook.\n    /// @param preValidationHook The address of the pre-validation hook to be installed.\n    /// @param data Initialization data to configure the hook upon installation.\n    function _installPreValidationHook(\n        uint256 preValidationHookType,\n        address preValidationHook,\n        bytes calldata data\n    )\n        internal\n        virtual\n        withHook\n        withRegistry(preValidationHook, preValidationHookType)\n    {\n        if (!IModule(preValidationHook).isModuleType(preValidationHookType)) revert MismatchModuleTypeId();\n        address currentPreValidationHook = _getPreValidationHook(preValidationHookType);\n        require(currentPreValidationHook == address(0), PrevalidationHookAlreadyInstalled(currentPreValidationHook));\n        _setPreValidationHook(preValidationHookType, preValidationHook);\n        IModule(preValidationHook).onInstall(data);\n    }\n\n    /// @dev Uninstalls a pre-validation hook module\n    /// @param preValidationHook The address of the pre-validation hook to be uninstalled.\n    /// @param hookType The type of the pre-validation hook.\n    /// @param data De-initialization data to configure the hook upon uninstallation.\n    function _uninstallPreValidationHook(address preValidationHook, uint256 hookType, bytes calldata data) internal virtual {\n        _setPreValidationHook(hookType, address(0));\n    }\n\n    /// @dev Sets the current pre-validation hook in the storage to the specified address, based on the hook type.\n    /// @param hookType The type of the pre-validation hook.\n    /// @param hook The new hook address.\n    function _setPreValidationHook(uint256 hookType, address hook) internal virtual {\n        if (hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271) {\n            _getAccountStorage().preValidationHookERC1271 = IPreValidationHookERC1271(hook);\n        } else if (hookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337) {\n            _getAccountStorage().preValidationHookERC4337 = IPreValidationHookERC4337(hook);\n        }\n    }\n\n    /// @notice Installs a module with multiple types in a single operation.\n    /// @dev This function handles installing a multi-type module by iterating through each type and initializing it.\n    /// The initData should include an ABI-encoded tuple of (uint[] types, bytes[] initDatas).\n    /// @param module The address of the multi-type module.\n    /// @param initData Initialization data for each type within the module.\n    function _multiTypeInstall(address module, bytes calldata initData) internal virtual {\n        (uint256[] calldata types, bytes[] calldata initDatas) = initData.parseMultiTypeInitData();\n\n        uint256 length = types.length;\n        if (initDatas.length != length) revert InvalidInput();\n\n        // iterate over all module types and install the module as a type accordingly\n        for (uint256 i; i < length; i++) {\n            uint256 theType = types[i];\n\n            /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n            /*                      INSTALL VALIDATORS                    */\n            /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n            if (theType == MODULE_TYPE_VALIDATOR) {\n                _installValidator(module, initDatas[i]);\n            }\n            /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n            /*                       INSTALL EXECUTORS                    */\n            /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n            else if (theType == MODULE_TYPE_EXECUTOR) {\n                _installExecutor(module, initDatas[i]);\n            }\n            /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n            /*                       INSTALL FALLBACK                     */\n            /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n            else if (theType == MODULE_TYPE_FALLBACK) {\n                _installFallbackHandler(module, initDatas[i]);\n            }\n            /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n            /*          INSTALL HOOK (global only, not sig-specific)      */\n            /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n            else if (theType == MODULE_TYPE_HOOK) {\n                _installHook(module, initDatas[i]);\n            }\n            /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n            /*          INSTALL PRE-VALIDATION HOOK                       */\n            /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n            else if (theType == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || theType == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337) {\n                _installPreValidationHook(theType, module, initDatas[i]);\n            }\n        }\n    }\n\n    /// @notice Checks if an emergency uninstall signature is valid.\n    /// @param data The emergency uninstall data.\n    /// @param signature The signature to validate.\n    function _checkEmergencyUninstallSignature(EmergencyUninstall calldata data, bytes calldata signature) internal {\n        address validator = _handleValidator(address(bytes20(signature[0:20])));\n        // Hash the data\n        bytes32 hash = _getEmergencyUninstallDataHash(data.hook, data.hookType, data.deInitData, data.nonce);\n        // Check if nonce is valid\n        require(!_getAccountStorage().nonces[data.nonce], InvalidNonce());\n        // Mark nonce as used\n        _getAccountStorage().nonces[data.nonce] = true;\n        // Check if the signature is valid\n        require((IValidator(validator).isValidSignatureWithSender(address(this), hash, signature[20:]) == ERC1271_MAGICVALUE), EmergencyUninstallSigError());\n    }\n\n    /// @dev Retrieves the pre-validation hook from the storage based on the hook type.\n    /// @param preValidationHookType The type of the pre-validation hook.\n    /// @return preValidationHook The address of the pre-validation hook.\n    function _getPreValidationHook(uint256 preValidationHookType) internal view returns (address preValidationHook) {\n        preValidationHook = preValidationHookType == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271\n            ? address(_getAccountStorage().preValidationHookERC1271)\n            : address(_getAccountStorage().preValidationHookERC4337);\n    }\n\n    /// @dev Calls the pre-validation hook for ERC-1271.\n    /// @param hash The hash of the user operation.\n    /// @param signature The signature to validate.\n    /// @return postHash The updated hash after the pre-validation hook.\n    /// @return postSig The updated signature after the pre-validation hook.\n    function _withPreValidationHook(bytes32 hash, bytes calldata signature) internal view virtual returns (bytes32 postHash, bytes memory postSig) {\n        // Get the pre-validation hook for ERC-1271\n        address preValidationHook = _getPreValidationHook(MODULE_TYPE_PREVALIDATION_HOOK_ERC1271);\n        // If no pre-validation hook is installed, return the original hash and signature\n        if (preValidationHook == address(0)) return (hash, signature);\n        // Otherwise, call the pre-validation hook and return the updated hash and signature\n        else return IPreValidationHookERC1271(preValidationHook).preValidationHookERC1271(msg.sender, hash, signature);\n    }\n\n    /// @dev Calls the pre-validation hook for ERC-4337.\n    /// @param hash The hash of the user operation.\n    /// @param userOp The user operation data.\n    /// @param missingAccountFunds The amount of missing account funds.\n    /// @return postHash The updated hash after the pre-validation hook.\n    /// @return postSig The updated signature after the pre-validation hook.\n    function _withPreValidationHook(\n        bytes32 hash,\n        PackedUserOperation memory userOp,\n        uint256 missingAccountFunds\n    )\n        internal\n        virtual\n        returns (bytes32 postHash, bytes memory postSig)\n    {\n        // Get the pre-validation hook for ERC-4337\n        address preValidationHook = _getPreValidationHook(MODULE_TYPE_PREVALIDATION_HOOK_ERC4337);\n        // If no pre-validation hook is installed, return the original hash and signature\n        if (preValidationHook == address(0)) return (hash, userOp.signature);\n        // Otherwise, call the pre-validation hook and return the updated hash and signature\n        else return IPreValidationHookERC4337(preValidationHook).preValidationHookERC4337(userOp, missingAccountFunds, hash);\n    }\n\n    /// @notice Checks if an enable mode signature is valid.\n    /// @param structHash data hash.\n    /// @param sig Signature.\n    /// @param validator Validator address.\n    function _checkEnableModeSignature(\n        bytes32 structHash,\n        bytes calldata sig,\n        address validator\n    ) internal view returns (bool) {\n        bytes32 eip712Digest = _hashTypedData(structHash);\n        // Use standard IERC-1271/ERC-7739 interface.\n        // Even if the validator doesn't support 7739 under the hood, it is still secure,\n        // as eip712digest is already built based on 712Domain of this Smart Account\n        // This interface should always be exposed by validators as per ERC-7579\n        try IValidator(validator).isValidSignatureWithSender(address(this), eip712Digest, sig) returns (bytes4 res) {\n                return res == ERC1271_MAGICVALUE;\n        } catch {\n            return false;\n        }\n    }\n\n    /// @notice Builds the enable mode data hash as per eip712\n    /// @param module Module being enabled\n    /// @param moduleType Type of the module as per EIP-7579\n    /// @param userOpHash Hash of the User Operation\n    /// @param initData Module init data.\n    /// @return structHash data hash\n    function _getEnableModeDataHash(address module, uint256 moduleType, bytes32 userOpHash, bytes calldata initData) internal view returns (bytes32) {\n        return keccak256(abi.encode(MODULE_ENABLE_MODE_TYPE_HASH, module, moduleType, userOpHash, keccak256(initData)));\n    }\n\n    /// @notice Builds the emergency uninstall data hash as per eip712\n    /// @param hookType Type of the hook (4 for Hook, 8 for ERC-1271 Prevalidation Hook, 9 for ERC-4337 Prevalidation Hook)\n    /// @param hook address of the hook being uninstalled\n    /// @param data De-initialization data to configure the hook upon uninstallation.\n    /// @param nonce Unique nonce for the operation\n    /// @return structHash data hash\n    function _getEmergencyUninstallDataHash(address hook, uint256 hookType, bytes calldata data, uint256 nonce) internal view returns (bytes32) {\n        return _hashTypedData(keccak256(abi.encode(EMERGENCY_UNINSTALL_TYPE_HASH, hook, hookType, keccak256(data), nonce)));\n    }\n\n    /// @notice Checks if a module is installed on the smart account.\n    /// @param moduleTypeId The module type ID.\n    /// @param module The module address.\n    /// @param additionalContext Additional context for checking installation.\n    /// @return True if the module is installed, false otherwise.\n    function _isModuleInstalled(uint256 moduleTypeId, address module, bytes calldata additionalContext) internal view returns (bool) {\n        additionalContext;\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\n            return _isValidatorInstalled(module);\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\n            return _isExecutorInstalled(module);\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\n            bytes4 selector;\n            if (additionalContext.length >= 4) {\n                selector = bytes4(additionalContext[0:4]);\n            } else {\n                selector = bytes4(0x00000000);\n            }\n            return _isFallbackHandlerInstalled(selector, module);\n        } else if (moduleTypeId == MODULE_TYPE_HOOK) {\n            return _isHookInstalled(module);\n        } else if (moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 || moduleTypeId == MODULE_TYPE_PREVALIDATION_HOOK_ERC4337) {\n            return _getPreValidationHook(moduleTypeId) == module;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev Checks if the validator list is already initialized.\n    ///      In theory it doesn't 100% mean there is a validator or executor installed.\n    ///      Use below functions to check for validators and executors.\n    function _areSentinelListsInitialized() internal view virtual returns (bool) {\n        // account module storage\n        AccountStorage storage ams = _getAccountStorage();\n        return ams.validators.alreadyInitialized() && ams.executors.alreadyInitialized();\n    }\n\n    /// @dev Checks if a fallback handler is set for a given selector.\n    /// @param selector The function selector to check.\n    /// @return True if a fallback handler is set, otherwise false.\n    function _isFallbackHandlerInstalled(bytes4 selector) internal view virtual returns (bool) {\n        FallbackHandler storage handler = _getAccountStorage().fallbacks[selector];\n        return handler.handler != address(0);\n    }\n\n    /// @dev Checks if the expected fallback handler is installed for a given selector.\n    /// @param selector The function selector to check.\n    /// @param expectedHandler The address of the handler expected to be installed.\n    /// @return True if the installed handler matches the expected handler, otherwise false.\n    function _isFallbackHandlerInstalled(bytes4 selector, address expectedHandler) internal view returns (bool) {\n        FallbackHandler storage handler = _getAccountStorage().fallbacks[selector];\n        return handler.handler == expectedHandler;\n    }\n\n    /// @dev Checks if a validator is currently installed.\n    /// @param validator The address of the validator to check.\n    /// @return True if the validator is installed, otherwise false.\n    function _isValidatorInstalled(address validator) internal view virtual returns (bool) {\n        return _getAccountStorage().validators.contains(validator);\n    }\n\n    /// @dev Checks if an executor is currently installed.\n    /// @param executor The address of the executor to check.\n    /// @return True if the executor is installed, otherwise false.\n    function _isExecutorInstalled(address executor) internal view virtual returns (bool) {\n        return _getAccountStorage().executors.contains(executor);\n    }\n\n    /// @dev Checks if a hook is currently installed.\n    /// @param hook The address of the hook to check.\n    /// @return True if the hook is installed, otherwise false.\n    function _isHookInstalled(address hook) internal view returns (bool) {\n        return _getHook() == hook;\n    }\n\n    /// @dev Retrieves the current hook from the storage.\n    /// @return hook The address of the current hook.\n    function _getHook() internal view returns (address hook) {\n        hook = address(_getAccountStorage().hook);\n    }\n\n    /// @dev Checks if the account is an ERC7702 account\n    function _amIERC7702() internal view returns (bool res) {\n        assembly {\n            // use extcodesize as the first cheapest check\n            if eq(extcodesize(address()), 23) {\n                // use extcodecopy to copy first 3 bytes of this contract and compare with 0xef0100\n                extcodecopy(address(), 0, 0, 3)\n                res := eq(0xef0100, shr(232, mload(0x00)))\n            }\n            // if it is not 23, we do not even check the first 3 bytes\n        }\n    }\n\n    /// @dev Returns the validator address to use\n    function _handleValidator(address validator) internal view returns (address) {\n        if (validator == address(0)) {\n            return _DEFAULT_VALIDATOR;\n        } else {\n            require(_isValidatorInstalled(validator), ValidatorNotInstalled(validator));\n            return validator;\n        }\n    }\n\n    function _fallback(bytes calldata callData) private {\n        bool success;\n        bytes memory result;\n        FallbackHandler storage $fallbackHandler = _getAccountStorage().fallbacks[msg.sig];\n        address handler = $fallbackHandler.handler;\n        CallType calltype = $fallbackHandler.calltype;\n\n        if (handler != address(0)) {\n            // hook manually\n            address hook = _getHook();\n            bytes memory hookData;\n            if (hook != address(0)) {\n                hookData = IHook(hook).preCheck(msg.sender, msg.value, msg.data);\n            }\n            //if there's a fallback handler, call it\n            if (calltype == CALLTYPE_STATIC) {\n                (success, result) = handler.staticcall(ExecLib.get2771CallData(callData));\n            } else if (calltype == CALLTYPE_SINGLE) {\n                (success, result) = handler.call{ value: msg.value }(ExecLib.get2771CallData(callData));\n            } else {\n                revert UnsupportedCallType(calltype);\n            }\n\n            // Use revert message from fallback handler if the call was not successful\n            assembly {\n                if iszero(success) {\n                    revert(add(result, 0x20), mload(result))\n                }\n            }\n\n            // hook post check\n            if (hook != address(0)) {\n                IHook(hook).postCheck(hookData);\n            }\n\n            // return the result\n            assembly {\n                return(add(result, 0x20), mload(result))\n            }\n        }\n        \n        // If there's no handler, the call can be one of onERCXXXReceived()\n        // No need to hook this as no execution is done here\n        bytes32 s;\n        /// @solidity memory-safe-assembly\n        assembly {\n            s := shr(224, calldataload(0))\n            // 0x150b7a02: `onERC721Received(address,address,uint256,bytes)`.\n            // 0xf23a6e61: `onERC1155Received(address,address,uint256,uint256,bytes)`.\n            // 0xbc197c81: `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\n            if or(eq(s, 0x150b7a02), or(eq(s, 0xf23a6e61), eq(s, 0xbc197c81))) {\n                mstore(0x20, s) // Store `msg.sig`.\n                return(0x3c, 0x20) // Return `msg.sig`.\n            }\n        }\n        // if there was no handler and it is not the onERCXXXReceived call, revert\n        revert MissingFallbackHandler(msg.sig);\n    }\n\n    /// @dev Helper function to paginate entries in a SentinelList.\n    /// @param list The SentinelList to paginate.\n    /// @param cursor The cursor to start paginating from.\n    /// @param size The number of entries to return.\n    /// @return array The array of addresses in the list.\n    /// @return nextCursor The cursor for the next page of entries.\n    function _paginate(\n        SentinelListLib.SentinelList storage list,\n        address cursor,\n        uint256 size\n    )\n        private\n        view\n        returns (address[] memory array, address nextCursor)\n    {\n        (array, nextCursor) = list.getEntriesPaginated(cursor, size);\n    }\n}\n"},"contracts/base/ExecutionHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { Execution } from \"../types/DataTypes.sol\";\nimport { IExecutionHelperEventsAndErrors } from \"../interfaces/base/IExecutionHelper.sol\";\nimport { ExecType, EXECTYPE_DEFAULT, EXECTYPE_TRY } from \"../lib/ModeLib.sol\";\nimport { ExecLib } from \"../lib/ExecLib.sol\";\n\n/// @title Nexus - ExecutionHelper\n/// @notice Implements execution management within the Nexus suite, facilitating transaction execution strategies and\n/// error handling.\n/// @dev Provides mechanisms for direct and batched transactions with both committed and tentative execution strategies\n/// as per ERC-4337 and ERC-7579 standards.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract ExecutionHelper is IExecutionHelperEventsAndErrors {\n    using ExecLib for bytes;\n\n    /// @notice Executes a call to a target address with specified value and data.\n    /// @notice calls to an EOA should be counted as successful.\n    /// @param target The address to execute the call on.\n    /// @param value The amount of wei to send with the call.\n    /// @param callData The calldata to send.\n    /// @return result The bytes returned from the execution, which contains the returned data from the target address.\n    function _execute(address target, uint256 value, bytes calldata callData) internal virtual returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            if iszero(call(gas(), target, value, result, callData.length, codesize(), 0x00)) {\n                // Bubble up the revert if the call reverts.\n                returndatacopy(result, 0x00, returndatasize())\n                revert(result, returndatasize())\n            }\n            mstore(result, returndatasize()) // Store the length.\n            let o := add(result, 0x20)\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\n        }\n    }\n\n    /// @notice Executes a call to a target address with specified value and data.\n    /// same as _execute, but callData can be in memory\n    function _executeMemory(address target, uint256 value, bytes memory callData) internal virtual returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            if iszero(call(gas(), target, value, add(callData, 0x20), mload(callData), codesize(), 0x00)) {\n                // Bubble up the revert if the call reverts.\n                returndatacopy(result, 0x00, returndatasize())\n                revert(result, returndatasize())\n            }\n            mstore(result, returndatasize()) // Store the length.\n            let o := add(result, 0x20)\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\n        }\n    }\n\n    /// @notice Executes a call to a target address with specified value and data.\n    /// Same as _execute but without return data for gas optimization.\n    function _executeNoReturndata(address target, uint256 value, bytes calldata callData) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            if iszero(call(gas(), target, value, result, callData.length, codesize(), 0x00)) {\n                // Bubble up the revert if the call reverts.\n                returndatacopy(result, 0x00, returndatasize())\n                revert(result, returndatasize())\n            }\n            mstore(0x40, add(result, callData.length)) //allocate memory\n        }\n    }\n\n    /// @notice Tries to execute a call and captures if it was successful or not.\n    /// @dev Similar to _execute but returns a success boolean and catches reverts instead of propagating them.\n    /// @notice calls to an EOA should be counted as successful.\n    /// @param target The address to execute the call on.\n    /// @param value The amount of wei to send with the call.\n    /// @param callData The calldata to send.\n    /// @return success True if the execution was successful, false otherwise.\n    /// @return result The bytes returned from the execution, which contains the returned data from the target address.\n    function _tryExecute(address target, uint256 value, bytes calldata callData) internal virtual returns (bool success, bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            success := call(gas(), target, value, result, callData.length, codesize(), 0x00)\n            mstore(result, returndatasize()) // Store the length.\n            let o := add(result, 0x20)\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\n        }\n    }\n\n    /// @notice Executes a batch of calls.\n    /// @param executions An array of Execution structs each containing target, value, and calldata.\n    /// @return result An array of bytes returned from each executed call, corresponding to the returndata from each target address.\n    function _executeBatch(Execution[] calldata executions) internal returns (bytes[] memory result) {\n        result = new bytes[](executions.length);\n\n        Execution calldata exec;\n        for (uint256 i; i < executions.length; i++) {\n            exec = executions[i];\n            result[i] = _execute(exec.target, exec.value, exec.callData);\n        }\n    }\n\n    /// @notice Executes a batch of calls without returning the result.\n    /// @param executions An array of Execution structs each containing target, value, and calldata.\n    function _executeBatchNoReturndata(Execution[] calldata executions) internal {\n        Execution calldata exec;\n        for (uint256 i; i < executions.length; i++) {\n            exec = executions[i];\n            _executeNoReturndata(exec.target, exec.value, exec.callData);\n        }\n    }\n\n    /// @notice Tries to execute a batch of calls and emits an event for each unsuccessful call.\n    /// @param executions An array of Execution structs.\n    /// @return result An array of bytes returned from each executed call, with unsuccessful calls marked by events.\n    function _tryExecuteBatch(Execution[] calldata executions) internal returns (bytes[] memory result) {\n        result = new bytes[](executions.length);\n\n        Execution calldata exec;\n        for (uint256 i; i < executions.length; i++) {\n            exec = executions[i];\n            bool success;\n            (success, result[i]) = _tryExecute(exec.target, exec.value, exec.callData);\n            if (!success) emit TryExecuteUnsuccessful(exec.callData, result[i]);\n        }\n    }\n\n    /// @dev Execute a delegatecall with `delegate` on this account.\n    /// @return result The bytes returned from the delegatecall, which contains the returned data from the delegate contract.\n    function _executeDelegatecall(address delegate, bytes calldata callData) internal returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            // Forwards the `data` to `delegate` via delegatecall.\n            if iszero(delegatecall(gas(), delegate, result, callData.length, codesize(), 0x00)) {\n                // Bubble up the revert if the call reverts.\n                returndatacopy(result, 0x00, returndatasize())\n                revert(result, returndatasize())\n            }\n            mstore(result, returndatasize()) // Store the length.\n            let o := add(result, 0x20)\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\n        }\n    }\n\n    /// @dev Execute a delegatecall with `delegate` on this account.\n    /// Same as _executeDelegatecall but without return data for gas optimization.\n    function _executeDelegatecallNoReturndata(address delegate, bytes calldata callData) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            if iszero(delegatecall(gas(), delegate, result, callData.length, codesize(), 0x00)) {\n                // Bubble up the revert if the call reverts.\n                returndatacopy(result, 0x00, returndatasize())\n                revert(result, returndatasize())\n            }\n            mstore(0x40, add(result, callData.length)) //allocate memory\n        }\n    }\n\n    /// @dev Execute a delegatecall with `delegate` on this account and catch reverts.\n    /// @return success True if the delegatecall was successful, false otherwise.\n    /// @return result The bytes returned from the delegatecall, which contains the returned data from the delegate contract.\n    function _tryExecuteDelegatecall(address delegate, bytes calldata callData) internal returns (bool success, bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            calldatacopy(result, callData.offset, callData.length)\n            // Forwards the `data` to `delegate` via delegatecall.\n            success := delegatecall(gas(), delegate, result, callData.length, codesize(), 0x00)\n            mstore(result, returndatasize()) // Store the length.\n            let o := add(result, 0x20)\n            returndatacopy(o, 0x00, returndatasize()) // Copy the returndata.\n            mstore(0x40, add(o, returndatasize())) // Allocate the memory.\n        }\n    }\n\n    /// @dev Executes a single transaction based on the specified execution type.\n    /// @param executionCalldata The calldata containing the transaction details (target address, value, and data).\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    function _handleSingleExecution(bytes calldata executionCalldata, ExecType execType) internal {\n        (address target, uint256 value, bytes calldata callData) = executionCalldata.decodeSingle();\n        if (execType == EXECTYPE_DEFAULT) _executeNoReturndata(target, value, callData);\n        else if (execType == EXECTYPE_TRY) {\n            (bool success, bytes memory result) = _tryExecute(target, value, callData);\n            if (!success) emit TryExecuteUnsuccessful(callData, result);\n        } else revert UnsupportedExecType(execType);\n    }\n\n    /// @dev Executes a batch of transactions based on the specified execution type.\n    /// @param executionCalldata The calldata for a batch of transactions.\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    function _handleBatchExecution(bytes calldata executionCalldata, ExecType execType) internal {\n        Execution[] calldata executions = executionCalldata.decodeBatch();\n        if (execType == EXECTYPE_DEFAULT) _executeBatchNoReturndata(executions);\n        else if (execType == EXECTYPE_TRY) _tryExecuteBatch(executions);\n        else revert UnsupportedExecType(execType);\n    }\n\n    /// @dev Executes a single transaction based on the specified execution type.\n    /// @param executionCalldata The calldata containing the transaction details (target address, value, and data).\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    function _handleDelegateCallExecution(bytes calldata executionCalldata, ExecType execType) internal {\n        (address delegate, bytes calldata callData) = executionCalldata.decodeDelegateCall();\n        if (execType == EXECTYPE_DEFAULT) _executeDelegatecallNoReturndata(delegate, callData);\n        else if (execType == EXECTYPE_TRY) {\n            (bool success, bytes memory result) = _tryExecuteDelegatecall(delegate, callData);\n            if (!success) emit TryDelegateCallUnsuccessful(callData, result);\n        } else revert UnsupportedExecType(execType);\n    }\n\n    /// @dev Executes a single transaction based on the specified execution type.\n    /// @param executionCalldata The calldata containing the transaction details (target address, value, and data).\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    /// @return returnData An array containing the execution result. In the case of a single transaction, the array contains one element.\n    function _handleSingleExecutionAndReturnData(bytes calldata executionCalldata, ExecType execType) internal returns (bytes[] memory returnData) {\n        (address target, uint256 value, bytes calldata callData) = executionCalldata.decodeSingle();\n        returnData = new bytes[](1);\n        bool success;\n        // check if execType is revert(default) or try\n        if (execType == EXECTYPE_DEFAULT) {\n            returnData[0] = _execute(target, value, callData);\n        } else if (execType == EXECTYPE_TRY) {\n            (success, returnData[0]) = _tryExecute(target, value, callData);\n            if (!success) emit TryExecuteUnsuccessful(callData, returnData[0]);\n        } else {\n            revert UnsupportedExecType(execType);\n        }\n    }\n\n    /// @dev Executes a batch of transactions based on the specified execution type.\n    /// @param executionCalldata The calldata for a batch of transactions.\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    /// @return returnData An array containing the execution results for each transaction in the batch.\n    function _handleBatchExecutionAndReturnData(bytes calldata executionCalldata, ExecType execType) internal returns (bytes[] memory returnData) {\n        Execution[] calldata executions = executionCalldata.decodeBatch();\n        if (execType == EXECTYPE_DEFAULT) returnData = _executeBatch(executions);\n        else if (execType == EXECTYPE_TRY) returnData = _tryExecuteBatch(executions);\n        else revert UnsupportedExecType(execType);\n    }\n\n    /// @dev Executes a single transaction based on the specified execution type.\n    /// @param executionCalldata The calldata containing the transaction details (target address, value, and data).\n    /// @param execType The execution type, which can be DEFAULT (revert on failure) or TRY (return on failure).\n    /// @return returnData An array containing the result of the delegatecall execution.\n    function _handleDelegateCallExecutionAndReturnData(\n        bytes calldata executionCalldata,\n        ExecType execType\n    ) internal returns (bytes[] memory returnData) {\n        (address delegate, bytes calldata callData) = executionCalldata.decodeDelegateCall();\n        returnData = new bytes[](1);\n        bool success;\n        if (execType == EXECTYPE_DEFAULT) {\n            returnData[0] = _executeDelegatecall(delegate, callData);\n        } else if (execType == EXECTYPE_TRY) {\n            (success, returnData[0]) = _tryExecuteDelegatecall(delegate, callData);\n            if (!success) emit TryDelegateCallUnsuccessful(callData, returnData[0]);\n        } else revert UnsupportedExecType(execType);\n    }\n}\n"},"contracts/interfaces/modules/IValidator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\nimport { IModule } from \"./IModule.sol\";\n\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IValidator is IModule {\n    /// @notice Validates a user operation as per ERC-4337 standard requirements.\n    /// @dev Should ensure that the signature and nonce are verified correctly before the transaction is allowed to proceed.\n    /// The function returns a status code indicating validation success or failure.\n    /// @param userOp The user operation containing transaction details to be validated.\n    /// @param userOpHash The hash of the user operation data, used for verifying the signature.\n    /// @return status The result of the validation process, typically indicating success or the type of failure.\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external returns (uint256);\n\n    /// @notice Verifies a signature against a hash, using the sender's address as a contextual check.\n    /// @dev Used to confirm the validity of a signature against the specific conditions set by the sender.\n    /// @param sender The address from which the operation was initiated, adding an additional layer of validation against the signature.\n    /// @param hash The hash of the data signed.\n    /// @param data The signature data to validate.\n    /// @return magicValue A bytes4 value that corresponds to the ERC-1271 standard, indicating the validity of the signature.\n    function isValidSignatureWithSender(address sender, bytes32 hash, bytes calldata data) external view returns (bytes4);\n}\n"},"contracts/types/Constants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n// Magic value for ERC-1271 valid signature\nbytes4 constant ERC1271_MAGICVALUE = 0x1626ba7e;\n\n// Value indicating an invalid ERC-1271 signature\nbytes4 constant ERC1271_INVALID = 0xFFFFFFFF;\n\n// Value indicating successful validation\nuint256 constant VALIDATION_SUCCESS = 0;\n\n// Value indicating failed validation\nuint256 constant VALIDATION_FAILED = 1;\n\n// Module type identifier for Multitype install\nuint256 constant MODULE_TYPE_MULTI = 0;\n\n// Module type identifier for validators\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\n\n// Module type identifier for executors\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\n\n// Module type identifier for fallback handlers\nuint256 constant MODULE_TYPE_FALLBACK = 3;\n\n// Module type identifier for hooks\nuint256 constant MODULE_TYPE_HOOK = 4;\n\n// Module type identifiers for pre-validation hooks\nuint256 constant MODULE_TYPE_PREVALIDATION_HOOK_ERC1271 = 8;\nuint256 constant MODULE_TYPE_PREVALIDATION_HOOK_ERC4337 = 9;\n\n\n// keccak256(\"ModuleEnableMode(address module,uint256 moduleType,bytes32 userOpHash,bytes initData)\")\nbytes32 constant MODULE_ENABLE_MODE_TYPE_HASH = 0xf6c866c1cd985ce61f030431e576c0e82887de0643dfa8a2e6efc3463e638ed0;\n\n// keccak256(\"EmergencyUninstall(address hook,uint256 hookType,bytes deInitData,uint256 nonce)\")\nbytes32 constant EMERGENCY_UNINSTALL_TYPE_HASH = 0xd3ddfc12654178cc44d4a7b6b969cfdce7ffe6342326ba37825314cffa0fba9c;\n\n// Validation modes\nbytes1 constant MODE_VALIDATION = 0x00;\nbytes1 constant MODE_MODULE_ENABLE = 0x01;\nbytes1 constant MODE_PREP = 0x02;\n\nbytes4 constant SUPPORTS_ERC7739 = 0x77390000;\nbytes4 constant SUPPORTS_ERC7739_V1 = 0x77390001;\n"},"contracts/lib/ModeLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n/// @title ModeLib\n/// @author zeroknots.eth | rhinestone.wtf\n/// To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\n/// encoding is used.\n///    Function Signature of execute function:\n///           function execute(ExecutionMode mode, bytes calldata executionCalldata) external payable;\n/// This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\n/// context.\n/// NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\n/// implement\n/// more complex execution modes may use the entire bytes32.\n///\n/// |--------------------------------------------------------------------|\n/// | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\n/// |--------------------------------------------------------------------|\n/// | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\n/// |--------------------------------------------------------------------|\n///\n/// CALLTYPE: 1 byte\n/// CallType is used to determine how the executeCalldata paramter of the execute function has to be\n/// decoded.\n/// It can be either single, batch or delegatecall. In the future different calls could be added.\n/// CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\n///\n/// EXECTYPE: 1 byte\n/// ExecType is used to determine how the account should handle the execution.\n/// It can indicate if the execution should revert on failure or continue execution.\n/// In the future more execution modes may be added.\n/// Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\n/// a batch fails, the entire batch is reverted\n///\n/// UNUSED: 4 bytes\n/// Unused bytes are reserved for future use.\n///\n/// ModeSelector: bytes4\n/// The \"optional\" mode selector can be used by account vendors, to implement custom behavior in\n/// their accounts.\n/// the way a ModeSelector is to be calculated is bytes4(keccak256(\"vendorname.featurename\"))\n/// this is to prevent collisions between different vendors, while allowing innovation and the\n/// development of new features without coordination between ERC-7579 implementing accounts\n///\n/// ModePayload: 22 bytes\n/// Mode payload is used to pass additional data to the smart account execution, this may be\n/// interpreted depending on the ModeSelector\n///\n/// ExecutionCallData: n bytes\n/// single, delegatecall or batch exec abi.encoded as bytes\n\n// Custom type for improved developer experience\ntype ExecutionMode is bytes32;\n\ntype CallType is bytes1;\n\ntype ExecType is bytes1;\n\ntype ModeSelector is bytes4;\n\ntype ModePayload is bytes22;\n\n// Default CallType\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\n// Batched CallType\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\n\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\n\n// @dev Implementing delegatecall is OPTIONAL!\n// implement delegatecall with extreme care.\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\n\n// @dev default behavior is to revert on failure\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\n// Since this is value 0x00, no additional encoding is required for simple accounts\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\n// @dev account may elect to change execution behavior. For example \"try exec\" / \"allow fail\"\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\n\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\n// Example declaration of a custom mode selector\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\"default.mode.offset\")));\n\n/// @dev ModeLib is a helper library to encode/decode ModeCodes\nlibrary ModeLib {\n    function decode(\n        ExecutionMode mode\n    ) internal pure returns (CallType _calltype, ExecType _execType, ModeSelector _modeSelector, ModePayload _modePayload) {\n        assembly {\n            _calltype := mode\n            _execType := shl(8, mode)\n            _modeSelector := shl(48, mode)\n            _modePayload := shl(80, mode)\n        }\n    }\n\n    function decodeBasic(ExecutionMode mode) internal pure returns (CallType _calltype, ExecType _execType) {\n        assembly {\n            _calltype := mode\n            _execType := shl(8, mode)\n        }\n    }\n\n    function encode(CallType callType, ExecType execType, ModeSelector mode, ModePayload payload) internal pure returns (ExecutionMode) {\n        return ExecutionMode.wrap(bytes32(abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)));\n    }\n\n    function encodeSimpleBatch() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeSimpleSingle() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeTrySingle() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_TRY, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeTryBatch() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_TRY, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeCustom(CallType callType, ExecType execType) internal pure returns (ExecutionMode mode) {\n        mode = encode(callType, execType, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function getCallType(ExecutionMode mode) internal pure returns (CallType calltype) {\n        assembly {\n            calltype := mode\n        }\n    }\n}\n\nusing { _eqModeSelector as == } for ModeSelector global;\nusing { _eqCallType as == } for CallType global;\nusing { _uneqCallType as != } for CallType global;\nusing { _eqExecType as == } for ExecType global;\n\nfunction _eqCallType(CallType a, CallType b) pure returns (bool) {\n    return CallType.unwrap(a) == CallType.unwrap(b);\n}\n\nfunction _uneqCallType(CallType a, CallType b) pure returns (bool) {\n    return CallType.unwrap(a) != CallType.unwrap(b);\n}\n\nfunction _eqExecType(ExecType a, ExecType b) pure returns (bool) {\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\n}\n\n//slither-disable-next-line dead-code\nfunction _eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\n}\n"},"contracts/lib/NonceLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.27;\n\nimport { MODE_MODULE_ENABLE, MODE_PREP, MODE_VALIDATION } from \"../types/Constants.sol\";\n\n/**\n    Nonce structure\n    [3 bytes empty][1 bytes validation mode][20 bytes validator][8 bytes nonce]\n*/\n\nlibrary NonceLib {\n    /// @dev Parses validator address out of nonce\n    /// @param nonce The nonce\n    /// @return validator\n    function getValidator(uint256 nonce) internal pure returns (address validator) {\n        assembly {\n            validator := shr(96, shl(32, nonce))\n        }\n    }\n\n    /// @dev Detects if Validaton Mode is Module Enable Mode\n    /// @param nonce The nonce\n    /// @return res boolean result, true if it is the Module Enable Mode\n    function isModuleEnableMode(uint256 nonce) internal pure returns (bool res) {\n        assembly {\n            let vmode := byte(3, nonce)\n            res := eq(shl(248, vmode), MODE_MODULE_ENABLE)\n        }\n    }\n\n    /// @dev Detects if the validator provided in the nonce is address(0)\n    /// which means the default validator is used\n    /// @param nonce The nonce\n    /// @return res boolean result, true if it is the Default Validator Mode\n    function isDefaultValidatorMode(uint256 nonce) internal pure returns (bool res) {\n        assembly {\n            res := iszero(shr(96, shl(32, nonce)))\n        }\n    }\n\n    /// @dev Detects if Validaton Mode is Prep Mode\n    /// @param nonce The nonce\n    /// @return res boolean result, true if it is the Prep Mode\n    function isPrepMode(uint256 nonce) internal pure returns (bool res) {\n        assembly {\n            let vmode := byte(3, nonce)\n            res := eq(shl(248, vmode), MODE_PREP)\n        }\n    }\n\n    /// @dev Detects if Validaton Mode is Validate Mode\n    /// @param nonce The nonce\n    /// @return res boolean result, true if it is the Validate Mode\n    function isValidateMode(uint256 nonce) internal pure returns (bool res) {\n        assembly {\n            let vmode := byte(3, nonce)\n            res := eq(shl(248, vmode), MODE_VALIDATION)\n        }\n    }\n}\n"},"node_modules/sentinellist/src/SentinelList.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Sentinel address\naddress constant SENTINEL = address(0x1);\n// Zero address\naddress constant ZERO_ADDRESS = address(0x0);\n\n/**\n * @title SentinelListLib\n * @dev Library for managing a linked list of addresses\n * @author Rhinestone\n */\nlibrary SentinelListLib {\n    // Struct to hold the linked list\n    struct SentinelList {\n        mapping(address => address) entries;\n    }\n\n    error LinkedList_AlreadyInitialized();\n    error LinkedList_InvalidPage();\n    error LinkedList_InvalidEntry(address entry);\n    error LinkedList_EntryAlreadyInList(address entry);\n\n    /**\n     * Initialize the linked list\n     *\n     * @param self The linked list\n     */\n    function init(SentinelList storage self) internal {\n        if (alreadyInitialized(self)) revert LinkedList_AlreadyInitialized();\n        self.entries[SENTINEL] = SENTINEL;\n    }\n\n    /**\n     * Check if the linked list is already initialized\n     *\n     * @param self The linked list\n     *\n     * @return bool True if the linked list is already initialized\n     */\n    function alreadyInitialized(SentinelList storage self) internal view returns (bool) {\n        return self.entries[SENTINEL] != ZERO_ADDRESS;\n    }\n\n    /**\n     * Get the next entry in the linked list\n     *\n     * @param self The linked list\n     * @param entry The current entry\n     *\n     * @return address The next entry\n     */\n    function getNext(SentinelList storage self, address entry) internal view returns (address) {\n        if (entry == ZERO_ADDRESS) {\n            revert LinkedList_InvalidEntry(entry);\n        }\n        return self.entries[entry];\n    }\n\n    /**\n     * Push a new entry to the linked list\n     *\n     * @param self The linked list\n     * @param newEntry The new entry\n     */\n    function push(SentinelList storage self, address newEntry) internal {\n        if (newEntry == ZERO_ADDRESS || newEntry == SENTINEL) {\n            revert LinkedList_InvalidEntry(newEntry);\n        }\n        if (self.entries[newEntry] != ZERO_ADDRESS) revert LinkedList_EntryAlreadyInList(newEntry);\n        self.entries[newEntry] = self.entries[SENTINEL];\n        self.entries[SENTINEL] = newEntry;\n    }\n\n    /**\n     * Safe push a new entry to the linked list\n     * @dev This ensures that the linked list is initialized and initializes it if it is not\n     *\n     * @param self The linked list\n     * @param newEntry The new entry\n     */\n    function safePush(SentinelList storage self, address newEntry) internal {\n        if (!alreadyInitialized({ self: self })) {\n            init({ self: self });\n        }\n        push({ self: self, newEntry: newEntry });\n    }\n\n    /**\n     * Pop an entry from the linked list\n     *\n     * @param self The linked list\n     * @param prevEntry The entry before the entry to pop\n     * @param popEntry The entry to pop\n     */\n    function pop(SentinelList storage self, address prevEntry, address popEntry) internal {\n        if (popEntry == ZERO_ADDRESS || popEntry == SENTINEL) {\n            revert LinkedList_InvalidEntry(prevEntry);\n        }\n        if (self.entries[prevEntry] != popEntry) revert LinkedList_InvalidEntry(popEntry);\n        self.entries[prevEntry] = self.entries[popEntry];\n        self.entries[popEntry] = ZERO_ADDRESS;\n    }\n\n    /**\n     * Pop all entries from the linked list\n     *\n     * @param self The linked list\n     */\n    function popAll(SentinelList storage self) internal {\n        address next = self.entries[SENTINEL];\n        while (next != ZERO_ADDRESS) {\n            address current = next;\n            next = self.entries[next];\n            self.entries[current] = ZERO_ADDRESS;\n        }\n    }\n\n    /**\n     * Check if the linked list contains an entry\n     *\n     * @param self The linked list\n     * @param entry The entry to check\n     *\n     * @return bool True if the linked list contains the entry\n     */\n    function contains(SentinelList storage self, address entry) internal view returns (bool) {\n        return SENTINEL != entry && self.entries[entry] != ZERO_ADDRESS;\n    }\n\n    /**\n     * Get all entries in the linked list\n     *\n     * @param self The linked list\n     * @param start The start entry\n     * @param pageSize The page size\n     *\n     * @return array All entries in the linked list\n     * @return next The next entry\n     */\n    function getEntriesPaginated(\n        SentinelList storage self,\n        address start,\n        uint256 pageSize\n    )\n        internal\n        view\n        returns (address[] memory array, address next)\n    {\n        if (start != SENTINEL && !contains(self, start)) revert LinkedList_InvalidEntry(start);\n        if (pageSize == 0) revert LinkedList_InvalidPage();\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 entryCount = 0;\n        next = self.entries[start];\n        while (next != ZERO_ADDRESS && next != SENTINEL && entryCount < pageSize) {\n            array[entryCount] = next;\n            next = self.entries[next];\n            entryCount++;\n        }\n\n        /**\n         * Because of the argument validation, we can assume that the loop will always iterate over\n         * the valid entry list values\n         *       and the `next` variable will either be an enabled entry or a sentinel address\n         * (signalling the end).\n         *\n         *       If we haven't reached the end inside the loop, we need to set the next pointer to\n         * the last element of the entry array\n         *       because the `next` variable (which is a entry by itself) acting as a pointer to the\n         * start of the next page is neither\n         *       incSENTINELrent page, nor will it be included in the next one if you pass it as a\n         * start.\n         */\n        if (next != SENTINEL && entryCount > 0) {\n            next = array[entryCount - 1];\n        }\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(array, entryCount)\n        }\n    }\n}\n"},"contracts/lib/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// keccak256(abi.encode(uint256(keccak256(\"initializable.transient.Nexus\")) - 1)) & ~bytes32(uint256(0xff));\nbytes32 constant INIT_SLOT = 0x90b772c2cb8a51aa7a8a65fc23543c6d022d5b3f8e2b92eed79fba7eef829300;\n\n/// @title Initializable\n/// @dev This library provides a way to set a transient flag on a contract to ensure that it is only initialized during the\n/// constructor execution. This is useful to prevent a contract from being initialized multiple times.\nlibrary Initializable {\n    /// @dev Thrown when an attempt to initialize an already initialized contract is made\n    error NotInitializable();\n\n    /// @dev Sets the initializable flag in the transient storage slot to true\n    function setInitializable() internal {\n        bytes32 slot = INIT_SLOT;\n        assembly {\n            tstore(slot, 0x01)\n        }\n    }\n\n    /// @dev Checks if the initializable flag is set in the transient storage slot, reverts with NotInitializable if not\n    function requireInitializable() internal view {\n        bytes32 slot = INIT_SLOT;\n        // Load the current value from the slot, revert if 0\n        assembly {\n            let isInitializable := tload(slot)\n            if iszero(isInitializable) {\n                mstore(0x0, 0xaed59595) // NotInitializable()\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"},"contracts/types/DataTypes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Execution\n/// @notice Struct to encapsulate execution data for a transaction\nstruct Execution {\n    /// @notice The target address for the transaction\n    address target;\n    /// @notice The value in wei to send with the transaction\n    uint256 value;\n    /// @notice The calldata for the transaction\n    bytes callData;\n}\n\n/// @title Emergency Uninstall\n/// @notice Struct to encapsulate emergency uninstall data for a hook\nstruct EmergencyUninstall {\n    /// @notice The address of the hook to be uninstalled\n    address hook;\n    /// @notice The hook type identifier\n    uint256 hookType;\n    /// @notice Data used to uninstall the hook\n    bytes deInitData;\n    /// @notice Nonce used to prevent replay attacks\n    uint256 nonce;\n}\n"},"contracts/lib/local/LibPREP.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport {EfficientHashLib} from \"solady/utils/EfficientHashLib.sol\";\nimport {LibBit} from \"solady/utils/LibBit.sol\";\nimport {ECDSA} from \"solady/utils/ECDSA.sol\";\nimport {LibBytes} from \"solady/utils/LibBytes.sol\";\nimport {LibEIP7702} from \"solady/accounts/LibEIP7702.sol\";\n\n/// @title LibPREP\n/// @notice A library to encapsulate the PREP (Provably Rootless EIP-7702 Proxy) workflow.\n/// See: https://blog.biconomy.io/prep-deep-dive/\nlibrary LibPREP {\n    /// @dev Validates if `digest` and `saltAndDelegation` results in `target`.\n    /// `saltAndDelegation` is `bytes32((uint256(salt) << 160) | uint160(delegation))`.\n    /// Returns a non-zero `r` for the PREP signature, if valid.\n    /// Otherwise returns 0.\n    /// `r` will be less than `2**160`, allowing for optional storage packing.\n    function rPREP(address target, bytes32 digest, bytes32 saltAndDelegation)\n        internal\n        view\n        returns (bytes32 r)\n    {\n        r = (EfficientHashLib.hash(digest, saltAndDelegation >> 160) << 96) >> 96;\n        if (!isValid(target, r, address(uint160(uint256(saltAndDelegation))))) r = 0;\n    }\n\n    /// @dev Returns if `r` and `delegation` results in `target`.\n    function isValid(address target, bytes32 r, address delegation) internal view returns (bool) {\n        bytes32 s = EfficientHashLib.hash(r);\n        bytes32 h; // `keccak256(abi.encodePacked(hex\"05\", LibRLP.p(0).p(delegation).p(0).encode()))`.\n        assembly (\"memory-safe\") {\n            mstore(0x20, 0x80)\n            mstore(0x1f, delegation)\n            mstore(0x0b, 0x05d78094)\n            h := keccak256(0x27, 0x19)\n        }\n        return LibBit.and(target != address(0), ECDSA.tryRecover(h, 27, r, s) == target);\n    }\n\n    /// @dev Returns if `target` is a PREP.\n    function isPREP(address target, bytes32 r) internal view returns (bool) {\n        address delegation = LibEIP7702.delegation(target);\n        return !LibBit.or(delegation == address(0), r == 0) && isValid(target, r, delegation);\n    }\n}\n"},"node_modules/@biconomy/composability/contracts/ComposableExecutionBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {ComposableExecutionLib} from \"./ComposableExecutionLib.sol\";\nimport {InputParam, OutputParam, ComposableExecution, Constraint, ConstraintType, InputParamFetcherType, OutputParamFetcherType} from \"./types/ComposabilityDataTypes.sol\";\nimport {IComposableExecution} from \"./interfaces/IComposableExecution.sol\";\n\nabstract contract ComposableExecutionBase is IComposableExecution {\n    using ComposableExecutionLib for InputParam[];\n    using ComposableExecutionLib for OutputParam[];\n\n    /// @dev Override it in the account and introduce additional access control or other checks\n    function executeComposable(ComposableExecution[] calldata executions) external payable virtual;\n\n    /// @dev internal function to execute the composable execution flow\n    /// First, processes the input parameters and returns the composed calldata\n    /// Then, executes the action\n    /// Then, processes the output parameters\n    function _executeComposable(ComposableExecution[] calldata executions) internal {\n        uint256 length = executions.length;\n        for (uint256 i; i < length; i++) {\n            ComposableExecution calldata execution = executions[i];\n            bytes memory composedCalldata = execution.inputParams.processInputs(execution.functionSig);\n            bytes memory returnData;\n            if (execution.to != address(0)) {\n                returnData = _executeAction(execution.to, execution.value, composedCalldata);\n            } else {\n                returnData = new bytes(0);\n            }\n            execution.outputParams.processOutputs(returnData, address(this));\n        }\n    }\n\n    /// @dev Override this in the account\n    /// using account's native execution approach\n    function _executeAction(address to, uint256 value, bytes memory data)\n        internal\n        virtual\n        returns (bytes memory returnData);\n}\n"},"node_modules/solady/src/utils/CallContextChecker.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Call context checker mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/CallContextChecker.sol)\ncontract CallContextChecker {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The call is from an unauthorized call context.\n    error UnauthorizedCallContext();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         IMMUTABLES                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev For checking if the context is a delegate call.\n    ///\n    /// Note: To enable use cases with an immutable default implementation in the bytecode,\n    /// (see: ERC6551Proxy), we don't require that the proxy address must match the\n    /// value stored in the implementation slot, which may not be initialized.\n    uint256 private immutable __self = uint256(uint160(address(this)));\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    CALL CONTEXT CHECKS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // A proxy call can be either via a `delegatecall` to an implementation,\n    // or a 7702 call on an authority that points to a delegation.\n\n    /// @dev Returns whether the current call context is on a EIP7702 authority\n    /// (i.e. externally owned account).\n    function _onEIP7702Authority() internal view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            extcodecopy(address(), 0x00, 0x00, 0x20)\n            // Note: Checking that it starts with hex\"ef01\" is the most general and futureproof.\n            // 7702 bytecode is `abi.encodePacked(hex\"ef01\", uint8(version), address(delegation))`.\n            result := eq(0xef01, shr(240, mload(0x00)))\n        }\n    }\n\n    /// @dev Returns whether the current call context is on the implementation itself.\n    function _onImplementation() internal view virtual returns (bool) {\n        return __self == uint160(address(this));\n    }\n\n    /// @dev Requires that the current call context is performed via a EIP7702 authority.\n    function _checkOnlyEIP7702Authority() internal view virtual {\n        if (!_onEIP7702Authority()) _revertUnauthorizedCallContext();\n    }\n\n    /// @dev Requires that the current call context is performed via a proxy.\n    function _checkOnlyProxy() internal view virtual {\n        if (_onImplementation()) _revertUnauthorizedCallContext();\n    }\n\n    /// @dev Requires that the current call context is NOT performed via a proxy.\n    /// This is the opposite of `checkOnlyProxy`.\n    function _checkNotDelegated() internal view virtual {\n        if (!_onImplementation()) _revertUnauthorizedCallContext();\n    }\n\n    /// @dev Requires that the current call context is performed via a EIP7702 authority.\n    modifier onlyEIP7702Authority() virtual {\n        _checkOnlyEIP7702Authority();\n        _;\n    }\n\n    /// @dev Requires that the current call context is performed via a proxy.\n    modifier onlyProxy() virtual {\n        _checkOnlyProxy();\n        _;\n    }\n\n    /// @dev Requires that the current call context is NOT performed via a proxy.\n    /// This is the opposite of `onlyProxy`.\n    modifier notDelegated() virtual {\n        _checkNotDelegated();\n        _;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PRIVATE HELPERS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    function _revertUnauthorizedCallContext() private pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x9f03a026) // `UnauthorizedCallContext()`.\n            revert(0x1c, 0x04)\n        }\n    }\n}\n"},"contracts/interfaces/IERC4337Account.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\n/// @title Nexus - IERC4337Account\n/// @notice This interface defines the necessary validation and execution methods for smart accounts under the ERC-4337 standard.\n/// @dev Provides a structure for implementing custom validation logic and execution methods that comply with ERC-4337 \"account abstraction\" specs.\n/// The validation method ensures proper signature and nonce verification before proceeding with transaction execution, critical for securing userOps.\n/// Also allows for the optional definition of an execution method to handle transactions post-validation, enhancing flexibility.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IERC4337Account {\n    /// Validate user's signature and nonce\n    /// the entryPoint will make the call to the recipient only if this validation call returns successfully.\n    /// signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n    /// This allows making a \"simulation call\" without a valid signature\n    /// Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n    ///\n    /// @dev ERC-4337-v-0.7 validation stage\n    /// @dev Must validate caller is the entryPoint.\n    ///      Must validate the signature and nonce\n    /// @param userOp              - The user operation that is about to be executed.\n    /// @param userOpHash          - Hash of the user's request data. can be used as the basis for signature.\n    /// @param missingAccountFunds - Missing funds on the account's deposit in the entrypoint.\n    ///                              This is the minimum amount to transfer to the sender(entryPoint) to be\n    ///                              able to make the call. The excess is left as a deposit in the entrypoint\n    ///                              for future calls. Can be withdrawn anytime using \"entryPoint.withdrawTo()\".\n    ///                              In case there is a paymaster in the request (or the current deposit is high\n    ///                              enough), this value will be zero.\n    /// @return validationData       - Packaged ValidationData structure. use `_packValidationData` and\n    ///                              `_unpackValidationData` to encode and decode.\n    ///                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n    ///                                 otherwise, an address of an \"authorizer\" contract.\n    ///                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \"indefinite\"\n    ///                              <6-byte> validAfter - First timestamp this operation is valid\n    ///                                                    If an account doesn't use time-range, it is enough to\n    ///                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.\n    ///                              Note that the validation code cannot use block.timestamp (or block.number) directly.\n    function validateUserOp(\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    ) external returns (uint256 validationData);\n\n    /// Account may implement this execute method.\n    /// passing this methodSig at the beginning of callData will cause the entryPoint to pass the\n    /// full UserOp (and hash)\n    /// to the account.\n    /// The account should skip the methodSig, and use the callData (and optionally, other UserOp\n    /// fields)\n    /// @dev ERC-4337-v-0.7 optional execution path\n    /// @param userOp              - The operation that was just validated.\n    /// @param userOpHash          - Hash of the user's request data.\n    function executeUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external payable;\n}\n"},"contracts/interfaces/IERC7579Account.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IAccountConfig } from \"./base/IAccountConfig.sol\";\nimport { IExecutionHelper } from \"./base/IExecutionHelper.sol\";\nimport { IModuleManager } from \"./base/IModuleManager.sol\";\n\n/// @title Nexus - IERC7579Account\n/// @notice This interface integrates the functionalities required for a modular smart account compliant with ERC-7579 and ERC-4337 standards.\n/// @dev Combines configurations and operational management for smart accounts, bridging IAccountConfig, IExecutionHelper, and IModuleManager.\n/// Interfaces designed to support the comprehensive management of smart account operations including execution management and modular configurations.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IERC7579Account is IAccountConfig, IExecutionHelper {\n    /// @dev Validates a smart account signature according to ERC-1271 standards.\n    /// This method may delegate the call to a validator module to check the signature.\n    /// @param hash The hash of the data being validated.\n    /// @param data The signed data to validate.\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\n}\n"},"contracts/interfaces/INexusEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\n/// @title Nexus - INexus Events and Errors\n/// @notice Defines common errors for the Nexus smart account management interface.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface INexusEventsAndErrors {\n    /// @notice Emitted when a PREP is initialized.\n    /// @param r The r value of the PREP signature.\n    event PREPInitialized(bytes32 r);\n\n    /// @notice Error thrown when an unsupported ModuleType is requested.\n    /// @param moduleTypeId The ID of the unsupported module type.\n    error UnsupportedModuleType(uint256 moduleTypeId);\n\n    /// @notice Error thrown on failed execution.\n    error ExecutionFailed();\n\n    /// @notice Error thrown when the Factory fails to initialize the account with posted bootstrap data.\n    error NexusInitializationFailed();\n\n    /// @notice Error thrown when a zero address is provided as the Entry Point address.\n    error EntryPointCanNotBeZero();\n\n    /// @notice Error thrown when the provided implementation address is invalid.\n    error InvalidImplementationAddress();\n\n    /// @notice Error thrown when the provided implementation address is not a contract.\n    error ImplementationIsNotAContract();\n\n    /// @notice Error thrown when an inner call fails.\n    error InnerCallFailed();\n\n    /// @notice Error thrown when attempted to emergency-uninstall a hook\n    error EmergencyTimeLockNotExpired();\n\n    /// @notice Error thrown when attempted to upgrade an ERC7702 account via UUPS proxy upgrade mechanism\n    error ERC7702AccountCannotBeUpgradedThisWay();\n\n    /// @notice Error thrown when the provided initData is invalid.\n    error InvalidInitData();\n\n    /// @notice Error thrown when the provided authHash and erc7702AuthSignature are invalid.\n    error InvalidPREP();\n\n    /// @notice Error thrown when the account is already initialized.\n    error AccountAlreadyInitialized();\n\n    /// @notice Error thrown when the account is not initialized but expected to be.\n    error AccountNotInitialized();\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./PackedUserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n    /***\n     * An event emitted after each successful request.\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\n     * @param sender        - The account that generates this request.\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\n     * @param nonce         - The nonce value from the request.\n     * @param success       - True if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\n     *                        validation and execution).\n     */\n    event UserOperationEvent(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address indexed paymaster,\n        uint256 nonce,\n        bool success,\n        uint256 actualGasCost,\n        uint256 actualGasUsed\n    );\n\n    /**\n     * Account \"sender\" was deployed.\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender     - The account that is deployed\n     * @param factory    - The factory used to deploy this account (in the initCode)\n     * @param paymaster  - The paymaster used by this UserOp\n     */\n    event AccountDeployed(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address factory,\n        address paymaster\n    );\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event PostOpRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     */\n    event UserOperationPrefundTooLow(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce\n    );\n\n    /**\n     * An event emitted by handleOps(), before starting the execution loop.\n     * Any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * A custom revert error of handleOps, to identify the offending op.\n     * Should be caught in off-chain handleOps simulation and not happen on-chain.\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. The string starts with a unique code \"AAmn\",\n     *                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *                  so a failure can be attributed to the correct entity.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * A custom revert error of handleOps, to report a revert by account or paymaster.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\n     * @param inner   - data from inner cought revert reason\n     * @dev note that inner is truncated to 2048 bytes\n     */\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\n\n    error PostOpReverted(bytes returnData);\n\n    /**\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\n     * @param aggregator The aggregator that failed to verify the signature\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    // Return value of getSenderAddress.\n    error SenderAddressResult(address sender);\n\n    // UserOps handled, per aggregator.\n    struct UserOpsPerAggregator {\n        PackedUserOperation[] userOps;\n        // Aggregator address\n        IAggregator aggregator;\n        // Aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperations.\n     * No signature aggregator is used.\n     * If any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops         - The operations to execute.\n     * @param beneficiary - The address to receive the fees.\n     */\n    function handleOps(\n        PackedUserOperation[] calldata ops,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\n     * @param beneficiary      - The address to receive the fees.\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Generate a request Id - unique identifier for this request.\n     * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     * @param userOp - The user operation to generate the request ID for.\n     * @return hash the hash of this UserOperation\n     */\n    function getUserOpHash(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes32);\n\n    /**\n     * Gas and return values during simulation.\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\n     * @param prefund          - The required prefund for this operation\n     * @param accountValidationData   - returned validationData from account.\n     * @param paymasterValidationData - return validationData from paymaster.\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        uint256 accountValidationData;\n        uint256 paymasterValidationData;\n        bytes paymasterContext;\n    }\n\n    /**\n     * Returned aggregated signature info:\n     * The aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * This method always revert, and returns the address in SenderAddressResult error\n     * @param initCode - The constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n    error DelegateAndRevert(bool success, bytes ret);\n\n    /**\n     * Helper method for dry-run testing.\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\n     *  actual EntryPoint code is less convenient.\n     * @param target a target contract to make a delegatecall from entrypoint\n     * @param data data to pass to target in a delegatecall\n     */\n    function delegateAndRevert(address target, bytes calldata data) external;\n}\n"},"contracts/interfaces/base/IBaseAccount.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IBaseAccountEventsAndErrors } from \"./IBaseAccountEventsAndErrors.sol\";\n\n/// @title Nexus - IBaseAccount\n/// @notice Interface for the BaseAccount functionalities compliant with ERC-7579 and ERC-4337.\n/// @dev Interface for organizing the base functionalities using the Nexus suite.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IBaseAccount is IBaseAccountEventsAndErrors {\n    /// @notice Adds deposit to the EntryPoint to fund transactions.\n    function addDeposit() external payable;\n\n    /// @notice Withdraws ETH from the EntryPoint to a specified address.\n    /// @param to The address to receive the withdrawn funds.\n    /// @param amount The amount to withdraw.\n    function withdrawDepositTo(address to, uint256 amount) external payable;\n\n    /// @notice Gets the nonce for a particular key.\n    /// @param key The nonce key.\n    /// @return The nonce associated with the key.\n    function nonce(uint192 key) external view returns (uint256);\n\n    /// @notice Returns the current deposit balance of this account on the EntryPoint.\n    /// @return The current balance held at the EntryPoint.\n    function getDeposit() external view returns (uint256);\n\n    /// @notice Retrieves the address of the EntryPoint contract, currently using version 0.7.\n    /// @return The address of the EntryPoint contract.\n    function entryPoint() external view returns (address);\n}\n"},"contracts/base/Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IStorage } from \"../interfaces/base/IStorage.sol\";\n\n/// @title Nexus - Storage\n/// @notice Manages isolated storage spaces for Modular Smart Account in compliance with ERC-7201 standard to ensure collision-resistant storage.\n/// @dev Implements the ERC-7201 namespaced storage pattern to maintain secure and isolated storage sections for different states within Nexus suite.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract Storage is IStorage {\n    /// @custom:storage-location erc7201:biconomy.storage.Nexus\n    /// ERC-7201 namespaced via `keccak256(abi.encode(uint256(keccak256(bytes(\"biconomy.storage.Nexus\"))) - 1)) & ~bytes32(uint256(0xff));`\n    bytes32 private constant _STORAGE_LOCATION = 0x0bb70095b32b9671358306b0339b4c06e7cbd8cb82505941fba30d1eb5b82f00;\n\n    /// @dev Utilizes ERC-7201's namespaced storage pattern for isolated storage access. This method computes\n    /// the storage slot based on a predetermined location, ensuring collision-resistant storage for contract states.\n    /// @custom:storage-location ERC-7201 formula applied to \"biconomy.storage.Nexus\", facilitating unique\n    /// namespace identification and storage segregation, as detailed in the specification.\n    /// @return $ The proxy to the `AccountStorage` struct, providing a reference to the namespaced storage slot.\n    function _getAccountStorage() internal pure returns (AccountStorage storage $) {\n        assembly {\n            $.slot := _STORAGE_LOCATION\n        }\n    }\n}\n"},"contracts/interfaces/modules/IHook.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IModule } from \"./IModule.sol\";\n\n/// @title Hook Management Interface\n/// @notice Provides methods for pre-checks and post-checks of transactions to ensure conditions and state consistency.\n/// @dev Defines two critical lifecycle hooks in the transaction process: `preCheck` and `postCheck`.\n/// These methods facilitate validating conditions prior to execution and verifying state changes afterwards, respectively.\ninterface IHook is IModule {\n    /// @notice Performs checks before a transaction is executed, potentially modifying the transaction context.\n    /// @dev This method is called before the execution of a transaction to validate and possibly adjust execution context.\n    /// @param msgSender The original sender of the transaction.\n    /// @param msgValue The amount of wei sent with the call.\n    /// @param msgData The calldata of the transaction.\n    /// @return hookData Data that may be used or modified throughout the transaction lifecycle, passed to `postCheck`.\n    function preCheck(address msgSender, uint256 msgValue, bytes calldata msgData) external returns (bytes memory hookData);\n\n    /// @notice Performs checks after a transaction is executed to ensure state consistency and log results.\n    /// @dev This method is called after the execution of a transaction to verify and react to the execution outcome.\n    /// @param hookData Data returned from `preCheck`, containing execution context or modifications.\n    function postCheck(bytes calldata hookData) external;\n}\n"},"contracts/interfaces/modules/IModule.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Nexus - ERC-7579 Module Base Interface\n/// @notice Interface for module management in smart accounts, complying with ERC-7579 specifications.\n/// @dev Defines the lifecycle hooks and checks for modules within the smart account architecture.\n/// This interface includes methods for installing, uninstalling, and verifying module types and initialization status.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IModule {\n    /// @notice Installs the module with necessary initialization data.\n    /// @dev Reverts if the module is already initialized.\n    /// @param data Arbitrary data required for initializing the module during `onInstall`.\n    function onInstall(bytes calldata data) external;\n\n    /// @notice Uninstalls the module and allows for cleanup via arbitrary data.\n    /// @dev Reverts if any issues occur that prevent clean uninstallation.\n    /// @param data Arbitrary data required for deinitializing the module during `onUninstall`.\n    function onUninstall(bytes calldata data) external;\n\n    /// @notice Determines if the module matches a specific module type.\n    /// @dev Should return true if the module corresponds to the type ID, false otherwise.\n    /// @param moduleTypeId Numeric ID of the module type as per ERC-7579 specifications.\n    /// @return True if the module is of the specified type, false otherwise.\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\n\n    /// @notice Checks if the module has been initialized for a specific smart account.\n    /// @dev Returns true if initialized, false otherwise.\n    /// @param smartAccount Address of the smart account to check for initialization status.\n    /// @return True if the module is initialized for the given smart account, false otherwise.\n    function isInitialized(address smartAccount) external view returns (bool);\n}\n"},"contracts/interfaces/modules/IPreValidationHook.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\nimport { IModule } from \"./IModule.sol\";\n\n/// @title Nexus - IPreValidationHookERC1271 Interface\n/// @notice Defines the interface for ERC-1271 pre-validation hooks\ninterface IPreValidationHookERC1271 is IModule {\n    /// @notice Performs pre-validation checks for isValidSignature\n    /// @dev This method is called before the validation of a signature on a validator within isValidSignature\n    /// @param sender The original sender of the request\n    /// @param hash The hash of signed data\n    /// @param data The signature data to validate\n    /// @return hookHash The hash after applying the pre-validation hook\n    /// @return hookSignature The signature after applying the pre-validation hook\n    function preValidationHookERC1271(address sender, bytes32 hash, bytes calldata data) external view returns (bytes32 hookHash, bytes memory hookSignature);\n}\n\n/// @title Nexus - IPreValidationHookERC4337 Interface\n/// @notice Defines the interface for ERC-4337 pre-validation hooks\ninterface IPreValidationHookERC4337 is IModule {\n    /// @notice Performs pre-validation checks for user operations\n    /// @dev This method is called before the validation of a user operation\n    /// @param userOp The user operation to be validated\n    /// @param missingAccountFunds The amount of funds missing in the account\n    /// @param userOpHash The hash of the user operation data\n    /// @return hookHash The hash after applying the pre-validation hook\n    /// @return hookSignature The signature after applying the pre-validation hook\n    function preValidationHookERC4337(\n        PackedUserOperation calldata userOp,\n        uint256 missingAccountFunds,\n        bytes32 userOpHash\n    )\n        external\n        returns (bytes32 hookHash, bytes memory hookSignature);\n}\n"},"contracts/interfaces/modules/IExecutor.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IModule } from \"./IModule.sol\";\n\n/// @title Nexus - IExecutor Interface\n/// @notice Defines the interface for Executor modules within the Nexus Smart Account framework, compliant with the ERC-7579 standard.\n/// @dev Extends IModule to include functionalities specific to execution modules.\n/// This interface is future-proof, allowing for expansion and integration of advanced features in subsequent versions.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IExecutor is IModule {\n    // Future methods for execution management will be defined here to accommodate evolving requirements.\n}\n"},"contracts/interfaces/modules/IFallback.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IModule } from \"./IModule.sol\";\n\n/// @title Nexus - IFallback Interface\n/// @notice Defines the interface for Fallback modules within the Nexus Smart Account framework, compliant with the ERC-7579 standard.\n/// @dev Extends IModule to include functionalities specific to fallback modules.\n/// This interface is future-proof, allowing for expansion and integration of advanced features in subsequent versions.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IFallback is IModule {\n    // Future methods for fallback management will be defined here to accommodate evolving blockchain technologies.\n}\n"},"contracts/lib/local/LocalCallDataParserLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.27;\n\nlibrary LocalCallDataParserLib {\n    /// @dev Parses the `userOp.signature` to extract the module type, module initialization data,\n    ///      enable mode signature, and user operation signature. The `userOp.signature` must be\n    ///      encoded in a specific way to be parsed correctly.\n    /// @param packedData The packed signature data, typically coming from `userOp.signature`.\n    /// @return module The address of the module.\n    /// @return moduleType The type of module as a `uint256`.\n    /// @return moduleInitData Initialization data specific to the module.\n    /// @return enableModeSignature Signature used to enable the module mode.\n    /// @return userOpSignature The remaining user operation signature data.\n    function parseEnableModeData(\n        bytes calldata packedData\n    )\n        internal\n        pure\n        returns (\n            address module,\n            uint256 moduleType,\n            bytes calldata moduleInitData,\n            bytes calldata enableModeSignature,\n            bytes calldata userOpSignature\n        )\n    {\n        uint256 p;\n        assembly (\"memory-safe\") {\n            p := packedData.offset\n            module := shr(96, calldataload(p))\n\n            p := add(p, 0x14)\n            moduleType := calldataload(p)\n\n            moduleInitData.length := shr(224, calldataload(add(p, 0x20)))\n            moduleInitData.offset := add(p, 0x24)\n            p := add(moduleInitData.offset, moduleInitData.length)\n\n            enableModeSignature.length := shr(224, calldataload(p))\n            enableModeSignature.offset := add(p, 0x04)\n            p := sub(add(enableModeSignature.offset, enableModeSignature.length), packedData.offset)\n        }\n        userOpSignature = packedData[p:];\n    }\n\n    /// @dev Parses the data to obtain types and initdata's for Multi Type module install mode\n    /// @param initData Multi Type module init data, abi.encoded\n    function parseMultiTypeInitData(bytes calldata initData) internal pure returns (uint256[] calldata types, bytes[] calldata initDatas) {\n        // equivalent of:\n        // (types, initDatas) = abi.decode(initData,(uint[],bytes[]))\n        assembly (\"memory-safe\") {\n            let offset := initData.offset\n            let baseOffset := offset\n            let dataPointer := add(baseOffset, calldataload(offset))\n\n            types.offset := add(dataPointer, 32)\n            types.length := calldataload(dataPointer)\n            offset := add(offset, 32)\n\n            dataPointer := add(baseOffset, calldataload(offset))\n            initDatas.offset := add(dataPointer, 32)\n            initDatas.length := calldataload(dataPointer)\n        }\n    }\n}\n"},"contracts/interfaces/base/IModuleManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IModuleManagerEventsAndErrors } from \"./IModuleManagerEventsAndErrors.sol\";\n\n/// @title Nexus - IModuleManager\n/// @notice Interface for managing modules within Smart Accounts, providing methods for installation and removal of modules.\n/// @dev Extends the IModuleManagerEventsAndErrors interface to include event and error definitions.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IModuleManager is IModuleManagerEventsAndErrors {\n    /// @notice Installs a Module of a specific type onto the smart account.\n    /// @param moduleTypeId The identifier for the module type.\n    /// @param module The address of the module to be installed.\n    /// @param initData Initialization data for configuring the module upon installation.\n    function installModule(uint256 moduleTypeId, address module, bytes calldata initData) external payable;\n\n    /// @notice Uninstalls a Module of a specific type from the smart account.\n    /// @param moduleTypeId The identifier for the module type being uninstalled.\n    /// @param module The address of the module to uninstall.\n    /// @param deInitData De-initialization data for configuring the module upon uninstallation.\n    function uninstallModule(uint256 moduleTypeId, address module, bytes calldata deInitData) external payable;\n\n    /// @notice Checks if a specific module is installed on the smart account.\n    /// @param moduleTypeId The module type identifier to check.\n    /// @param module The address of the module.\n    /// @param additionalContext Additional information that may be required to verify the module's installation.\n    /// @return installed True if the module is installed, false otherwise.\n    function isModuleInstalled(uint256 moduleTypeId, address module, bytes calldata additionalContext) external view returns (bool installed);\n}\n"},"node_modules/solady/src/utils/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Contract for EIP-712 typed structured data hashing and signing.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/EIP712.sol)\n/// @author Modified from Solbase (https://github.com/Sol-DAO/solbase/blob/main/src/utils/EIP712.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol)\n///\n/// @dev Note, this implementation:\n/// - Uses `address(this)` for the `verifyingContract` field.\n/// - Does NOT use the optional EIP-712 salt.\n/// - Does NOT use any EIP-712 extensions.\n/// This is for simplicity and to save gas.\n/// If you need to customize, please fork / modify accordingly.\nabstract contract EIP712 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  CONSTANTS AND IMMUTABLES                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev `keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")`.\n    bytes32 internal constant _DOMAIN_TYPEHASH =\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev `keccak256(\"EIP712Domain(string name,string version,address verifyingContract)\")`.\n    /// This is only used in `_hashTypedDataSansChainId`.\n    bytes32 internal constant _DOMAIN_TYPEHASH_SANS_CHAIN_ID =\n        0x91ab3d17e3a50a9d89e63fd30b92be7f5336b03b287bb946787a83a9d62a2766;\n\n    uint256 private immutable _cachedThis;\n    uint256 private immutable _cachedChainId;\n    bytes32 private immutable _cachedNameHash;\n    bytes32 private immutable _cachedVersionHash;\n    bytes32 private immutable _cachedDomainSeparator;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CONSTRUCTOR                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Cache the hashes for cheaper runtime gas costs.\n    /// In the case of upgradeable contracts (i.e. proxies),\n    /// or if the chain id changes due to a hard fork,\n    /// the domain separator will be seamlessly calculated on-the-fly.\n    constructor() {\n        _cachedThis = uint256(uint160(address(this)));\n        _cachedChainId = block.chainid;\n\n        string memory name;\n        string memory version;\n        if (!_domainNameAndVersionMayChange()) (name, version) = _domainNameAndVersion();\n        bytes32 nameHash = _domainNameAndVersionMayChange() ? bytes32(0) : keccak256(bytes(name));\n        bytes32 versionHash =\n            _domainNameAndVersionMayChange() ? bytes32(0) : keccak256(bytes(version));\n        _cachedNameHash = nameHash;\n        _cachedVersionHash = versionHash;\n\n        bytes32 separator;\n        if (!_domainNameAndVersionMayChange()) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let m := mload(0x40) // Load the free memory pointer.\n                mstore(m, _DOMAIN_TYPEHASH)\n                mstore(add(m, 0x20), nameHash)\n                mstore(add(m, 0x40), versionHash)\n                mstore(add(m, 0x60), chainid())\n                mstore(add(m, 0x80), address())\n                separator := keccak256(m, 0xa0)\n            }\n        }\n        _cachedDomainSeparator = separator;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   FUNCTIONS TO OVERRIDE                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Please override this function to return the domain name and version.\n    /// ```\n    ///     function _domainNameAndVersion()\n    ///         internal\n    ///         pure\n    ///         virtual\n    ///         returns (string memory name, string memory version)\n    ///     {\n    ///         name = \"Solady\";\n    ///         version = \"1\";\n    ///     }\n    /// ```\n    ///\n    /// Note: If the returned result may change after the contract has been deployed,\n    /// you must override `_domainNameAndVersionMayChange()` to return true.\n    function _domainNameAndVersion()\n        internal\n        view\n        virtual\n        returns (string memory name, string memory version);\n\n    /// @dev Returns if `_domainNameAndVersion()` may change\n    /// after the contract has been deployed (i.e. after the constructor).\n    /// Default: false.\n    function _domainNameAndVersionMayChange() internal pure virtual returns (bool result) {}\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     HASHING OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the EIP-712 domain separator.\n    function _domainSeparator() internal view virtual returns (bytes32 separator) {\n        if (_domainNameAndVersionMayChange()) {\n            separator = _buildDomainSeparator();\n        } else {\n            separator = _cachedDomainSeparator;\n            if (_cachedDomainSeparatorInvalidated()) separator = _buildDomainSeparator();\n        }\n    }\n\n    /// @dev Returns the hash of the fully encoded EIP-712 message for this domain,\n    /// given `structHash`, as defined in\n    /// https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct.\n    ///\n    /// The hash can be used together with {ECDSA-recover} to obtain the signer of a message:\n    /// ```\n    ///     bytes32 digest = _hashTypedData(keccak256(abi.encode(\n    ///         keccak256(\"Mail(address to,string contents)\"),\n    ///         mailTo,\n    ///         keccak256(bytes(mailContents))\n    ///     )));\n    ///     address signer = ECDSA.recover(digest, signature);\n    /// ```\n    function _hashTypedData(bytes32 structHash) internal view virtual returns (bytes32 digest) {\n        // We will use `digest` to store the domain separator to save a bit of gas.\n        if (_domainNameAndVersionMayChange()) {\n            digest = _buildDomainSeparator();\n        } else {\n            digest = _cachedDomainSeparator;\n            if (_cachedDomainSeparatorInvalidated()) digest = _buildDomainSeparator();\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the digest.\n            mstore(0x00, 0x1901000000000000) // Store \"\\x19\\x01\".\n            mstore(0x1a, digest) // Store the domain separator.\n            mstore(0x3a, structHash) // Store the struct hash.\n            digest := keccak256(0x18, 0x42)\n            // Restore the part of the free memory slot that was overwritten.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Variant of `_hashTypedData` that excludes the chain ID.\n    /// We expect that most contracts will use `_hashTypedData` as the main hash,\n    /// and `_hashTypedDataSansChainId` only occasionally for cross-chain workflows.\n    /// Thus this is optimized for smaller bytecode size over runtime gas.\n    function _hashTypedDataSansChainId(bytes32 structHash)\n        internal\n        view\n        virtual\n        returns (bytes32 digest)\n    {\n        (string memory name, string memory version) = _domainNameAndVersion();\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Load the free memory pointer.\n            mstore(0x00, _DOMAIN_TYPEHASH_SANS_CHAIN_ID)\n            mstore(0x20, keccak256(add(name, 0x20), mload(name)))\n            mstore(0x40, keccak256(add(version, 0x20), mload(version)))\n            mstore(0x60, address())\n            // Compute the digest.\n            mstore(0x20, keccak256(0x00, 0x80)) // Store the domain separator.\n            mstore(0x00, 0x1901) // Store \"\\x19\\x01\".\n            mstore(0x40, structHash) // Store the struct hash.\n            digest := keccak256(0x1e, 0x42)\n            mstore(0x40, m) // Restore the free memory pointer.\n            mstore(0x60, 0) // Restore the zero pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    EIP-5267 OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev See: https://eips.ethereum.org/EIPS/eip-5267\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        fields = hex\"0f\"; // `0b01111`.\n        (name, version) = _domainNameAndVersion();\n        chainId = block.chainid;\n        verifyingContract = address(this);\n        salt = salt; // `bytes32(0)`.\n        extensions = extensions; // `new uint256[](0)`.\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PRIVATE HELPERS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the EIP-712 domain separator.\n    function _buildDomainSeparator() private view returns (bytes32 separator) {\n        // We will use `separator` to store the name hash to save a bit of gas.\n        bytes32 versionHash;\n        if (_domainNameAndVersionMayChange()) {\n            (string memory name, string memory version) = _domainNameAndVersion();\n            separator = keccak256(bytes(name));\n            versionHash = keccak256(bytes(version));\n        } else {\n            separator = _cachedNameHash;\n            versionHash = _cachedVersionHash;\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Load the free memory pointer.\n            mstore(m, _DOMAIN_TYPEHASH)\n            mstore(add(m, 0x20), separator) // Name hash.\n            mstore(add(m, 0x40), versionHash)\n            mstore(add(m, 0x60), chainid())\n            mstore(add(m, 0x80), address())\n            separator := keccak256(m, 0xa0)\n        }\n    }\n\n    /// @dev Returns if the cached domain separator has been invalidated.\n    function _cachedDomainSeparatorInvalidated() private view returns (bool result) {\n        uint256 cachedChainId = _cachedChainId;\n        uint256 cachedThis = _cachedThis;\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := iszero(and(eq(chainid(), cachedChainId), eq(address(), cachedThis)))\n        }\n    }\n}\n"},"node_modules/excessively-safe-call/src/ExcessivelySafeCall.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n        0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _value The value in wei to send to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint256 _value,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                _value, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n        internal\n        pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n            // load the first word of\n            let _word := mload(add(_buf, 0x20))\n            // mask out the top 4 bytes\n            // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"},"contracts/base/RegistryAdapter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { IERC7484 } from \"../interfaces/IERC7484.sol\";\nimport { Storage } from \"./Storage.sol\";\n\n/// @title RegistryAdapter\n/// @notice This contract provides an interface for interacting with an ERC-7484 compliant registry.\n/// @dev The registry feature is opt-in, allowing the smart account owner to select and trust specific attesters.\nabstract contract RegistryAdapter is Storage {\n\n    /// @notice Emitted when a new ERC-7484 registry is configured for the account.\n    /// @param registry The configured registry contract.\n    event ERC7484RegistryConfigured(IERC7484 indexed registry);\n\n    /// @notice Modifier to check if a module meets the required attestations in the registry.\n    /// @param module The module to check.\n    /// @param moduleType The type of the module to verify in the registry.\n    modifier withRegistry(address module, uint256 moduleType) {\n        _checkRegistry(module, moduleType);\n        _;\n    }\n\n    /// @notice Returns the configured ERC-7484 registry.\n    /// @return The configured registry contract.\n    function getRegistry() external view returns (IERC7484) {\n        return IERC7484(_getAccountStorage().registry);\n    }\n\n    /// @notice Configures the ERC-7484 registry and sets trusted attesters.\n    /// @param newRegistry The new registry contract to use.\n    /// @param attesters The list of attesters to trust.\n    /// @param threshold The number of attestations required.\n    function _configureRegistry(IERC7484 newRegistry, address[] memory attesters, uint8 threshold) internal {\n        _getAccountStorage().registry = address(newRegistry);\n        if (address(newRegistry) != address(0)) {\n            newRegistry.trustAttesters(threshold, attesters);\n        }\n        emit ERC7484RegistryConfigured(newRegistry);\n    }\n\n    /// @notice Checks the registry to ensure sufficient valid attestations for a module.\n    /// @param module The module to check.\n    /// @param moduleType The type of the module to verify in the registry.\n    /// @dev Reverts if the required attestations are not met.\n    function _checkRegistry(address module, uint256 moduleType) internal view {\n        IERC7484 moduleRegistry = IERC7484(_getAccountStorage().registry);\n        if (address(moduleRegistry) != address(0)) {\n            // This will revert if attestations or the threshold are not met.\n            moduleRegistry.check(module, moduleType);\n        }\n    }\n}\n"},"node_modules/solady/src/utils/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Gas optimized ECDSA wrapper.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\n///\n/// @dev Note:\n/// - The recovery functions use the ecrecover precompile (0x1).\n/// - As of Solady version 0.0.68, the `recover` variants will revert upon recovery failure.\n///   This is for more safety by default.\n///   Use the `tryRecover` variants if you need to get the zero address back\n///   upon recovery failure instead.\n/// - As of Solady version 0.0.134, all `bytes signature` variants accept both\n///   regular 65-byte `(r, s, v)` and EIP-2098 `(r, vs)` short form signatures.\n///   See: https://eips.ethereum.org/EIPS/eip-2098\n///   This is for calldata efficiency on smart accounts prevalent on L2s.\n///\n/// WARNING! Do NOT directly use signatures as unique identifiers:\n/// - The recovery operations do NOT check if a signature is non-malleable.\n/// - Use a nonce in the digest to prevent replay attacks on the same contract.\n/// - Use EIP-712 for the digest to prevent replay attacks across different chains and contracts.\n///   EIP-712 also enables readable signing of typed data for better user safety.\n/// - If you need a unique hash from a signature, please use the `canonicalHash` functions.\nlibrary ECDSA {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The order of the secp256k1 elliptic curve.\n    uint256 internal constant N = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\n\n    /// @dev `N/2 + 1`. Used for checking the malleability of the signature.\n    uint256 private constant _HALF_N_PLUS_1 =\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The signature is invalid.\n    error InvalidSignature();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    RECOVERY OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function recover(bytes32 hash, bytes memory signature) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            } {\n                switch mload(signature)\n                case 64 {\n                    let vs := mload(add(signature, 0x40))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, mload(add(signature, 0x60)))) // `v`.\n                    mstore(0x60, mload(add(signature, 0x40))) // `s`.\n                }\n                default { continue }\n                mstore(0x00, hash)\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\n                result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                mstore(0x40, m) // Restore the free memory pointer.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                if returndatasize() { break }\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function recoverCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            } {\n                switch signature.length\n                case 64 {\n                    let vs := calldataload(add(signature.offset, 0x20))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x40, calldataload(signature.offset)) // `r`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40)))) // `v`.\n                    calldatacopy(0x40, signature.offset, 0x40) // Copy `r` and `s`.\n                }\n                default { continue }\n                mstore(0x00, hash)\n                result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                mstore(0x40, m) // Restore the free memory pointer.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                if returndatasize() { break }\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, add(shr(255, vs), 27)) // `v`.\n            mstore(0x40, r)\n            mstore(0x60, shr(1, shl(1, vs))) // `s`.\n            result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, and(v, 0xff))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            result := mload(staticcall(gas(), 1, 0x00, 0x80, 0x01, 0x20))\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            if iszero(returndatasize()) {\n                mstore(0x00, 0x8baa579f) // `InvalidSignature()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x60, 0) // Restore the zero slot.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   TRY-RECOVER OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // WARNING!\n    // These functions will NOT revert upon recovery failure.\n    // Instead, they will return the zero address upon recovery failure.\n    // It is critical that the returned address is NEVER compared against\n    // a zero address (e.g. an uninitialized address variable).\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function tryRecover(bytes32 hash, bytes memory signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {} {\n                switch mload(signature)\n                case 64 {\n                    let vs := mload(add(signature, 0x40))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, mload(add(signature, 0x60)))) // `v`.\n                    mstore(0x60, mload(add(signature, 0x40))) // `s`.\n                }\n                default { break }\n                mstore(0x00, hash)\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\n                pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(xor(0x60, returndatasize()))\n                mstore(0x40, m) // Restore the free memory pointer.\n                break\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`, and the `signature`.\n    function tryRecoverCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let m := mload(0x40) } 1 {} {\n                switch signature.length\n                case 64 {\n                    let vs := calldataload(add(signature.offset, 0x20))\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\n                    mstore(0x40, calldataload(signature.offset)) // `r`.\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\n                }\n                case 65 {\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40)))) // `v`.\n                    calldatacopy(0x40, signature.offset, 0x40) // Copy `r` and `s`.\n                }\n                default { break }\n                mstore(0x00, hash)\n                pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n                mstore(0x60, 0) // Restore the zero slot.\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(xor(0x60, returndatasize()))\n                mstore(0x40, m) // Restore the free memory pointer.\n                break\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, add(shr(255, vs), 27)) // `v`.\n            mstore(0x40, r)\n            mstore(0x60, shr(1, shl(1, vs))) // `s`.\n            pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n            mstore(0x60, 0) // Restore the zero slot.\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            result := mload(xor(0x60, returndatasize()))\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n        internal\n        view\n        returns (address result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            mstore(0x00, hash)\n            mstore(0x20, and(v, 0xff))\n            mstore(0x40, r)\n            mstore(0x60, s)\n            pop(staticcall(gas(), 1, 0x00, 0x80, 0x40, 0x20))\n            mstore(0x60, 0) // Restore the zero slot.\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n            result := mload(xor(0x60, returndatasize()))\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     HASHING OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, hash) // Store into scratch space for keccak256.\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\") // 28 bytes.\n            result := keccak256(0x04, 0x3c) // `32 * 2 - (32 - 28) = 60 = 0x3c`.\n        }\n    }\n\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    /// Note: Supports lengths of `s` up to 999999 bytes.\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let sLength := mload(s)\n            let o := 0x20\n            mstore(o, \"\\x19Ethereum Signed Message:\\n\") // 26 bytes, zero-right-padded.\n            mstore(0x00, 0x00)\n            // Convert the `s.length` to ASCII decimal representation: `base10(s.length)`.\n            for { let temp := sLength } 1 {} {\n                o := sub(o, 1)\n                mstore8(o, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n                if iszero(temp) { break }\n            }\n            let n := sub(0x3a, o) // Header length: `26 + 32 - o`.\n            // Throw an out-of-offset error (consumes all gas) if the header exceeds 32 bytes.\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0x20))\n            mstore(s, or(mload(0x00), mload(n))) // Temporarily store the header.\n            result := keccak256(add(s, sub(0x20, n)), add(n, sLength))\n            mstore(s, sLength) // Restore the length.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  CANONICAL HASH FUNCTIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // The following functions returns the hash of the signature in it's canonicalized format,\n    // which is the 65-byte `abi.encodePacked(r, s, uint8(v))`, where `v` is either 27 or 28.\n    // If `s` is greater than `N / 2` then it will be converted to `N - s`\n    // and the `v` value will be flipped.\n    // If the signature has an invalid length, or if `v` is invalid,\n    // a uniquely corrupt hash will be returned.\n    // These functions are useful for \"poor-mans-VRF\".\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(bytes memory signature) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(signature)\n            for {} 1 {} {\n                mstore(0x00, mload(add(signature, 0x20))) // `r`.\n                let s := mload(add(signature, 0x40))\n                let v := mload(add(signature, 0x41))\n                if eq(l, 64) {\n                    v := add(shr(255, s), 27)\n                    s := shr(1, shl(1, s))\n                }\n                if iszero(lt(s, _HALF_N_PLUS_1)) {\n                    v := xor(v, 7)\n                    s := sub(N, s)\n                }\n                mstore(0x21, v)\n                mstore(0x20, s)\n                result := keccak256(0x00, 0x41)\n                mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n                break\n            }\n\n            // If the length is neither 64 nor 65, return a uniquely corrupted hash.\n            if iszero(lt(sub(l, 64), 2)) {\n                // `bytes4(keccak256(\"InvalidSignatureLength\"))`.\n                result := xor(keccak256(add(signature, 0x20), l), 0xd62f1ab2)\n            }\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHashCalldata(bytes calldata signature)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                mstore(0x00, calldataload(signature.offset)) // `r`.\n                let s := calldataload(add(signature.offset, 0x20))\n                let v := calldataload(add(signature.offset, 0x21))\n                if eq(signature.length, 64) {\n                    v := add(shr(255, s), 27)\n                    s := shr(1, shl(1, s))\n                }\n                if iszero(lt(s, _HALF_N_PLUS_1)) {\n                    v := xor(v, 7)\n                    s := sub(N, s)\n                }\n                mstore(0x21, v)\n                mstore(0x20, s)\n                result := keccak256(0x00, 0x41)\n                mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n                break\n            }\n            // If the length is neither 64 nor 65, return a uniquely corrupted hash.\n            if iszero(lt(sub(signature.length, 64), 2)) {\n                calldatacopy(mload(0x40), signature.offset, signature.length)\n                // `bytes4(keccak256(\"InvalidSignatureLength\"))`.\n                result := xor(keccak256(mload(0x40), signature.length), 0xd62f1ab2)\n            }\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(bytes32 r, bytes32 vs) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, r) // `r`.\n            let v := add(shr(255, vs), 27)\n            let s := shr(1, shl(1, vs))\n            mstore(0x21, v)\n            mstore(0x20, s)\n            result := keccak256(0x00, 0x41)\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /// @dev Returns the canonical hash of `signature`.\n    function canonicalHash(uint8 v, bytes32 r, bytes32 s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, r) // `r`.\n            if iszero(lt(s, _HALF_N_PLUS_1)) {\n                v := xor(v, 7)\n                s := sub(N, s)\n            }\n            mstore(0x21, v)\n            mstore(0x20, s)\n            result := keccak256(0x00, 0x41)\n            mstore(0x21, 0) // Restore the overwritten part of the free memory pointer.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   EMPTY CALLDATA HELPERS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns an empty calldata bytes.\n    function emptySignature() internal pure returns (bytes calldata signature) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            signature.length := 0\n        }\n    }\n}\n"},"contracts/interfaces/base/IExecutionHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { ExecutionMode } from \"../../lib/ModeLib.sol\";\n\nimport { IExecutionHelperEventsAndErrors } from \"./IExecutionHelperEventsAndErrors.sol\";\n\n/// @title Nexus - IExecutionHelper\n/// @notice Interface for executing transactions on behalf of smart accounts within the Nexus system.\n/// @dev Extends functionality for transaction execution with error handling as defined in IExecutionHelperEventsAndErrors.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IExecutionHelper is IExecutionHelperEventsAndErrors {\n    /// @notice Executes a transaction with specified execution mode and calldata.\n    /// @param mode The execution mode, defining how the transaction is processed.\n    /// @param executionCalldata The calldata to execute.\n    /// @dev This function ensures that the execution complies with smart account execution policies and handles errors appropriately.\n    function execute(ExecutionMode mode, bytes calldata executionCalldata) external payable;\n\n    /// @notice Allows an executor module to perform transactions on behalf of the account.\n    /// @param mode The execution mode that details how the transaction should be handled.\n    /// @param executionCalldata The transaction data to be executed.\n    /// @return returnData The result of the execution, allowing for error handling and results interpretation by the executor module.\n    function executeFromExecutor(ExecutionMode mode, bytes calldata executionCalldata) external payable returns (bytes[] memory returnData);\n}\n"},"node_modules/solady/src/utils/EfficientHashLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for efficiently performing keccak256 hashes.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/EfficientHashLib.sol)\n/// @dev To avoid stack-too-deep, you can use:\n/// ```\n/// bytes32[] memory buffer = EfficientHashLib.malloc(10);\n/// EfficientHashLib.set(buffer, 0, value0);\n/// ..\n/// EfficientHashLib.set(buffer, 9, value9);\n/// bytes32 finalHash = EfficientHashLib.hash(buffer);\n/// ```\nlibrary EfficientHashLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*               MALLOC-LESS HASHING OPERATIONS               */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `keccak256(abi.encode(v0))`.\n    function hash(bytes32 v0) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, v0)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0))`.\n    function hash(uint256 v0) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, v0)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1))`.\n    function hash(bytes32 v0, bytes32 v1) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, v0)\n            mstore(0x20, v1)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1))`.\n    function hash(uint256 v0, uint256 v1) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, v0)\n            mstore(0x20, v1)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1, v2))`.\n    function hash(bytes32 v0, bytes32 v1, bytes32 v2) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            result := keccak256(m, 0x60)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1, v2))`.\n    function hash(uint256 v0, uint256 v1, uint256 v2) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            result := keccak256(m, 0x60)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1, v2, v3))`.\n    function hash(bytes32 v0, bytes32 v1, bytes32 v2, bytes32 v3)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            result := keccak256(m, 0x80)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, v1, v2, v3))`.\n    function hash(uint256 v0, uint256 v1, uint256 v2, uint256 v3)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            result := keccak256(m, 0x80)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v4))`.\n    function hash(bytes32 v0, bytes32 v1, bytes32 v2, bytes32 v3, bytes32 v4)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            result := keccak256(m, 0xa0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v4))`.\n    function hash(uint256 v0, uint256 v1, uint256 v2, uint256 v3, uint256 v4)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            result := keccak256(m, 0xa0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v5))`.\n    function hash(bytes32 v0, bytes32 v1, bytes32 v2, bytes32 v3, bytes32 v4, bytes32 v5)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            result := keccak256(m, 0xc0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v5))`.\n    function hash(uint256 v0, uint256 v1, uint256 v2, uint256 v3, uint256 v4, uint256 v5)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            result := keccak256(m, 0xc0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v6))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            result := keccak256(m, 0xe0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v6))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            result := keccak256(m, 0xe0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v7))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            result := keccak256(m, 0x100)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v7))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            result := keccak256(m, 0x100)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v8))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            result := keccak256(m, 0x120)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v8))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            result := keccak256(m, 0x120)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v9))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8,\n        bytes32 v9\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            result := keccak256(m, 0x140)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v9))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8,\n        uint256 v9\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            result := keccak256(m, 0x140)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v10))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8,\n        bytes32 v9,\n        bytes32 v10\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            result := keccak256(m, 0x160)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v10))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8,\n        uint256 v9,\n        uint256 v10\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            result := keccak256(m, 0x160)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v11))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8,\n        bytes32 v9,\n        bytes32 v10,\n        bytes32 v11\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            result := keccak256(m, 0x180)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v11))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8,\n        uint256 v9,\n        uint256 v10,\n        uint256 v11\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            result := keccak256(m, 0x180)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v12))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8,\n        bytes32 v9,\n        bytes32 v10,\n        bytes32 v11,\n        bytes32 v12\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            mstore(add(m, 0x180), v12)\n            result := keccak256(m, 0x1a0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v12))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8,\n        uint256 v9,\n        uint256 v10,\n        uint256 v11,\n        uint256 v12\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            mstore(add(m, 0x180), v12)\n            result := keccak256(m, 0x1a0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v13))`.\n    function hash(\n        bytes32 v0,\n        bytes32 v1,\n        bytes32 v2,\n        bytes32 v3,\n        bytes32 v4,\n        bytes32 v5,\n        bytes32 v6,\n        bytes32 v7,\n        bytes32 v8,\n        bytes32 v9,\n        bytes32 v10,\n        bytes32 v11,\n        bytes32 v12,\n        bytes32 v13\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            mstore(add(m, 0x180), v12)\n            mstore(add(m, 0x1a0), v13)\n            result := keccak256(m, 0x1c0)\n        }\n    }\n\n    /// @dev Returns `keccak256(abi.encode(v0, .., v13))`.\n    function hash(\n        uint256 v0,\n        uint256 v1,\n        uint256 v2,\n        uint256 v3,\n        uint256 v4,\n        uint256 v5,\n        uint256 v6,\n        uint256 v7,\n        uint256 v8,\n        uint256 v9,\n        uint256 v10,\n        uint256 v11,\n        uint256 v12,\n        uint256 v13\n    ) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40)\n            mstore(m, v0)\n            mstore(add(m, 0x20), v1)\n            mstore(add(m, 0x40), v2)\n            mstore(add(m, 0x60), v3)\n            mstore(add(m, 0x80), v4)\n            mstore(add(m, 0xa0), v5)\n            mstore(add(m, 0xc0), v6)\n            mstore(add(m, 0xe0), v7)\n            mstore(add(m, 0x100), v8)\n            mstore(add(m, 0x120), v9)\n            mstore(add(m, 0x140), v10)\n            mstore(add(m, 0x160), v11)\n            mstore(add(m, 0x180), v12)\n            mstore(add(m, 0x1a0), v13)\n            result := keccak256(m, 0x1c0)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*             BYTES32 BUFFER HASHING OPERATIONS              */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `keccak256(abi.encode(buffer[0], .., buffer[buffer.length - 1]))`.\n    function hash(bytes32[] memory buffer) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := keccak256(add(buffer, 0x20), shl(5, mload(buffer)))\n        }\n    }\n\n    /// @dev Sets `buffer[i]` to `value`, without a bounds check.\n    /// Returns the `buffer` for function chaining.\n    function set(bytes32[] memory buffer, uint256 i, bytes32 value)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(add(buffer, shl(5, add(1, i))), value)\n        }\n        return buffer;\n    }\n\n    /// @dev Sets `buffer[i]` to `value`, without a bounds check.\n    /// Returns the `buffer` for function chaining.\n    function set(bytes32[] memory buffer, uint256 i, uint256 value)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(add(buffer, shl(5, add(1, i))), value)\n        }\n        return buffer;\n    }\n\n    /// @dev Returns `new bytes32[](n)`, without zeroing out the memory.\n    function malloc(uint256 n) internal pure returns (bytes32[] memory buffer) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            buffer := mload(0x40)\n            mstore(buffer, n)\n            mstore(0x40, add(shl(5, add(1, n)), buffer))\n        }\n    }\n\n    /// @dev Frees memory that has been allocated for `buffer`.\n    /// No-op if `buffer.length` is zero, or if new memory has been allocated after `buffer`.\n    function free(bytes32[] memory buffer) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(buffer)\n            mstore(shl(6, lt(iszero(n), eq(add(shl(5, add(1, n)), buffer), mload(0x40)))), buffer)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      EQUALITY CHECKS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `a == abi.decode(b, (bytes32))`.\n    function eq(bytes32 a, bytes memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := and(eq(0x20, mload(b)), eq(a, mload(add(b, 0x20))))\n        }\n    }\n\n    /// @dev Returns `abi.decode(a, (bytes32)) == a`.\n    function eq(bytes memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := and(eq(0x20, mload(a)), eq(b, mload(add(a, 0x20))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*               BYTE SLICE HASHING OPERATIONS                */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the keccak256 of the slice from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function hash(bytes memory b, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(b)\n            end := xor(end, mul(xor(end, n), lt(n, end)))\n            start := xor(start, mul(xor(start, n), lt(n, start)))\n            result := keccak256(add(add(b, 0x20), start), mul(gt(end, start), sub(end, start)))\n        }\n    }\n\n    /// @dev Returns the keccak256 of the slice from `start` to the end of the bytes.\n    function hash(bytes memory b, uint256 start) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(b)\n            start := xor(start, mul(xor(start, n), lt(n, start)))\n            result := keccak256(add(add(b, 0x20), start), mul(gt(n, start), sub(n, start)))\n        }\n    }\n\n    /// @dev Returns the keccak256 of the bytes.\n    function hash(bytes memory b) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := keccak256(add(b, 0x20), mload(b))\n        }\n    }\n\n    /// @dev Returns the keccak256 of the slice from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function hashCalldata(bytes calldata b, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            end := xor(end, mul(xor(end, b.length), lt(b.length, end)))\n            start := xor(start, mul(xor(start, b.length), lt(b.length, start)))\n            let n := mul(gt(end, start), sub(end, start))\n            calldatacopy(mload(0x40), add(b.offset, start), n)\n            result := keccak256(mload(0x40), n)\n        }\n    }\n\n    /// @dev Returns the keccak256 of the slice from `start` to the end of the bytes.\n    function hashCalldata(bytes calldata b, uint256 start) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            start := xor(start, mul(xor(start, b.length), lt(b.length, start)))\n            let n := mul(gt(b.length, start), sub(b.length, start))\n            calldatacopy(mload(0x40), add(b.offset, start), n)\n            result := keccak256(mload(0x40), n)\n        }\n    }\n\n    /// @dev Returns the keccak256 of the bytes.\n    function hashCalldata(bytes calldata b) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            calldatacopy(mload(0x40), b.offset, b.length)\n            result := keccak256(mload(0x40), b.length)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      SHA2-256 HELPERS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `sha256(abi.encode(b))`. Yes, it's more efficient.\n    function sha2(bytes32 b) internal view returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, b)\n            result := mload(staticcall(gas(), 2, 0x00, 0x20, 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the slice from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function sha2(bytes memory b, uint256 start, uint256 end)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(b)\n            end := xor(end, mul(xor(end, n), lt(n, end)))\n            start := xor(start, mul(xor(start, n), lt(n, start)))\n            // forgefmt: disable-next-item\n            result := mload(staticcall(gas(), 2, add(add(b, 0x20), start),\n                mul(gt(end, start), sub(end, start)), 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the slice from `start` to the end of the bytes.\n    function sha2(bytes memory b, uint256 start) internal view returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(b)\n            start := xor(start, mul(xor(start, n), lt(n, start)))\n            // forgefmt: disable-next-item\n            result := mload(staticcall(gas(), 2, add(add(b, 0x20), start),\n                mul(gt(n, start), sub(n, start)), 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the bytes.\n    function sha2(bytes memory b) internal view returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(staticcall(gas(), 2, add(b, 0x20), mload(b), 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the slice from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function sha2Calldata(bytes calldata b, uint256 start, uint256 end)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            end := xor(end, mul(xor(end, b.length), lt(b.length, end)))\n            start := xor(start, mul(xor(start, b.length), lt(b.length, start)))\n            let n := mul(gt(end, start), sub(end, start))\n            calldatacopy(mload(0x40), add(b.offset, start), n)\n            result := mload(staticcall(gas(), 2, mload(0x40), n, 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the slice from `start` to the end of the bytes.\n    function sha2Calldata(bytes calldata b, uint256 start) internal view returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            start := xor(start, mul(xor(start, b.length), lt(b.length, start)))\n            let n := mul(gt(b.length, start), sub(b.length, start))\n            calldatacopy(mload(0x40), add(b.offset, start), n)\n            result := mload(staticcall(gas(), 2, mload(0x40), n, 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n\n    /// @dev Returns the sha256 of the bytes.\n    function sha2Calldata(bytes calldata b) internal view returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            calldatacopy(mload(0x40), b.offset, b.length)\n            result := mload(staticcall(gas(), 2, mload(0x40), b.length, 0x01, 0x20))\n            if iszero(returndatasize()) { invalid() }\n        }\n    }\n}\n"},"node_modules/solady/src/utils/LibBit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for bit twiddling and boolean operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBit.sol)\n/// @author Inspired by (https://graphics.stanford.edu/~seander/bithacks.html)\nlibrary LibBit {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  BIT TWIDDLING OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Find last set.\n    /// Returns the index of the most significant bit of `x`,\n    /// counting from the least significant bit position.\n    /// If `x` is zero, returns 256.\n    function fls(uint256 x) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := or(shl(8, iszero(x)), shl(7, lt(0xffffffffffffffffffffffffffffffff, x)))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\n                0x0706060506020504060203020504030106050205030304010505030400000000))\n        }\n    }\n\n    /// @dev Count leading zeros.\n    /// Returns the number of zeros preceding the most significant one bit.\n    /// If `x` is zero, returns 256.\n    function clz(uint256 x) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            r := add(xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff)), iszero(x))\n        }\n    }\n\n    /// @dev Find first set.\n    /// Returns the index of the least significant bit of `x`,\n    /// counting from the least significant bit position.\n    /// If `x` is zero, returns 256.\n    /// Equivalent to `ctz` (count trailing zeros), which gives\n    /// the number of zeros following the least significant one bit.\n    function ffs(uint256 x) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Isolate the least significant bit.\n            x := and(x, add(not(x), 1))\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\n            // forgefmt: disable-next-item\n            r := shl(5, shr(252, shl(shl(2, shr(250, mul(x,\n                0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff))),\n                0x8040405543005266443200005020610674053026020000107506200176117077)))\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\n            // forgefmt: disable-next-item\n            r := or(r, byte(and(div(0xd76453e0, shr(r, x)), 0x1f),\n                0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405))\n        }\n    }\n\n    /// @dev Returns the number of set bits in `x`.\n    function popCount(uint256 x) internal pure returns (uint256 c) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let max := not(0)\n            let isMax := eq(x, max)\n            x := sub(x, and(shr(1, x), div(max, 3)))\n            x := add(and(x, div(max, 5)), and(shr(2, x), div(max, 5)))\n            x := and(add(x, shr(4, x)), div(max, 17))\n            c := or(shl(8, isMax), shr(248, mul(x, div(max, 255))))\n        }\n    }\n\n    /// @dev Returns whether `x` is a power of 2.\n    function isPo2(uint256 x) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to `x && !(x & (x - 1))`.\n            result := iszero(add(and(x, sub(x, 1)), iszero(x)))\n        }\n    }\n\n    /// @dev Returns `x` reversed at the bit level.\n    function reverseBits(uint256 x) internal pure returns (uint256 r) {\n        uint256 m0 = 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\n        uint256 m1 = m0 ^ (m0 << 2);\n        uint256 m2 = m1 ^ (m1 << 1);\n        r = reverseBytes(x);\n        r = (m2 & (r >> 1)) | ((m2 & r) << 1);\n        r = (m1 & (r >> 2)) | ((m1 & r) << 2);\n        r = (m0 & (r >> 4)) | ((m0 & r) << 4);\n    }\n\n    /// @dev Returns `x` reversed at the byte level.\n    function reverseBytes(uint256 x) internal pure returns (uint256 r) {\n        unchecked {\n            // Computing masks on-the-fly reduces bytecode size by about 200 bytes.\n            uint256 m0 = 0x100000000000000000000000000000001 * (~toUint(x == uint256(0)) >> 192);\n            uint256 m1 = m0 ^ (m0 << 32);\n            uint256 m2 = m1 ^ (m1 << 16);\n            uint256 m3 = m2 ^ (m2 << 8);\n            r = (m3 & (x >> 8)) | ((m3 & x) << 8);\n            r = (m2 & (r >> 16)) | ((m2 & r) << 16);\n            r = (m1 & (r >> 32)) | ((m1 & r) << 32);\n            r = (m0 & (r >> 64)) | ((m0 & r) << 64);\n            r = (r >> 128) | (r << 128);\n        }\n    }\n\n    /// @dev Returns the common prefix of `x` and `y` at the bit level.\n    function commonBitPrefix(uint256 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            uint256 s = 256 - clz(x ^ y);\n            return (x >> s) << s;\n        }\n    }\n\n    /// @dev Returns the common prefix of `x` and `y` at the nibble level.\n    function commonNibblePrefix(uint256 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            uint256 s = (64 - (clz(x ^ y) >> 2)) << 2;\n            return (x >> s) << s;\n        }\n    }\n\n    /// @dev Returns the common prefix of `x` and `y` at the byte level.\n    function commonBytePrefix(uint256 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            uint256 s = (32 - (clz(x ^ y) >> 3)) << 3;\n            return (x >> s) << s;\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     BOOLEAN OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // A Solidity bool on the stack or memory is represented as a 256-bit word.\n    // Non-zero values are true, zero is false.\n    // A clean bool is either 0 (false) or 1 (true) under the hood.\n    // Usually, if not always, the bool result of a regular Solidity expression,\n    // or the argument of a public/external function will be a clean bool.\n    // You can usually use the raw variants for more performance.\n    // If uncertain, test (best with exact compiler settings).\n    // Or use the non-raw variants (compiler can sometimes optimize out the double `iszero`s).\n\n    /// @dev Returns `x & y`. Inputs must be clean.\n    function rawAnd(bool x, bool y) internal pure returns (bool z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := and(x, y)\n        }\n    }\n\n    /// @dev Returns `x & y`.\n    function and(bool x, bool y) internal pure returns (bool z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := and(iszero(iszero(x)), iszero(iszero(y)))\n        }\n    }\n\n    /// @dev Returns `x | y`. Inputs must be clean.\n    function rawOr(bool x, bool y) internal pure returns (bool z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := or(x, y)\n        }\n    }\n\n    /// @dev Returns `x | y`.\n    function or(bool x, bool y) internal pure returns (bool z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := or(iszero(iszero(x)), iszero(iszero(y)))\n        }\n    }\n\n    /// @dev Returns 1 if `b` is true, else 0. Input must be clean.\n    function rawToUint(bool b) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := b\n        }\n    }\n\n    /// @dev Returns 1 if `b` is true, else 0.\n    function toUint(bool b) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            z := iszero(iszero(b))\n        }\n    }\n}\n"},"node_modules/solady/src/utils/LibBytes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for byte related operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\nlibrary LibBytes {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\n    /// Packs length with the first 31 bytes if <255 bytes, so it’s mad tight.\n    struct BytesStorage {\n        bytes32 _spacer;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the bytes.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  BYTE STORAGE OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function set(BytesStorage storage $, bytes memory s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(s)\n            let packed := or(0xff, shl(8, n))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(n, 0xfe)) {\n                    i := 0x1f\n                    packed := or(n, shl(8, mload(add(s, i))))\n                    if iszero(gt(n, i)) { break }\n                }\n                let o := add(s, 0x20)\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let packed := or(0xff, shl(8, s.length))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(s.length, 0xfe)) {\n                    i := 0x1f\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\n                    if iszero(gt(s.length, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, s.length)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\n    function clear(BytesStorage storage $) internal {\n        delete $._spacer;\n    }\n\n    /// @dev Returns whether the value stored is `$` is the empty bytes \"\".\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\n        return uint256($._spacer) & 0xff == uint256(0);\n    }\n\n    /// @dev Returns the length of the value stored in `$`.\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\n        result = uint256($._spacer);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := and(0xff, result)\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\n        }\n    }\n\n    /// @dev Returns the value stored in `$`.\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let o := add(result, 0x20)\n            let packed := sload($.slot)\n            let n := shr(8, packed)\n            for { let i := 0 } 1 {} {\n                if iszero(eq(or(packed, 0xff), packed)) {\n                    mstore(o, packed)\n                    n := and(0xff, packed)\n                    i := 0x1f\n                    if iszero(gt(n, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            mstore(result, n) // Store the length of the memory.\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      BYTES OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let needleLen := mload(needle)\n            let replacementLen := mload(replacement)\n            let d := sub(result, subject) // Memory difference.\n            let i := add(subject, 0x20) // Subject bytes pointer.\n            mstore(0x00, add(i, mload(subject))) // End of subject.\n            if iszero(gt(needleLen, mload(subject))) {\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, needleLen), h)) {\n                                mstore(add(i, d), t)\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Copy the `replacement` one word at a time.\n                        for { let j := 0 } 1 {} {\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\n                            j := add(j, 0x20)\n                            if iszero(lt(j, replacementLen)) { break }\n                        }\n                        d := sub(add(d, replacementLen), needleLen)\n                        if needleLen {\n                            i := add(i, needleLen)\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    mstore(add(i, d), t)\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n            }\n            let end := mload(0x00)\n            let n := add(sub(d, add(result, 0x20)), end)\n            // Copy the rest of the bytes one word at a time.\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\n            let o := add(i, d)\n            mstore(o, 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := not(0) // Initialize to `NOT_FOUND`.\n            for { let subjectLen := mload(subject) } 1 {} {\n                if iszero(mload(needle)) {\n                    result := from\n                    if iszero(gt(from, subjectLen)) { break }\n                    result := subjectLen\n                    break\n                }\n                let needleLen := mload(needle)\n                let subjectStart := add(subject, 0x20)\n\n                subject := add(subjectStart, from)\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\n                let s := mload(add(needle, 0x20))\n\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\n\n                if iszero(lt(needleLen, 0x20)) {\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                        if iszero(shr(m, xor(mload(subject), s))) {\n                            if eq(keccak256(subject, needleLen), h) {\n                                result := sub(subject, subjectStart)\n                                break\n                            }\n                        }\n                        subject := add(subject, 1)\n                        if iszero(lt(subject, end)) { break }\n                    }\n                    break\n                }\n                for {} 1 {} {\n                    if iszero(shr(m, xor(mload(subject), s))) {\n                        result := sub(subject, subjectStart)\n                        break\n                    }\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\n        return indexOf(subject, needle, 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                result := not(0) // Initialize to `NOT_FOUND`.\n                let needleLen := mload(needle)\n                if gt(needleLen, mload(subject)) { break }\n                let w := result\n\n                let fromMax := sub(mload(subject), needleLen)\n                if iszero(gt(fromMax, from)) { from := fromMax }\n\n                let end := add(add(subject, 0x20), w)\n                subject := add(add(subject, 0x20), from)\n                if iszero(gt(subject, end)) { break }\n                // As this function is not too often used,\n                // we shall simply use keccak256 for smaller bytecode size.\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                    if eq(keccak256(subject, needleLen), h) {\n                        result := sub(subject, add(end, 1))\n                        break\n                    }\n                    subject := add(subject, w) // `sub(subject, 1)`.\n                    if iszero(gt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256)\n    {\n        return lastIndexOf(subject, needle, type(uint256).max);\n    }\n\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\n        return indexOf(subject, needle) != NOT_FOUND;\n    }\n\n    /// @dev Returns whether `subject` starts with `needle`.\n    function startsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            // Just using keccak256 directly is actually cheaper.\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\n            result := lt(gt(n, mload(subject)), t)\n        }\n    }\n\n    /// @dev Returns whether `subject` ends with `needle`.\n    function endsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            let notInRange := gt(n, mload(subject))\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\n            // Just using keccak256 directly is actually cheaper.\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\n        }\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(bytes memory subject, uint256 times)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(or(iszero(times), iszero(l))) {\n                result := mload(0x40)\n                subject := add(subject, 0x20)\n                let o := add(result, 0x20)\n                for {} 1 {} {\n                    // Copy the `subject` one word at a time.\n                    for { let j := 0 } 1 {} {\n                        mstore(add(o, j), mload(add(subject, j)))\n                        j := add(j, 0x20)\n                        if iszero(lt(j, l)) { break }\n                    }\n                    o := add(o, l)\n                    times := sub(times, 1)\n                    if iszero(times) { break }\n                }\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(bytes memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(gt(l, end)) { end := l }\n            if iszero(gt(l, start)) { start := l }\n            if lt(start, end) {\n                result := mload(0x40)\n                let n := sub(end, start)\n                let i := add(subject, start)\n                let w := not(0x1f)\n                // Copy the `subject` one word at a time, backwards.\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\n                    mstore(add(result, j), mload(add(i, j)))\n                    j := add(j, w) // `sub(j, 0x20)`.\n                    if iszero(j) { break }\n                }\n                let o := add(add(result, 0x20), n)\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, n) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset.\n    function slice(bytes memory subject, uint256 start)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        result = slice(subject, start, type(uint256).max);\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, end), sub(end, start))\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\n        }\n    }\n\n    /// @dev Reduces the size of `subject` to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncate(bytes memory subject, uint256 n)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := subject\n            mstore(mul(lt(n, mload(result)), result), n)\n        }\n    }\n\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncatedCalldata(bytes calldata subject, uint256 n)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.offset := subject.offset\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\n        }\n    }\n\n    /// @dev Returns all the indices of `needle` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256[] memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let searchLen := mload(needle)\n            if iszero(gt(searchLen, mload(subject))) {\n                result := mload(0x40)\n                let i := add(subject, 0x20)\n                let o := add(result, 0x20)\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, searchLen), h)) {\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\n                        o := add(o, 0x20)\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\n                        if searchLen {\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\n                // Allocate memory for result.\n                // We allocate one more word, so this array can be recycled for {split}.\n                mstore(0x40, add(o, 0x20))\n            }\n        }\n    }\n\n    /// @dev Returns a arrays of bytess based on the `delimiter` inside of the `subject` bytes.\n    function split(bytes memory subject, bytes memory delimiter)\n        internal\n        pure\n        returns (bytes[] memory result)\n    {\n        uint256[] memory indices = indicesOf(subject, delimiter);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let w := not(0x1f)\n            let indexPtr := add(indices, 0x20)\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n            mstore(add(indicesEnd, w), mload(subject))\n            mstore(indices, add(mload(indices), 1))\n            for { let prevIndex := 0 } 1 {} {\n                let index := mload(indexPtr)\n                mstore(indexPtr, 0x60)\n                if iszero(eq(index, prevIndex)) {\n                    let element := mload(0x40)\n                    let l := sub(index, prevIndex)\n                    mstore(element, l) // Store the length of the element.\n                    // Copy the `subject` one word at a time, backwards.\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n                        o := add(o, w) // `sub(o, 0x20)`.\n                        if iszero(o) { break }\n                    }\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\n                    mstore(indexPtr, element) // Store the `element` into the array.\n                }\n                prevIndex := add(index, mload(delimiter))\n                indexPtr := add(indexPtr, 0x20)\n                if iszero(lt(indexPtr, indicesEnd)) { break }\n            }\n            result := indices\n            if iszero(mload(delimiter)) {\n                result := add(indices, 0x20)\n                mstore(result, sub(mload(indices), 2))\n            }\n        }\n    }\n\n    /// @dev Returns a concatenated bytes of `a` and `b`.\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let w := not(0x1f)\n            let aLen := mload(a)\n            // Copy `a` one word at a time, backwards.\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\n                mstore(add(result, o), mload(add(a, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let bLen := mload(b)\n            let output := add(result, aLen)\n            // Copy `b` one word at a time, backwards.\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\n                mstore(add(output, o), mload(add(b, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let totalLen := add(aLen, bLen)\n            let last := add(add(result, 0x20), totalLen)\n            mstore(last, 0) // Zeroize the slot after the bytes.\n            mstore(result, totalLen) // Store the length.\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLen := mload(a)\n            let bLen := mload(b)\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\n            if n {\n                for { let i := 0x20 } 1 {} {\n                    let x := mload(add(a, i))\n                    let y := mload(add(b, i))\n                    if iszero(or(xor(x, y), eq(i, n))) {\n                        i := add(i, 0x20)\n                        continue\n                    }\n                    result := sub(gt(x, y), lt(x, y))\n                    break\n                }\n            }\n            // forgefmt: disable-next-item\n            if iszero(result) {\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\n                result := sub(gt(x, y), lt(x, y))\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\n            }\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(bytes memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Assumes that the bytes does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the bytes is produced\n            // by a method that doesn't zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            mstore(retStart, 0x20) // Store the return offset.\n            // End the transaction, returning the bytes.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n\n    /// @dev Directly returns `a` with minimal copying.\n    function directReturn(bytes[] memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(a) // `a.length`.\n            let o := add(a, 0x20) // Start of elements in `a`.\n            let u := a // Highest memory slot.\n            let w := not(0x1f)\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\n                let s := mload(c) // `a[i]`.\n                let l := mload(s) // `a[i].length`.\n                let r := and(l, 0x1f) // `a[i].length % 32`.\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\n                // If `s` comes before `o`, or `s` is not zero right padded.\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\n                    let m := mload(0x40)\n                    mstore(m, l) // Copy `a[i].length`.\n                    for {} 1 {} {\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\n                        z := add(z, w) // `sub(z, 0x20)`.\n                        if iszero(z) { break }\n                    }\n                    let e := add(add(m, 0x20), l)\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\n                    s := m\n                }\n                mstore(c, sub(s, o)) // Convert to calldata offset.\n                let t := add(l, add(s, 0x20))\n                if iszero(lt(t, u)) { u := t }\n            }\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\n            mstore(retStart, 0x20) // Store the return offset.\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    /// To load an address, you can use `address(bytes20(load(a, offset)))`.\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(add(add(a, 0x20), offset))\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    /// To load an address, you can use `address(bytes20(loadCalldata(a, offset)))`.\n    function loadCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := calldataload(add(a.offset, offset))\n        }\n    }\n\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\n    function emptyCalldata() internal pure returns (bytes calldata result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.length := 0\n        }\n    }\n}\n"},"node_modules/solady/src/accounts/LibEIP7702.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Library for EIP7702 operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/accounts/LibEIP7702.sol)\nlibrary LibEIP7702 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The proxy query has failed.\n    error ProxyQueryFailed();\n\n    /// @dev Failed to change the proxy admin.\n    error ChangeProxyAdminFailed();\n\n    /// @dev Failed to upgrade the proxy.\n    error UpgradeProxyFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ERC-1967 storage slot for the implementation in the proxy.\n    /// `uint256(keccak256(\"eip1967.proxy.implementation\")) - 1`.\n    bytes32 internal constant ERC1967_IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /// @dev The transient storage slot for requesting the proxy to initialize the implementation.\n    /// `uint256(keccak256(\"eip7702.proxy.delegation.initialization.request\")) - 1`.\n    /// While we would love to use a smaller constant, this slot is used in both the proxy\n    /// and the delegation, so we shall just use bytes32 in case we want to standardize this.\n    bytes32 internal constant EIP7702_PROXY_DELEGATION_INITIALIZATION_REQUEST_SLOT =\n        0x94e11c6e41e7fb92cb8bb65e13fdfbd4eba8b831292a1a220f7915c78c7c078f;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    AUTHORITY OPERATIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the delegation of the account.\n    /// If the account is not an EIP7702 authority, the `delegation` will be `address(0)`.\n    function delegation(address account) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            extcodecopy(account, 0x00, 0x00, 0x20)\n            // Note: Checking that it starts with hex\"ef01\" is the most general and futureproof.\n            // 7702 bytecode is `abi.encodePacked(hex\"ef01\", uint8(version), address(delegation))`.\n            result := mul(shr(96, mload(0x03)), eq(0xef01, shr(240, mload(0x00))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PROXY OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the implementation of the proxy.\n    /// Assumes that the proxy is a proper EIP7702Proxy, if it exists.\n    function proxyImplementation(address proxy) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Although `implementation()` is supported, we'll use a less common\n            // function selector to avoid accidental collision with other delegations.\n            mstore(0x00, 0x7dae87cb) // `eip7702ProxyImplementation()`.\n            let t := staticcall(gas(), proxy, 0x1c, 0x04, 0x00, 0x20)\n            if iszero(and(gt(returndatasize(), 0x1f), t)) {\n                mstore(0x00, 0x26ec9b6a) // `ProxyQueryFailed()`.\n                revert(0x1c, 0x04)\n            }\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Returns the admin of the proxy.\n    /// Assumes that the proxy is a proper EIP7702Proxy, if it exists.\n    function proxyAdmin(address proxy) internal view returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0xf851a440) // `admin()`.\n            let t := staticcall(gas(), proxy, 0x1c, 0x04, 0x00, 0x20)\n            if iszero(and(gt(returndatasize(), 0x1f), t)) {\n                mstore(0x00, 0x26ec9b6a) // `ProxyQueryFailed()`.\n                revert(0x1c, 0x04)\n            }\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Changes the admin on the proxy. The caller must be the admin.\n    /// Assumes that the proxy is a proper EIP7702Proxy, if it exists.\n    function changeProxyAdmin(address proxy, address newAdmin) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x8f283970) // `changeAdmin(address)`.\n            mstore(0x20, newAdmin) // The implementation will clean the upper 96 bits.\n            if iszero(and(eq(mload(0x00), 1), call(gas(), proxy, 0, 0x1c, 0x24, 0x00, 0x20))) {\n                mstore(0x00, 0xc502e37e) // `ChangeProxyAdminFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Changes the implementation on the proxy. The caller must be the admin.\n    /// Assumes that the proxy is a proper EIP7702Proxy, if it exists.\n    function upgradeProxy(address proxy, address newImplementation) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x0900f010) // `upgrade(address)`.\n            mstore(0x20, newImplementation) // The implementation will clean the upper 96 bits.\n            if iszero(and(eq(mload(0x00), 1), call(gas(), proxy, 0, 0x1c, 0x24, 0x00, 0x20))) {\n                mstore(0x00, 0xc6edd882) // `UpgradeProxyFailed()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                PROXY DELEGATION OPERATIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Upgrades the implementation.\n    /// The new implementation will NOT be active until the next UserOp or transaction.\n    /// To \"auto-upgrade\" to the latest implementation on the proxy, pass in `address(0)` to reset\n    /// the implementation slot. This causes the proxy to use the latest default implementation,\n    /// which may be optionally reinitialized via `requestProxyDelegationInitialization()`.\n    /// This function is intended to be used on the authority of an EIP7702Proxy delegation.\n    /// The most intended usage pattern is to wrap this in an access-gated admin function.\n    function upgradeProxyDelegation(address newImplementation) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let s := ERC1967_IMPLEMENTATION_SLOT\n            // Preserve the upper 96 bits when updating in case they are used for some stuff.\n            mstore(0x00, sload(s))\n            mstore(0x0c, shl(96, newImplementation))\n            sstore(s, mload(0x00))\n        }\n    }\n\n    /// @dev Requests the implementation to be initialized to the latest implementation on the proxy.\n    /// This function is intended to be used on the authority of an EIP7702Proxy delegation.\n    /// The most intended usage pattern is to place it at the end of an `execute` function.\n    function requestProxyDelegationInitialization() internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(shl(96, sload(ERC1967_IMPLEMENTATION_SLOT))) {\n                // Use a dedicated transient storage slot for better Swiss-cheese-model safety.\n                tstore(EIP7702_PROXY_DELEGATION_INITIALIZATION_REQUEST_SLOT, address())\n            }\n        }\n    }\n}\n"},"node_modules/@biconomy/composability/contracts/ComposableExecutionLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport {Storage} from \"./Storage.sol\";\nimport {InputParam, OutputParam, Constraint, ConstraintType, InputParamFetcherType, OutputParamFetcherType} from \"./types/ComposabilityDataTypes.sol\";\n// Library for composable execution handling\nlibrary ComposableExecutionLib {\n\n    error ConstraintNotMet(ConstraintType constraintType);\n    error Output_StaticCallFailed();\n    error InvalidParameterEncoding();\n    error InvalidOutputParamFetcherType();\n    error ComposableExecutionFailed();\n    error InvalidConstraintType();\n\n    // Process the input parameters and return the composed calldata\n    function processInputs(InputParam[] calldata inputParams, bytes4 functionSig)\n        internal\n        view\n        returns (bytes memory)\n    {\n        bytes memory composedCalldata = abi.encodePacked(functionSig);\n        uint256 length = inputParams.length;\n        for (uint256 i; i < length; i++) {\n            composedCalldata = bytes.concat(composedCalldata, processInput(inputParams[i]));\n        }\n        return composedCalldata;\n    }\n\n    // Process a single input parameter and return the composed calldata\n    function processInput(InputParam calldata param) internal view returns (bytes memory) {\n        if (param.fetcherType == InputParamFetcherType.RAW_BYTES) {\n            _validateConstraints(param.paramData, param.constraints);\n            return param.paramData;\n        } else if (param.fetcherType == InputParamFetcherType.STATIC_CALL) {\n            address contractAddr;\n            bytes calldata callData;\n            bytes calldata paramData = param.paramData;\n            assembly {\n                contractAddr := calldataload(paramData.offset)\n                let s := calldataload(add(paramData.offset, 0x20))\n                let u := add(paramData.offset, s)\n                callData.offset := add(u, 0x20)\n                callData.length := calldataload(u)\n            }\n            (bool success, bytes memory returnData) = contractAddr.staticcall(callData);\n            if (!success) {\n                revert ComposableExecutionFailed();\n            }\n            _validateConstraints(returnData, param.constraints);\n            return returnData;\n        } else {\n            revert InvalidParameterEncoding();\n        }\n    }\n\n    // Process the output parameters\n    function processOutputs(OutputParam[] calldata outputParams, bytes memory returnData, address account) internal {\n        uint256 length = outputParams.length;\n        for (uint256 i; i < length; i++) {\n            processOutput(outputParams[i], returnData, account);\n        }\n    }\n\n    // Process a single output parameter and write to storage\n    function processOutput(OutputParam calldata param, bytes memory returnData, address account) internal {\n        // only static types are supported for now as return values\n        // can also process all the static return values which are before the first dynamic return value in the returnData\n        if (param.fetcherType == OutputParamFetcherType.EXEC_RESULT) {\n            uint256 returnValues;\n            address targetStorageContract;\n            bytes32 targetStorageSlot;\n            bytes calldata paramData = param.paramData;\n            assembly {\n                returnValues := calldataload(paramData.offset)\n                targetStorageContract := calldataload(add(paramData.offset, 0x20))\n                targetStorageSlot := calldataload(add(paramData.offset, 0x40))\n            }\n            _parseReturnDataAndWriteToStorage(returnValues, returnData, targetStorageContract, targetStorageSlot, account);\n        // same for static calls\n        } else if (param.fetcherType == OutputParamFetcherType.STATIC_CALL) {\n            uint256 returnValues;\n            address sourceContract;\n            bytes calldata sourceCallData;\n            address targetStorageContract;\n            bytes32 targetStorageSlot;\n            bytes calldata paramData = param.paramData;\n            assembly {\n                returnValues := calldataload(paramData.offset)\n                sourceContract := calldataload(add(paramData.offset, 0x20))\n                let s := calldataload(add(paramData.offset, 0x40))\n                let u := add(paramData.offset, s)\n                sourceCallData.offset := add(u, 0x20)\n                sourceCallData.length := calldataload(u)\n                targetStorageContract := calldataload(add(paramData.offset, 0x60))\n                targetStorageSlot := calldataload(add(paramData.offset, 0x80))\n            }\n            (bool outputSuccess, bytes memory outputReturnData) = sourceContract.staticcall(sourceCallData);\n            if (!outputSuccess) {\n                revert Output_StaticCallFailed();\n            }\n            _parseReturnDataAndWriteToStorage(returnValues, outputReturnData, targetStorageContract, targetStorageSlot, account);\n        } else {\n            revert InvalidOutputParamFetcherType();\n        }\n    }\n\n    /// @dev Validate the constraints => compare the value with the reference data\n    function _validateConstraints(bytes memory rawValue, Constraint[] calldata constraints)\n        private\n        pure\n    {\n        if (constraints.length > 0) {\n            for (uint256 i; i < constraints.length; i++) {\n                Constraint memory constraint = constraints[i];\n                bytes32 returnValue;\n                assembly {\n                    returnValue := mload(add(rawValue, add(0x20, mul(i, 0x20))))\n                }\n                if (constraint.constraintType == ConstraintType.EQ) {\n                    require(returnValue == bytes32(constraint.referenceData), ConstraintNotMet(ConstraintType.EQ));\n                } else if (constraint.constraintType == ConstraintType.GTE) {\n                    require(returnValue >= bytes32(constraint.referenceData), ConstraintNotMet(ConstraintType.GTE));\n                } else if (constraint.constraintType == ConstraintType.LTE) {\n                    require(returnValue <= bytes32(constraint.referenceData), ConstraintNotMet(ConstraintType.LTE));\n                } else if (constraint.constraintType == ConstraintType.IN) {\n                    (bytes32 lowerBound, bytes32 upperBound) = abi.decode(constraint.referenceData, (bytes32, bytes32));\n                    require(returnValue >= lowerBound && returnValue <= upperBound, ConstraintNotMet(ConstraintType.IN));\n                } else {\n                    revert InvalidConstraintType();\n                }\n            }\n        }\n    }\n\n    /// @dev Parse the return data and write to the appropriate storage contract\n    function _parseReturnDataAndWriteToStorage(uint256 returnValues, bytes memory returnData, address targetStorageContract, bytes32 targetStorageSlot, address account) internal {\n        for (uint256 i; i < returnValues; i++) {\n            bytes32 value;\n            assembly {\n                value := mload(add(returnData, add(0x20, mul(i, 0x20))))\n            }\n            Storage(targetStorageContract).writeStorage({\n                slot: keccak256(abi.encodePacked(targetStorageSlot, i)),\n                value: value,\n                account: account\n            });\n        }\n    }\n}\n"},"node_modules/@biconomy/composability/contracts/types/ComposabilityDataTypes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// Parameter type for composition\nenum InputParamFetcherType {\n    RAW_BYTES, // Already encoded bytes\n    STATIC_CALL // Perform a static call\n\n}\n\nenum OutputParamFetcherType {\n    EXEC_RESULT, // The return of the execution call\n    STATIC_CALL // Call to some other function\n}\n\n// Constraint type for parameter validation\nenum ConstraintType {\n    EQ, // Equal to\n    GTE, // Greater than or equal to\n    LTE, // Less than or equal to\n    IN // In range\n}\n\n// Constraint for parameter validation\nstruct Constraint {\n    ConstraintType constraintType;\n    bytes referenceData;\n}\n\n// Structure to define parameter composition\nstruct InputParam {\n    InputParamFetcherType fetcherType; // How to fetch the parameter\n    bytes paramData;\n    Constraint[] constraints;\n}\n\n// Structure to define return value handling\nstruct OutputParam {\n    OutputParamFetcherType fetcherType; // How to fetch the parameter\n    bytes paramData;\n}\n\n// Structure to define a composable execution\nstruct ComposableExecution {\n    address to;\n    uint256 value;\n    bytes4 functionSig;\n    InputParam[] inputParams;\n    OutputParam[] outputParams;\n}\n"},"node_modules/@biconomy/composability/contracts/interfaces/IComposableExecution.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.23;\n\nimport {ComposableExecution} from \"../types/ComposabilityDataTypes.sol\";\n\ninterface IComposableExecution {\n    function executeComposable(ComposableExecution[] calldata executions) external payable;\n}\n\ninterface IComposableExecutionModule is IComposableExecution {\n    function executeComposableCall(ComposableExecution[] calldata executions) external;\n    function executeComposableDelegateCall(ComposableExecution[] calldata executions) external;\n}\n"},"contracts/interfaces/base/IAccountConfig.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { ExecutionMode } from \"../../lib/ModeLib.sol\";\n\n/// @title Nexus - ERC-7579 Account Configuration Interface\n/// @notice Interface for querying and verifying configurations of Smart Accounts compliant with ERC-7579.\n/// @dev Provides methods to check supported execution modes and module types for Smart Accounts, ensuring flexible and extensible configuration.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IAccountConfig {\n    /// @notice Returns the account ID in a structured format: \"vendorname.accountname.semver\"\n    /// @return accountImplementationId The account ID of the smart account\n    function accountId() external view returns (string memory accountImplementationId);\n\n    /// @notice Checks if the account supports a certain execution mode.\n    /// @param encodedMode The encoded mode to verify.\n    /// @return supported True if the account supports the mode, false otherwise.\n    function supportsExecutionMode(ExecutionMode encodedMode) external view returns (bool supported);\n\n    /// @notice Checks if the account supports a specific module type.\n    /// @param moduleTypeId The module type ID to verify.\n    /// @return supported True if the account supports the module type, false otherwise.\n    function supportsModule(uint256 moduleTypeId) external view returns (bool supported);\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.5;\n\n/**\n * Manage deposits and stakes.\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\n * Stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n    event Deposited(address indexed account, uint256 totalDeposit);\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    // Emitted when stake or unstake delay are modified.\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    // Emitted once a stake is scheduled for withdrawal.\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit         - The entity's deposit.\n     * @param staked          - True if this entity is staked.\n     * @param stake           - Actual amount of ether staked for this entity.\n     * @param unstakeDelaySec - Minimum delay to withdraw the stake.\n     * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\n     * @dev Sizes were chosen so that deposit fits into one cell (used during handleOp)\n     *      and the rest fit into a 2nd cell (used during stake/unstake)\n     *      - 112 bit allows for 10^15 eth\n     *      - 48 bit for full timestamp\n     *      - 32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint256 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    // API struct used by getStakeInfo and simulateValidation.\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /**\n     * Get deposit info.\n     * @param account - The account to query.\n     * @return info   - Full deposit information of given account.\n     */\n    function getDepositInfo(\n        address account\n    ) external view returns (DepositInfo memory info);\n\n    /**\n     * Get account balance.\n     * @param account - The account to query.\n     * @return        - The deposit (for gas payment) of the account.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * Add to the deposit of the given account.\n     * @param account - The account to add to.\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * Add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * Attempt to unlock the stake.\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * Withdraw from the (unlocked) stake.\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\n     * @param withdrawAddress - The address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * Withdraw from the deposit.\n     * @param withdrawAddress - The address to send withdrawn value.\n     * @param withdrawAmount  - The amount to withdraw.\n     */\n    function withdrawTo(\n        address payable withdrawAddress,\n        uint256 withdrawAmount\n    ) external;\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./PackedUserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n    /**\n     * Validate aggregated signature.\n     * Revert if the aggregated signature does not match the given list of operations.\n     * @param userOps   - Array of UserOperations to validate the signature for.\n     * @param signature - The aggregated signature.\n     */\n    function validateSignatures(\n        PackedUserOperation[] calldata userOps,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * Validate signature of a single userOp.\n     * This method should be called by bundler after EntryPointSimulation.simulateValidation() returns\n     * the aggregator this account uses.\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp        - The userOperation received from the user.\n     * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\n     *                        (usually empty, unless account and aggregator support some kind of \"multisig\".\n     */\n    function validateUserOpSignature(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes memory sigForUserOp);\n\n    /**\n     * Aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation.\n     * @param userOps              - Array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature - The aggregated signature.\n     */\n    function aggregateSignatures(\n        PackedUserOperation[] calldata userOps\n    ) external view returns (bytes memory aggregatedSignature);\n}\n"},"node_modules/account-abstraction/contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"contracts/interfaces/base/IBaseAccountEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Execution Manager Events and Errors Interface\n/// @notice Interface for defining events and errors related to transaction execution processes within smart accounts.\n/// @dev This interface defines events and errors used by execution manager to handle and report the operational status of smart account transactions.\n/// It is a part of the Nexus suite of contracts aimed at implementing flexible and secure smart account operations.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IBaseAccountEventsAndErrors {\n    /// @dev Throws an error when a caller is not authorized to access an account.\n    error AccountAccessUnauthorized();\n}\n"},"contracts/interfaces/base/IStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { SentinelListLib } from \"sentinellist/SentinelList.sol\";\nimport { IPreValidationHookERC1271, IPreValidationHookERC4337 } from \"../modules/IPreValidationHook.sol\";\nimport { IHook } from \"../modules/IHook.sol\";\nimport { CallType } from \"../../lib/ModeLib.sol\";\n\n/// @title Nexus - IStorage Interface\n/// @notice Provides structured storage for Modular Smart Account under the Nexus suite, compliant with ERC-7579 and ERC-4337.\n/// @dev Manages structured storage using SentinelListLib for validators and executors, and a mapping for fallback handlers.\n/// This interface utilizes ERC-7201 storage location practices to ensure isolated and collision-resistant storage spaces within smart contracts.\n/// It is designed to support dynamic execution and modular management strategies essential for advanced smart account architectures.\n/// @custom:storage-location erc7201:biconomy.storage.Nexus\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IStorage {\n    /// @notice Struct storing validators and executors using Sentinel lists, and fallback handlers via mapping.\n    struct AccountStorage {\n        ///< List of validators, initialized upon contract deployment.\n        SentinelListLib.SentinelList validators;\n        ///< List of executors, similarly initialized.\n        SentinelListLib.SentinelList executors;\n        ///< Mapping of selectors to their respective fallback handlers.\n        mapping(bytes4 => FallbackHandler) fallbacks;\n        ///< Current hook module associated with this account.\n        IHook hook;\n        ///< Mapping of hooks to requested timelocks.\n        mapping(address hook => uint256) emergencyUninstallTimelock;\n        ///< PreValidation hook for validateUserOp\n        IPreValidationHookERC4337 preValidationHookERC4337;\n        ///< PreValidation hook for isValidSignature\n        IPreValidationHookERC1271 preValidationHookERC1271;\n        ///< Mapping of used nonces for replay protection.\n        mapping(uint256 => bool) nonces;\n        ///< ERC-7484 registry\n        address registry;\n    }\n\n    /// @notice Defines a fallback handler with an associated handler address and a call type.\n    struct FallbackHandler {\n        ///< The address of the fallback function handler.\n        address handler;\n        ///< The type of call this handler supports (e.g., static or call).\n        CallType calltype;\n    }\n}\n"},"contracts/interfaces/base/IModuleManagerEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { CallType } from \"../../lib/ModeLib.sol\";\n\n/// @title ERC-7579 Module Manager Events and Errors Interface\n/// @notice Provides event and error definitions for actions related to module management in smart accounts.\n/// @dev Used by IModuleManager to define the events and errors associated with the installation and management of modules.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IModuleManagerEventsAndErrors {\n    /// @notice Emitted when a module is installed onto a smart account.\n    /// @param moduleTypeId The identifier for the type of module installed.\n    /// @param module The address of the installed module.\n    event ModuleInstalled(uint256 moduleTypeId, address module);\n\n    /// @notice Emitted when a module is uninstalled from a smart account.\n    /// @param moduleTypeId The identifier for the type of module uninstalled.\n    /// @param module The address of the uninstalled module.\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\n\n    /// @notice Thrown when attempting to remove the last validator.\n    error CanNotRemoveLastValidator();\n\n    /// @dev Thrown when the specified module address is not recognized as valid.\n    error ValidatorNotInstalled(address module);\n\n    /// @dev Thrown when there is no installed validator detected.\n    error NoValidatorInstalled();\n\n    /// @dev Thrown when the specified module address is not recognized as valid.\n    error InvalidModule(address module);\n\n    /// @dev Thrown when an invalid module type identifier is provided.\n    error InvalidModuleTypeId(uint256 moduleTypeId);\n\n    /// @dev Thrown when there is an attempt to install a module that is already installed.\n    error ModuleAlreadyInstalled(uint256 moduleTypeId, address module);\n\n    /// @dev Thrown when an operation is performed by an unauthorized operator.\n    error UnauthorizedOperation(address operator);\n\n    /// @dev Thrown when there is an attempt to uninstall a module that is not installed.\n    error ModuleNotInstalled(uint256 moduleTypeId, address module);\n\n    /// @dev Thrown when a module address is set to zero.\n    error ModuleAddressCanNotBeZero();\n\n    /// @dev Thrown when a post-check fails after hook execution.\n    error HookPostCheckFailed();\n\n    /// @dev Thrown when there is an attempt to install a hook while another is already installed.\n    error HookAlreadyInstalled(address currentHook);\n\n    /// @dev Thrown when there is an attempt to install a PreValidationHook while another is already installed.\n    error PrevalidationHookAlreadyInstalled(address currentPreValidationHook);\n\n    /// @dev Thrown when there is an attempt to install a fallback handler for a selector already having one.\n    error FallbackAlreadyInstalledForSelector(bytes4 selector);\n\n    /// @dev Thrown when there is an attempt to uninstall a fallback handler for a selector that does not have one installed.\n    error FallbackNotInstalledForSelector(bytes4 selector);\n\n    /// @dev Thrown when a fallback handler fails to uninstall properly.\n    error FallbackHandlerUninstallFailed();\n\n    /// @dev Thrown when no fallback handler is available for a given selector.\n    error MissingFallbackHandler(bytes4 selector);\n\n    /// @dev Thrown when Invalid data is provided for MultiType install flow\n    error InvalidInput();\n\n    /// @dev Thrown when unable to validate Module Enable Mode signature\n    error EnableModeSigError();\n\n    /// @dev Thrown when unable to validate Emergency Uninstall signature\n    error EmergencyUninstallSigError();\n\n    /// @notice Error thrown when an invalid nonce is used\n    error InvalidNonce();\n\n    /// Error thrown when account installs/uninstalls module with mismatched moduleTypeId\n    error MismatchModuleTypeId();\n\n    /// @dev Thrown when there is an attempt to install a forbidden selector as a fallback handler.\n    error FallbackSelectorForbidden();\n\n    /// @dev Thrown when there is an attempt to install a fallback handler with an invalid calltype for a given selector.\n    error FallbackCallTypeInvalid();\n\n    /// @notice Error thrown when an execution with an unsupported CallType was made.\n    /// @param callType The unsupported call type.\n    error UnsupportedCallType(CallType callType);\n\n    /// @notice Error thrown when the default validator is already installed.\n    error DefaultValidatorAlreadyInstalled();\n}\n"},"contracts/interfaces/base/IExecutionHelperEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Execution Manager Events and Errors Interface\n/// @notice Interface for defining events and errors related to transaction execution processes within smart accounts.\n/// @dev This interface defines events and errors used by execution manager to handle and report the operational status of smart account transactions.\n/// It is a part of the Nexus suite of contracts aimed at implementing flexible and secure smart account operations.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\n\nimport { ExecType } from \"../../lib/ModeLib.sol\";\n\ninterface IExecutionHelperEventsAndErrors {\n    /// @notice Event emitted when a transaction fails to execute successfully.\n    event TryExecuteUnsuccessful(bytes callData, bytes result);\n\n    /// @notice Event emitted when a transaction fails to execute successfully.\n    event TryDelegateCallUnsuccessful(bytes callData, bytes result);\n\n    /// @notice Error thrown when an execution with an unsupported ExecType was made.\n    /// @param execType The unsupported execution type.\n    error UnsupportedExecType(ExecType execType);\n}\n"},"node_modules/@biconomy/composability/contracts/Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title Storage\n * @dev Contract to handle generic storage operations with cross-chain support\n */\ncontract Storage {\n    error SlotNotInitialized();\n\n    // Mapping to track initialized slots\n    mapping(bytes32 => bool) private initializedSlots;\n\n    // Mapping to track length of dynamic data\n    mapping(bytes32 => uint256) private dynamicDataLength;\n\n    /**\n     * @dev Internal function to write a value to a specific storage slot\n     */\n    function _writeStorage(bytes32 slot, bytes32 value, bytes32 namespace) private {\n        bytes32 namespacedSlot = getNamespacedSlot(namespace, slot);\n        initializedSlots[namespacedSlot] = true;\n        assembly {\n            sstore(namespacedSlot, value)\n        }\n    }\n\n    /**\n     * @dev Write a value to a specific storage slot\n     * @param slot The storage slot to write to\n     * @param value The value to write\n     */\n    function writeStorage(bytes32 slot, bytes32 value, address account) external {\n        bytes32 namespace = getNamespace(account, msg.sender);\n        _writeStorage(slot, value, namespace);\n    }\n\n    /**\n     * @dev Read a value from a specific namespace and slot\n     * @param namespace The namespace (typically a contract address)\n     * @param slot The storage slot to read from\n     * @return The value stored at the specified namespaced slot\n     */\n    function readStorage(bytes32 namespace, bytes32 slot) external view returns (bytes32) {\n        bytes32 namespacedSlot = getNamespacedSlot(namespace, slot);\n        if (!initializedSlots[namespacedSlot]) {\n            revert SlotNotInitialized();\n        }\n        bytes32 value;\n        assembly {\n            value := sload(namespacedSlot)\n        }\n        return value;\n    }\n\n    /**\n     * @dev Generates a namespaced slot\n     * @param namespace The namespace (typically a contract address)\n     * @param slot The storage slot to read from\n     * @return The namespaced slot\n     */\n    function getNamespacedSlot(bytes32 namespace, bytes32 slot) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(namespace, slot));\n    }\n\n    /**\n     * @dev Generates a namespace for a given account and caller\n     * @param account The account address\n     * @param caller The caller address\n     * @return The generated namespace\n     */\n    function getNamespace(address account, address caller) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(account, caller));\n    }\n\n    /**\n     * @dev Check if a slot has been initialized\n     */\n    function isSlotInitialized(bytes32 namespace, bytes32 slot) external view returns (bool) {\n        bytes32 namespacedSlot = getNamespacedSlot(namespace, slot);\n        return initializedSlots[namespacedSlot];\n    }\n}\n"}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/","account-abstraction/=node_modules/account-abstraction/contracts/","solady/=node_modules/solady/src/","excessively-safe-call/=node_modules/excessively-safe-call/src/","sentinellist/=node_modules/sentinellist/src/","solarray/=node_modules/solarray/src/","erc7739Validator/=node_modules/erc7739-validator-base/src/","composability/=node_modules/@biconomy/composability/contracts/","@ERC4337/=node_modules/@ERC4337/","@biconomy/=node_modules/@biconomy/","@erc7579/=node_modules/@erc7579/","@gnosis.pm/=node_modules/@gnosis.pm/","@prb/=node_modules/@prb/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@zerodev/=node_modules/@zerodev/","ExcessivelySafeCall/=node_modules/erc7739-validator-base/node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/","ds-test/=node_modules/ds-test/","enumerableset4337/=node_modules/erc7739-validator-base/node_modules/@erc7579/enumerablemap4337/src/","erc4337-validation/=node_modules/erc7739-validator-base/node_modules/@rhinestone/erc4337-validation/src/","erc7579/=node_modules/erc7579/","erc7739-validator-base/=node_modules/erc7739-validator-base/","eth-gas-reporter/=node_modules/eth-gas-reporter/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/erc7739-validator-base/node_modules/@zerodev/kernel/src/","module-bases/=node_modules/erc7739-validator-base/node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/erc7739-validator-base/node_modules/@rhinestone/modulekit/src/","prep/=node_modules/prep/","safe7579/=node_modules/erc7739-validator-base/node_modules/@rhinestone/safe7579/src/"],"optimizer":{"enabled":true,"runs":777},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
