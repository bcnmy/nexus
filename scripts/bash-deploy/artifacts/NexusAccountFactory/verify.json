{"language":"Solidity","sources":{"contracts/factory/NexusAccountFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { Stakeable } from \"../common/Stakeable.sol\";\nimport { INexusFactory } from \"../interfaces/factory/INexusFactory.sol\";\nimport { ProxyLib } from \"../lib/ProxyLib.sol\";\n\n/// @title Nexus Account Factory\n/// @notice Manages the creation of Modular Smart Accounts compliant with ERC-7579 and ERC-4337 using a factory pattern.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract NexusAccountFactory is Stakeable, INexusFactory {\n    /// @notice Address of the implementation contract used to create new Nexus instances.\n    /// @dev This address is immutable and set upon deployment, ensuring the implementation cannot be changed.\n    address public immutable ACCOUNT_IMPLEMENTATION;\n\n    /// @notice Constructor to set the smart account implementation address and the factory owner.\n    /// @param implementation_ The address of the Nexus implementation to be used for all deployments.\n    /// @param owner_ The address of the owner of the factory.\n    constructor(address implementation_, address owner_) Stakeable(owner_) {\n        require(implementation_ != address(0), ImplementationAddressCanNotBeZero());\n        require(owner_ != address(0), ZeroAddressNotAllowed());\n        ACCOUNT_IMPLEMENTATION = implementation_;\n    }\n\n    /// @notice Creates a new Nexus account with the provided initialization data.\n    /// @param initData Initialization data to be called on the new Smart Account.\n    /// @param salt Unique salt for the Smart Account creation.\n    /// @return The address of the newly created Nexus account.\n    function createAccount(bytes calldata initData, bytes32 salt) external payable override returns (address payable) {\n        // Deploy the Nexus account using the ProxyLib\n        (bool alreadyDeployed, address payable account) = ProxyLib.deployProxy(ACCOUNT_IMPLEMENTATION, salt, initData);\n        if (!alreadyDeployed) {\n            emit AccountCreated(account, initData, salt);\n        }\n        return account;\n    }\n\n    /// @notice Computes the expected address of a Nexus contract using the factory's deterministic deployment algorithm.\n    /// @param initData - Initialization data to be called on the new Smart Account.\n    /// @param salt - Unique salt for the Smart Account creation.\n    /// @return expectedAddress The expected address at which the Nexus contract will be deployed if the provided parameters are used.\n    function computeAccountAddress(bytes calldata initData, bytes32 salt) external view override returns (address payable expectedAddress) {\n        // Return the expected address of the Nexus account using the provided initialization data and salt\n        return ProxyLib.predictProxyAddress(ACCOUNT_IMPLEMENTATION, salt, initData);\n    }\n}\n"},"contracts/common/Stakeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. For security issues, contact: security@biconomy.io\n\nimport { Ownable } from \"solady/auth/Ownable.sol\";\nimport { IEntryPoint } from \"account-abstraction/interfaces/IEntryPoint.sol\";\n\nimport { IStakeable } from \"../interfaces/common/IStakeable.sol\";\n\n/// @title Stakeable Entity\n/// @notice Provides functionality to stake, unlock, and withdraw Ether on an EntryPoint.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ncontract Stakeable is Ownable, IStakeable {\n    /// @notice Error thrown when an invalid EntryPoint address is provided.\n    error InvalidEntryPointAddress();\n\n    constructor(address newOwner) {\n        _setOwner(newOwner);\n    }\n\n    /// @notice Stakes a certain amount of Ether on an EntryPoint.\n    /// @dev The contract should have enough Ether to cover the stake.\n    /// @param epAddress The address of the EntryPoint where the stake is added.\n    /// @param unstakeDelaySec The delay in seconds before the stake can be unlocked.\n    function addStake(address epAddress, uint32 unstakeDelaySec) external payable onlyOwner {\n        require(epAddress != address(0), InvalidEntryPointAddress());\n        IEntryPoint(epAddress).addStake{ value: msg.value }(unstakeDelaySec);\n    }\n\n    /// @notice Unlocks the stake on an EntryPoint.\n    /// @dev This starts the unstaking delay after which funds can be withdrawn.\n    /// @param epAddress The address of the EntryPoint from which the stake is to be unlocked.\n    function unlockStake(address epAddress) external onlyOwner {\n        require(epAddress != address(0), InvalidEntryPointAddress());\n        IEntryPoint(epAddress).unlockStake();\n    }\n\n    /// @notice Withdraws the stake from an EntryPoint to a specified address.\n    /// @dev This can only be done after the unstaking delay has passed since the unlock.\n    /// @param epAddress The address of the EntryPoint where the stake is withdrawn from.\n    /// @param withdrawAddress The address to receive the withdrawn stake.\n    function withdrawStake(address epAddress, address payable withdrawAddress) external onlyOwner {\n        require(epAddress != address(0), InvalidEntryPointAddress());\n        IEntryPoint(epAddress).withdrawStake(withdrawAddress);\n    }\n}\n"},"contracts/interfaces/factory/INexusFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Interface for Abstract Nexus Factory\n/// @notice Interface that provides the essential structure for Nexus factories.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface INexusFactory {\n    /// @notice Emitted when a new Smart Account is created.\n    /// @param account The address of the newly created account.\n    /// @param initData Initialization data used for the new Smart Account.\n    /// @param salt Unique salt used during the creation of the Smart Account.\n    event AccountCreated(address indexed account, bytes indexed initData, bytes32 indexed salt);\n\n    /// @notice Error indicating that the account is already deployed\n    /// @param account The address of the account that is already deployed\n    error AccountAlreadyDeployed(address account);\n\n    /// @notice Error thrown when the owner address is zero.\n    error ZeroAddressNotAllowed();\n\n    /// @notice Error thrown when the implementation address is zero.\n    error ImplementationAddressCanNotBeZero();\n\n    /// @notice Creates a new Nexus with initialization data.\n    /// @param initData Initialization data to be called on the new Smart Account.\n    /// @param salt Unique salt for the Smart Account creation.\n    /// @return The address of the newly created Nexus.\n    function createAccount(bytes calldata initData, bytes32 salt) external payable returns (address payable);\n\n    /// @notice Computes the expected address of a Nexus contract using the factory's deterministic deployment algorithm.\n    /// @param initData Initialization data to be called on the new Smart Account.\n    /// @param salt Unique salt for the Smart Account creation.\n    /// @return expectedAddress The expected address at which the Nexus contract will be deployed if the provided parameters are used.\n    function computeAccountAddress(bytes calldata initData, bytes32 salt) external view returns (address payable expectedAddress);\n}\n"},"contracts/lib/ProxyLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { NexusProxy } from \"../utils/NexusProxy.sol\";\nimport { INexus } from \"../interfaces/INexus.sol\";\n\n/// @title ProxyLib\n/// @notice A library for deploying NexusProxy contracts\nlibrary ProxyLib {\n    /// @notice Error thrown when ETH transfer fails.\n    error EthTransferFailed();\n\n    /// @notice Deploys a new NexusProxy contract, returning the address of the new contract, if the contract is already deployed,\n    ///         the msg.value will be forwarded to the existing contract.\n    /// @param implementation The address of the implementation contract.\n    /// @param salt The salt used for the contract creation.\n    /// @param initData The initialization data for the implementation contract.\n    /// @return alreadyDeployed A boolean indicating if the contract was already deployed.\n    /// @return account The address of the new contract or the existing contract.\n    function deployProxy(address implementation, bytes32 salt, bytes memory initData) internal returns (bool alreadyDeployed, address payable account) {\n        // Check if the contract is already deployed\n        account = predictProxyAddress(implementation, salt, initData);\n        alreadyDeployed = account.code.length > 0;\n        // Deploy a new contract if it is not already deployed\n        if (!alreadyDeployed) {\n            // Deploy the contract\n            new NexusProxy{ salt: salt, value: msg.value }(implementation, abi.encodeCall(INexus.initializeAccount, initData));\n        } else {\n            // Forward the value to the existing contract\n            (bool success,) = account.call{ value: msg.value }(\"\");\n            require(success, EthTransferFailed());\n        }\n    }\n\n    /// @notice Predicts the address of a NexusProxy contract.\n    /// @param implementation The address of the implementation contract.\n    /// @param salt The salt used for the contract creation.\n    /// @param initData The initialization data for the implementation contract.\n    /// @return predictedAddress The predicted address of the new contract.\n    function predictProxyAddress(address implementation, bytes32 salt, bytes memory initData) internal view returns (address payable predictedAddress) {\n        // Get the init code hash\n        bytes32 initCodeHash =\n            keccak256(abi.encodePacked(type(NexusProxy).creationCode, abi.encode(implementation, abi.encodeCall(INexus.initializeAccount, initData))));\n\n        // Compute the predicted address\n        predictedAddress = payable(address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash))))));\n    }\n}\n"},"node_modules/solady/src/auth/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n///\n/// @dev Note:\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\n///\n/// While the ownable portion follows\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\nabstract contract Ownable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The caller is not authorized to call the function.\n    error Unauthorized();\n\n    /// @dev The `newOwner` cannot be the zero address.\n    error NewOwnerIsZeroAddress();\n\n    /// @dev The `pendingOwner` does not have a valid handover request.\n    error NoHandoverRequest();\n\n    /// @dev Cannot double-initialize.\n    error AlreadyInitialized();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n    /// despite it not being as lightweight as a single argument event.\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /// @dev An ownership handover to `pendingOwner` has been requested.\n    event OwnershipHandoverRequested(address indexed pendingOwner);\n\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\n\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The owner slot is given by:\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\n    /// It is intentionally chosen to be a high value\n    /// to avoid collision with lower slots.\n    /// The choice of manual storage layout is to enable compatibility\n    /// with both regular and upgradeable contracts.\n    bytes32 internal constant _OWNER_SLOT =\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\n\n    /// The ownership handover slot of `newOwner` is given by:\n    /// ```\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n    ///     let handoverSlot := keccak256(0x00, 0x20)\n    /// ```\n    /// It stores the expiry timestamp of the two-step ownership handover.\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     INTERNAL FUNCTIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\n\n    /// @dev Initializes the owner directly without authorization guard.\n    /// This function must be called upon initialization,\n    /// regardless of whether the contract is upgradeable or not.\n    /// This is to enable generalization to both regular and upgradeable contracts,\n    /// and to save gas in case the initial owner is not the caller.\n    /// For performance reasons, this function will not check if there\n    /// is an existing owner.\n    function _initializeOwner(address newOwner) internal virtual {\n        if (_guardInitializeOwner()) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                if sload(ownerSlot) {\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\n                    revert(0x1c, 0x04)\n                }\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Store the new value.\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n            }\n        } else {\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Store the new value.\n                sstore(_OWNER_SLOT, newOwner)\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n            }\n        }\n    }\n\n    /// @dev Sets the owner directly without authorization guard.\n    function _setOwner(address newOwner) internal virtual {\n        if (_guardInitializeOwner()) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n                // Store the new value.\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\n            }\n        } else {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let ownerSlot := _OWNER_SLOT\n                // Clean the upper 96 bits.\n                newOwner := shr(96, shl(96, newOwner))\n                // Emit the {OwnershipTransferred} event.\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n                // Store the new value.\n                sstore(ownerSlot, newOwner)\n            }\n        }\n    }\n\n    /// @dev Throws if the sender is not the owner.\n    function _checkOwner() internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the caller is not the stored owner, revert.\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\n    /// Override to return a different value if needed.\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\n        return 48 * 3600;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(shl(96, newOwner)) {\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n        }\n        _setOwner(newOwner);\n    }\n\n    /// @dev Allows the owner to renounce their ownership.\n    function renounceOwnership() public payable virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /// @dev Request a two-step ownership handover to the caller.\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\n    function requestOwnershipHandover() public payable virtual {\n        unchecked {\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Compute and set the handover slot to `expires`.\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\n                mstore(0x00, caller())\n                sstore(keccak256(0x0c, 0x20), expires)\n                // Emit the {OwnershipHandoverRequested} event.\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\n            }\n        }\n    }\n\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\n    function cancelOwnershipHandover() public payable virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x20), 0)\n            // Emit the {OwnershipHandoverCanceled} event.\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\n        }\n    }\n\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            let handoverSlot := keccak256(0x0c, 0x20)\n            // If the handover does not exist, or has expired.\n            if gt(timestamp(), sload(handoverSlot)) {\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\n                revert(0x1c, 0x04)\n            }\n            // Set the handover slot to 0.\n            sstore(handoverSlot, 0)\n        }\n        _setOwner(pendingOwner);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   PUBLIC READ FUNCTIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of the contract.\n    function owner() public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := sload(_OWNER_SLOT)\n        }\n    }\n\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\n    function ownershipHandoverExpiresAt(address pendingOwner)\n        public\n        view\n        virtual\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the handover slot.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            // Load the handover slot.\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         MODIFIERS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Marks a function as only callable by the owner.\n    modifier onlyOwner() virtual {\n        _checkOwner();\n        _;\n    }\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./PackedUserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n    /***\n     * An event emitted after each successful request.\n     * @param userOpHash    - Unique identifier for the request (hash its entire content, except signature).\n     * @param sender        - The account that generates this request.\n     * @param paymaster     - If non-null, the paymaster that pays for this request.\n     * @param nonce         - The nonce value from the request.\n     * @param success       - True if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - Actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - Total gas used by this UserOperation (including preVerification, creation,\n     *                        validation and execution).\n     */\n    event UserOperationEvent(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address indexed paymaster,\n        uint256 nonce,\n        bool success,\n        uint256 actualGasCost,\n        uint256 actualGasUsed\n    );\n\n    /**\n     * Account \"sender\" was deployed.\n     * @param userOpHash - The userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender     - The account that is deployed\n     * @param factory    - The factory used to deploy this account (in the initCode)\n     * @param paymaster  - The paymaster used by this UserOp\n     */\n    event AccountDeployed(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        address factory,\n        address paymaster\n    );\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * An event emitted if the UserOperation Paymaster's \"postOp\" call reverted with non-zero length.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     * @param revertReason - The return bytes from the (reverted) call to \"callData\".\n     */\n    event PostOpRevertReason(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce,\n        bytes revertReason\n    );\n\n    /**\n     * UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made.\n     * @param userOpHash   - The request unique identifier.\n     * @param sender       - The sender of this request.\n     * @param nonce        - The nonce used in the request.\n     */\n    event UserOperationPrefundTooLow(\n        bytes32 indexed userOpHash,\n        address indexed sender,\n        uint256 nonce\n    );\n\n    /**\n     * An event emitted by handleOps(), before starting the execution loop.\n     * Any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * Signature aggregator used by the following UserOperationEvents within this bundle.\n     * @param aggregator - The aggregator used for the following UserOperationEvents.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * A custom revert error of handleOps, to identify the offending op.\n     * Should be caught in off-chain handleOps simulation and not happen on-chain.\n     * Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     * NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. The string starts with a unique code \"AAmn\",\n     *                  where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *                  so a failure can be attributed to the correct entity.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * A custom revert error of handleOps, to report a revert by account or paymaster.\n     * @param opIndex - Index into the array of ops to the failed one (in simulateValidation, this is always zero).\n     * @param reason  - Revert reason. see FailedOp(uint256,string), above\n     * @param inner   - data from inner cought revert reason\n     * @dev note that inner is truncated to 2048 bytes\n     */\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\n\n    error PostOpReverted(bytes returnData);\n\n    /**\n     * Error case when a signature aggregator fails to verify the aggregated signature it had created.\n     * @param aggregator The aggregator that failed to verify the signature\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    // Return value of getSenderAddress.\n    error SenderAddressResult(address sender);\n\n    // UserOps handled, per aggregator.\n    struct UserOpsPerAggregator {\n        PackedUserOperation[] userOps;\n        // Aggregator address\n        IAggregator aggregator;\n        // Aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperations.\n     * No signature aggregator is used.\n     * If any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops         - The operations to execute.\n     * @param beneficiary - The address to receive the fees.\n     */\n    function handleOps(\n        PackedUserOperation[] calldata ops,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator - The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).\n     * @param beneficiary      - The address to receive the fees.\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * Generate a request Id - unique identifier for this request.\n     * The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     * @param userOp - The user operation to generate the request ID for.\n     * @return hash the hash of this UserOperation\n     */\n    function getUserOpHash(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes32);\n\n    /**\n     * Gas and return values during simulation.\n     * @param preOpGas         - The gas used for validation (including preValidationGas)\n     * @param prefund          - The required prefund for this operation\n     * @param accountValidationData   - returned validationData from account.\n     * @param paymasterValidationData - return validationData from paymaster.\n     * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        uint256 accountValidationData;\n        uint256 paymasterValidationData;\n        bytes paymasterContext;\n    }\n\n    /**\n     * Returned aggregated signature info:\n     * The aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     * Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * This method always revert, and returns the address in SenderAddressResult error\n     * @param initCode - The constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n    error DelegateAndRevert(bool success, bytes ret);\n\n    /**\n     * Helper method for dry-run testing.\n     * @dev calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.\n     *  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace\n     *  actual EntryPoint code is less convenient.\n     * @param target a target contract to make a delegatecall from entrypoint\n     * @param data data to pass to target in a delegatecall\n     */\n    function delegateAndRevert(address target, bytes calldata data) external;\n}\n"},"contracts/interfaces/common/IStakeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. For security issues, contact: security@biconomy.io\n\n/// @title Stakeable Entity Interface\n/// @notice Interface for staking, unlocking, and withdrawing Ether on an EntryPoint.\n/// @dev Defines functions for managing stakes on an EntryPoint.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IStakeable {\n    /// @notice Stakes a certain amount of Ether on an EntryPoint.\n    /// @dev The contract should have enough Ether to cover the stake.\n    /// @param epAddress The address of the EntryPoint where the stake is added.\n    /// @param unstakeDelaySec The delay in seconds before the stake can be unlocked.\n    function addStake(address epAddress, uint32 unstakeDelaySec) external payable;\n\n    /// @notice Unlocks the stake on an EntryPoint.\n    /// @dev This starts the unstaking delay after which funds can be withdrawn.\n    /// @param epAddress The address of the EntryPoint from which the stake is to be unlocked.\n    function unlockStake(address epAddress) external;\n\n    /// @notice Withdraws the stake from an EntryPoint to a specified address.\n    /// @dev This can only be done after the unstaking delay has passed since the unlock.\n    /// @param epAddress The address of the EntryPoint where the stake is withdrawn from.\n    /// @param withdrawAddress The address to receive the withdrawn stake.\n    function withdrawStake(address epAddress, address payable withdrawAddress) external;\n}\n"},"contracts/utils/NexusProxy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { Proxy } from \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport { ERC1967Utils } from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport { Initializable } from \"../lib/Initializable.sol\";\n\n/// @title NexusProxy\n/// @dev A proxy contract that uses the ERC1967 upgrade pattern and sets the initializable flag\n///      in the constructor to prevent reinitialization\ncontract NexusProxy is Proxy {\n    constructor(address implementation, bytes memory data) payable {\n        Initializable.setInitializable();\n        ERC1967Utils.upgradeToAndCall(implementation, data);\n    }\n\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n\n    receive() external payable {}\n}\n"},"contracts/interfaces/INexus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IERC4337Account } from \"./IERC4337Account.sol\";\nimport { IERC7579Account } from \"./IERC7579Account.sol\";\nimport { INexusEventsAndErrors } from \"./INexusEventsAndErrors.sol\";\n\n/// @title Nexus - INexus Interface\n/// @notice Integrates ERC-4337 and ERC-7579 standards to manage smart accounts within the Nexus suite.\n/// @dev Consolidates ERC-4337 user operations and ERC-7579 configurations into a unified interface for smart account management.\n/// It extends both IERC4337Account and IERC7579Account, enhancing modular capabilities and supporting advanced contract architectures.\n/// Includes error definitions for robust handling of common issues such as unsupported module types and execution failures.\n/// The initialize function sets up the account with validators and configurations, ensuring readiness for use.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface INexus is IERC4337Account, IERC7579Account, INexusEventsAndErrors {\n    /// @notice Initializes the smart account with a validator and custom data.\n    /// @dev This method sets up the account for operation, linking it with a validator and initializing it with specific data.\n    /// Can be called directly or via a factory.\n    /// @param initData Encoded data used for the account's configuration during initialization.\n    function initializeAccount(bytes calldata initData) external payable;\n}\n"},"node_modules/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.5;\n\n/**\n * Manage deposits and stakes.\n * Deposit is just a balance used to pay for UserOperations (either by a paymaster or an account).\n * Stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n    event Deposited(address indexed account, uint256 totalDeposit);\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    // Emitted when stake or unstake delay are modified.\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    // Emitted once a stake is scheduled for withdrawal.\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit         - The entity's deposit.\n     * @param staked          - True if this entity is staked.\n     * @param stake           - Actual amount of ether staked for this entity.\n     * @param unstakeDelaySec - Minimum delay to withdraw the stake.\n     * @param withdrawTime    - First block timestamp where 'withdrawStake' will be callable, or zero if already locked.\n     * @dev Sizes were chosen so that deposit fits into one cell (used during handleOp)\n     *      and the rest fit into a 2nd cell (used during stake/unstake)\n     *      - 112 bit allows for 10^15 eth\n     *      - 48 bit for full timestamp\n     *      - 32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint256 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    // API struct used by getStakeInfo and simulateValidation.\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /**\n     * Get deposit info.\n     * @param account - The account to query.\n     * @return info   - Full deposit information of given account.\n     */\n    function getDepositInfo(\n        address account\n    ) external view returns (DepositInfo memory info);\n\n    /**\n     * Get account balance.\n     * @param account - The account to query.\n     * @return        - The deposit (for gas payment) of the account.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * Add to the deposit of the given account.\n     * @param account - The account to add to.\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * Add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec - The new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * Attempt to unlock the stake.\n     * The value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * Withdraw from the (unlocked) stake.\n     * Must first call unlockStake and wait for the unstakeDelay to pass.\n     * @param withdrawAddress - The address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * Withdraw from the deposit.\n     * @param withdrawAddress - The address to send withdrawn value.\n     * @param withdrawAmount  - The amount to withdraw.\n     */\n    function withdrawTo(\n        address payable withdrawAddress,\n        uint256 withdrawAmount\n    ) external;\n}\n"},"node_modules/account-abstraction/contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./PackedUserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n    /**\n     * Validate aggregated signature.\n     * Revert if the aggregated signature does not match the given list of operations.\n     * @param userOps   - Array of UserOperations to validate the signature for.\n     * @param signature - The aggregated signature.\n     */\n    function validateSignatures(\n        PackedUserOperation[] calldata userOps,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * Validate signature of a single userOp.\n     * This method should be called by bundler after EntryPointSimulation.simulateValidation() returns\n     * the aggregator this account uses.\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp        - The userOperation received from the user.\n     * @return sigForUserOp - The value to put into the signature field of the userOp when calling handleOps.\n     *                        (usually empty, unless account and aggregator support some kind of \"multisig\".\n     */\n    function validateUserOpSignature(\n        PackedUserOperation calldata userOp\n    ) external view returns (bytes memory sigForUserOp);\n\n    /**\n     * Aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation.\n     * @param userOps              - Array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature - The aggregated signature.\n     */\n    function aggregateSignatures(\n        PackedUserOperation[] calldata userOps\n    ) external view returns (bytes memory aggregatedSignature);\n}\n"},"node_modules/account-abstraction/contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"node_modules/@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"},"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"contracts/lib/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// keccak256(abi.encode(uint256(keccak256(\"initializable.transient.Nexus\")) - 1)) & ~bytes32(uint256(0xff));\nbytes32 constant INIT_SLOT = 0x90b772c2cb8a51aa7a8a65fc23543c6d022d5b3f8e2b92eed79fba7eef829300;\n\n/// @title Initializable\n/// @dev This library provides a way to set a transient flag on a contract to ensure that it is only initialized during the\n/// constructor execution. This is useful to prevent a contract from being initialized multiple times.\nlibrary Initializable {\n    /// @dev Thrown when an attempt to initialize an already initialized contract is made\n    error NotInitializable();\n\n    /// @dev Sets the initializable flag in the transient storage slot to true\n    function setInitializable() internal {\n        bytes32 slot = INIT_SLOT;\n        assembly {\n            tstore(slot, 0x01)\n        }\n    }\n\n    /// @dev Checks if the initializable flag is set in the transient storage slot, reverts with NotInitializable if not\n    function requireInitializable() internal view {\n        bytes32 slot = INIT_SLOT;\n        // Load the current value from the slot, revert if 0\n        assembly {\n            let isInitializable := tload(slot)\n            if iszero(isInitializable) {\n                mstore(0x0, 0xaed59595) // NotInitializable()\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"},"contracts/interfaces/IERC4337Account.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\n/// @title Nexus - IERC4337Account\n/// @notice This interface defines the necessary validation and execution methods for smart accounts under the ERC-4337 standard.\n/// @dev Provides a structure for implementing custom validation logic and execution methods that comply with ERC-4337 \"account abstraction\" specs.\n/// The validation method ensures proper signature and nonce verification before proceeding with transaction execution, critical for securing userOps.\n/// Also allows for the optional definition of an execution method to handle transactions post-validation, enhancing flexibility.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IERC4337Account {\n    /// Validate user's signature and nonce\n    /// the entryPoint will make the call to the recipient only if this validation call returns successfully.\n    /// signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n    /// This allows making a \"simulation call\" without a valid signature\n    /// Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n    ///\n    /// @dev ERC-4337-v-0.7 validation stage\n    /// @dev Must validate caller is the entryPoint.\n    ///      Must validate the signature and nonce\n    /// @param userOp              - The user operation that is about to be executed.\n    /// @param userOpHash          - Hash of the user's request data. can be used as the basis for signature.\n    /// @param missingAccountFunds - Missing funds on the account's deposit in the entrypoint.\n    ///                              This is the minimum amount to transfer to the sender(entryPoint) to be\n    ///                              able to make the call. The excess is left as a deposit in the entrypoint\n    ///                              for future calls. Can be withdrawn anytime using \"entryPoint.withdrawTo()\".\n    ///                              In case there is a paymaster in the request (or the current deposit is high\n    ///                              enough), this value will be zero.\n    /// @return validationData       - Packaged ValidationData structure. use `_packValidationData` and\n    ///                              `_unpackValidationData` to encode and decode.\n    ///                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n    ///                                 otherwise, an address of an \"authorizer\" contract.\n    ///                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \"indefinite\"\n    ///                              <6-byte> validAfter - First timestamp this operation is valid\n    ///                                                    If an account doesn't use time-range, it is enough to\n    ///                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.\n    ///                              Note that the validation code cannot use block.timestamp (or block.number) directly.\n    function validateUserOp(\n        PackedUserOperation calldata userOp,\n        bytes32 userOpHash,\n        uint256 missingAccountFunds\n    ) external returns (uint256 validationData);\n\n    /// Account may implement this execute method.\n    /// passing this methodSig at the beginning of callData will cause the entryPoint to pass the\n    /// full UserOp (and hash)\n    /// to the account.\n    /// The account should skip the methodSig, and use the callData (and optionally, other UserOp\n    /// fields)\n    /// @dev ERC-4337-v-0.7 optional execution path\n    /// @param userOp              - The operation that was just validated.\n    /// @param userOpHash          - Hash of the user's request data.\n    function executeUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external payable;\n}\n"},"contracts/interfaces/IERC7579Account.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IAccountConfig } from \"./base/IAccountConfig.sol\";\nimport { IExecutionHelper } from \"./base/IExecutionHelper.sol\";\nimport { IModuleManager } from \"./base/IModuleManager.sol\";\n\n/// @title Nexus - IERC7579Account\n/// @notice This interface integrates the functionalities required for a modular smart account compliant with ERC-7579 and ERC-4337 standards.\n/// @dev Combines configurations and operational management for smart accounts, bridging IAccountConfig, IExecutionHelper, and IModuleManager.\n/// Interfaces designed to support the comprehensive management of smart account operations including execution management and modular configurations.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IERC7579Account is IAccountConfig, IExecutionHelper {\n    /// @dev Validates a smart account signature according to ERC-1271 standards.\n    /// This method may delegate the call to a validator module to check the signature.\n    /// @param hash The hash of the data being validated.\n    /// @param data The signed data to validate.\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\n}\n"},"contracts/interfaces/INexusEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { PackedUserOperation } from \"account-abstraction/interfaces/PackedUserOperation.sol\";\n\n/// @title Nexus - INexus Events and Errors\n/// @notice Defines common errors for the Nexus smart account management interface.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface INexusEventsAndErrors {\n    /// @notice Emitted when a PREP is initialized.\n    /// @param r The r value of the PREP signature.\n    event PREPInitialized(bytes32 r);\n\n    /// @notice Error thrown when an unsupported ModuleType is requested.\n    /// @param moduleTypeId The ID of the unsupported module type.\n    error UnsupportedModuleType(uint256 moduleTypeId);\n\n    /// @notice Error thrown on failed execution.\n    error ExecutionFailed();\n\n    /// @notice Error thrown when the Factory fails to initialize the account with posted bootstrap data.\n    error NexusInitializationFailed();\n\n    /// @notice Error thrown when a zero address is provided as the Entry Point address.\n    error EntryPointCanNotBeZero();\n\n    /// @notice Error thrown when the provided implementation address is invalid.\n    error InvalidImplementationAddress();\n\n    /// @notice Error thrown when the provided implementation address is not a contract.\n    error ImplementationIsNotAContract();\n\n    /// @notice Error thrown when an inner call fails.\n    error InnerCallFailed();\n\n    /// @notice Error thrown when attempted to emergency-uninstall a hook\n    error EmergencyTimeLockNotExpired();\n\n    /// @notice Error thrown when attempted to upgrade an ERC7702 account via UUPS proxy upgrade mechanism\n    error ERC7702AccountCannotBeUpgradedThisWay();\n\n    /// @notice Error thrown when the provided initData is invalid.\n    error InvalidInitData();\n\n    /// @notice Error thrown when the provided authHash and erc7702AuthSignature are invalid.\n    error InvalidPREP();\n\n    /// @notice Error thrown when the account is already initialized.\n    error AccountAlreadyInitialized();\n\n    /// @notice Error thrown when the account is not initialized but expected to be.\n    error AccountNotInitialized();\n}\n"},"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"node_modules/@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/interfaces/base/IAccountConfig.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { ExecutionMode } from \"../../lib/ModeLib.sol\";\n\n/// @title Nexus - ERC-7579 Account Configuration Interface\n/// @notice Interface for querying and verifying configurations of Smart Accounts compliant with ERC-7579.\n/// @dev Provides methods to check supported execution modes and module types for Smart Accounts, ensuring flexible and extensible configuration.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IAccountConfig {\n    /// @notice Returns the account ID in a structured format: \"vendorname.accountname.semver\"\n    /// @return accountImplementationId The account ID of the smart account\n    function accountId() external view returns (string memory accountImplementationId);\n\n    /// @notice Checks if the account supports a certain execution mode.\n    /// @param encodedMode The encoded mode to verify.\n    /// @return supported True if the account supports the mode, false otherwise.\n    function supportsExecutionMode(ExecutionMode encodedMode) external view returns (bool supported);\n\n    /// @notice Checks if the account supports a specific module type.\n    /// @param moduleTypeId The module type ID to verify.\n    /// @return supported True if the account supports the module type, false otherwise.\n    function supportsModule(uint256 moduleTypeId) external view returns (bool supported);\n}\n"},"contracts/interfaces/base/IExecutionHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { ExecutionMode } from \"../../lib/ModeLib.sol\";\n\nimport { IExecutionHelperEventsAndErrors } from \"./IExecutionHelperEventsAndErrors.sol\";\n\n/// @title Nexus - IExecutionHelper\n/// @notice Interface for executing transactions on behalf of smart accounts within the Nexus system.\n/// @dev Extends functionality for transaction execution with error handling as defined in IExecutionHelperEventsAndErrors.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IExecutionHelper is IExecutionHelperEventsAndErrors {\n    /// @notice Executes a transaction with specified execution mode and calldata.\n    /// @param mode The execution mode, defining how the transaction is processed.\n    /// @param executionCalldata The calldata to execute.\n    /// @dev This function ensures that the execution complies with smart account execution policies and handles errors appropriately.\n    function execute(ExecutionMode mode, bytes calldata executionCalldata) external payable;\n\n    /// @notice Allows an executor module to perform transactions on behalf of the account.\n    /// @param mode The execution mode that details how the transaction should be handled.\n    /// @param executionCalldata The transaction data to be executed.\n    /// @return returnData The result of the execution, allowing for error handling and results interpretation by the executor module.\n    function executeFromExecutor(ExecutionMode mode, bytes calldata executionCalldata) external payable returns (bytes[] memory returnData);\n}\n"},"contracts/interfaces/base/IModuleManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { IModuleManagerEventsAndErrors } from \"./IModuleManagerEventsAndErrors.sol\";\n\n/// @title Nexus - IModuleManager\n/// @notice Interface for managing modules within Smart Accounts, providing methods for installation and removal of modules.\n/// @dev Extends the IModuleManagerEventsAndErrors interface to include event and error definitions.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IModuleManager is IModuleManagerEventsAndErrors {\n    /// @notice Installs a Module of a specific type onto the smart account.\n    /// @param moduleTypeId The identifier for the module type.\n    /// @param module The address of the module to be installed.\n    /// @param initData Initialization data for configuring the module upon installation.\n    function installModule(uint256 moduleTypeId, address module, bytes calldata initData) external payable;\n\n    /// @notice Uninstalls a Module of a specific type from the smart account.\n    /// @param moduleTypeId The identifier for the module type being uninstalled.\n    /// @param module The address of the module to uninstall.\n    /// @param deInitData De-initialization data for configuring the module upon uninstallation.\n    function uninstallModule(uint256 moduleTypeId, address module, bytes calldata deInitData) external payable;\n\n    /// @notice Checks if a specific module is installed on the smart account.\n    /// @param moduleTypeId The module type identifier to check.\n    /// @param module The address of the module.\n    /// @param additionalContext Additional information that may be required to verify the module's installation.\n    /// @return installed True if the module is installed, false otherwise.\n    function isModuleInstalled(uint256 moduleTypeId, address module, bytes calldata additionalContext) external view returns (bool installed);\n}\n"},"node_modules/@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"contracts/lib/ModeLib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n/// @title ModeLib\n/// @author zeroknots.eth | rhinestone.wtf\n/// To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\n/// encoding is used.\n///    Function Signature of execute function:\n///           function execute(ExecutionMode mode, bytes calldata executionCalldata) external payable;\n/// This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\n/// context.\n/// NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\n/// implement\n/// more complex execution modes may use the entire bytes32.\n///\n/// |--------------------------------------------------------------------|\n/// | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\n/// |--------------------------------------------------------------------|\n/// | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\n/// |--------------------------------------------------------------------|\n///\n/// CALLTYPE: 1 byte\n/// CallType is used to determine how the executeCalldata paramter of the execute function has to be\n/// decoded.\n/// It can be either single, batch or delegatecall. In the future different calls could be added.\n/// CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\n///\n/// EXECTYPE: 1 byte\n/// ExecType is used to determine how the account should handle the execution.\n/// It can indicate if the execution should revert on failure or continue execution.\n/// In the future more execution modes may be added.\n/// Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\n/// a batch fails, the entire batch is reverted\n///\n/// UNUSED: 4 bytes\n/// Unused bytes are reserved for future use.\n///\n/// ModeSelector: bytes4\n/// The \"optional\" mode selector can be used by account vendors, to implement custom behavior in\n/// their accounts.\n/// the way a ModeSelector is to be calculated is bytes4(keccak256(\"vendorname.featurename\"))\n/// this is to prevent collisions between different vendors, while allowing innovation and the\n/// development of new features without coordination between ERC-7579 implementing accounts\n///\n/// ModePayload: 22 bytes\n/// Mode payload is used to pass additional data to the smart account execution, this may be\n/// interpreted depending on the ModeSelector\n///\n/// ExecutionCallData: n bytes\n/// single, delegatecall or batch exec abi.encoded as bytes\n\n// Custom type for improved developer experience\ntype ExecutionMode is bytes32;\n\ntype CallType is bytes1;\n\ntype ExecType is bytes1;\n\ntype ModeSelector is bytes4;\n\ntype ModePayload is bytes22;\n\n// Default CallType\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\n// Batched CallType\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\n\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\n\n// @dev Implementing delegatecall is OPTIONAL!\n// implement delegatecall with extreme care.\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\n\n// @dev default behavior is to revert on failure\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\n// Since this is value 0x00, no additional encoding is required for simple accounts\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\n// @dev account may elect to change execution behavior. For example \"try exec\" / \"allow fail\"\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\n\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\n// Example declaration of a custom mode selector\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\"default.mode.offset\")));\n\n/// @dev ModeLib is a helper library to encode/decode ModeCodes\nlibrary ModeLib {\n    function decode(\n        ExecutionMode mode\n    ) internal pure returns (CallType _calltype, ExecType _execType, ModeSelector _modeSelector, ModePayload _modePayload) {\n        assembly {\n            _calltype := mode\n            _execType := shl(8, mode)\n            _modeSelector := shl(48, mode)\n            _modePayload := shl(80, mode)\n        }\n    }\n\n    function decodeBasic(ExecutionMode mode) internal pure returns (CallType _calltype, ExecType _execType) {\n        assembly {\n            _calltype := mode\n            _execType := shl(8, mode)\n        }\n    }\n\n    function encode(CallType callType, ExecType execType, ModeSelector mode, ModePayload payload) internal pure returns (ExecutionMode) {\n        return ExecutionMode.wrap(bytes32(abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)));\n    }\n\n    function encodeSimpleBatch() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeSimpleSingle() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeTrySingle() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_TRY, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeTryBatch() internal pure returns (ExecutionMode mode) {\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_TRY, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeCustom(CallType callType, ExecType execType) internal pure returns (ExecutionMode mode) {\n        mode = encode(callType, execType, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function getCallType(ExecutionMode mode) internal pure returns (CallType calltype) {\n        assembly {\n            calltype := mode\n        }\n    }\n}\n\nusing { _eqModeSelector as == } for ModeSelector global;\nusing { _eqCallType as == } for CallType global;\nusing { _uneqCallType as != } for CallType global;\nusing { _eqExecType as == } for ExecType global;\n\nfunction _eqCallType(CallType a, CallType b) pure returns (bool) {\n    return CallType.unwrap(a) == CallType.unwrap(b);\n}\n\nfunction _uneqCallType(CallType a, CallType b) pure returns (bool) {\n    return CallType.unwrap(a) != CallType.unwrap(b);\n}\n\nfunction _eqExecType(ExecType a, ExecType b) pure returns (bool) {\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\n}\n\n//slither-disable-next-line dead-code\nfunction _eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\n}\n"},"contracts/interfaces/base/IExecutionHelperEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\n/// @title Execution Manager Events and Errors Interface\n/// @notice Interface for defining events and errors related to transaction execution processes within smart accounts.\n/// @dev This interface defines events and errors used by execution manager to handle and report the operational status of smart account transactions.\n/// It is a part of the Nexus suite of contracts aimed at implementing flexible and secure smart account operations.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\n\nimport { ExecType } from \"../../lib/ModeLib.sol\";\n\ninterface IExecutionHelperEventsAndErrors {\n    /// @notice Event emitted when a transaction fails to execute successfully.\n    event TryExecuteUnsuccessful(bytes callData, bytes result);\n\n    /// @notice Event emitted when a transaction fails to execute successfully.\n    event TryDelegateCallUnsuccessful(bytes callData, bytes result);\n\n    /// @notice Error thrown when an execution with an unsupported ExecType was made.\n    /// @param execType The unsupported execution type.\n    error UnsupportedExecType(ExecType execType);\n}\n"},"contracts/interfaces/base/IModuleManagerEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\n// ──────────────────────────────────────────────────────────────────────────────\n//     _   __    _  __\n//    / | / /__ | |/ /_  _______\n//   /  |/ / _ \\|   / / / / ___/\n//  / /|  /  __/   / /_/ (__  )\n// /_/ |_/\\___/_/|_\\__,_/____/\n//\n// ──────────────────────────────────────────────────────────────────────────────\n// Nexus: A suite of contracts for Modular Smart Accounts compliant with ERC-7579 and ERC-4337, developed by Biconomy.\n// Learn more at https://biconomy.io. To report security issues, please contact us at: security@biconomy.io\n\nimport { CallType } from \"../../lib/ModeLib.sol\";\n\n/// @title ERC-7579 Module Manager Events and Errors Interface\n/// @notice Provides event and error definitions for actions related to module management in smart accounts.\n/// @dev Used by IModuleManager to define the events and errors associated with the installation and management of modules.\n/// @author @livingrockrises | Biconomy | chirag@biconomy.io\n/// @author @aboudjem | Biconomy | adam.boudjemaa@biconomy.io\n/// @author @filmakarov | Biconomy | filipp.makarov@biconomy.io\n/// @author @zeroknots | Rhinestone.wtf | zeroknots.eth\n/// Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\ninterface IModuleManagerEventsAndErrors {\n    /// @notice Emitted when a module is installed onto a smart account.\n    /// @param moduleTypeId The identifier for the type of module installed.\n    /// @param module The address of the installed module.\n    event ModuleInstalled(uint256 moduleTypeId, address module);\n\n    /// @notice Emitted when a module is uninstalled from a smart account.\n    /// @param moduleTypeId The identifier for the type of module uninstalled.\n    /// @param module The address of the uninstalled module.\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\n\n    /// @notice Thrown when attempting to remove the last validator.\n    error CanNotRemoveLastValidator();\n\n    /// @dev Thrown when the specified module address is not recognized as valid.\n    error ValidatorNotInstalled(address module);\n\n    /// @dev Thrown when there is no installed validator detected.\n    error NoValidatorInstalled();\n\n    /// @dev Thrown when the specified module address is not recognized as valid.\n    error InvalidModule(address module);\n\n    /// @dev Thrown when an invalid module type identifier is provided.\n    error InvalidModuleTypeId(uint256 moduleTypeId);\n\n    /// @dev Thrown when there is an attempt to install a module that is already installed.\n    error ModuleAlreadyInstalled(uint256 moduleTypeId, address module);\n\n    /// @dev Thrown when an operation is performed by an unauthorized operator.\n    error UnauthorizedOperation(address operator);\n\n    /// @dev Thrown when there is an attempt to uninstall a module that is not installed.\n    error ModuleNotInstalled(uint256 moduleTypeId, address module);\n\n    /// @dev Thrown when a module address is set to zero.\n    error ModuleAddressCanNotBeZero();\n\n    /// @dev Thrown when a post-check fails after hook execution.\n    error HookPostCheckFailed();\n\n    /// @dev Thrown when there is an attempt to install a hook while another is already installed.\n    error HookAlreadyInstalled(address currentHook);\n\n    /// @dev Thrown when there is an attempt to install a PreValidationHook while another is already installed.\n    error PrevalidationHookAlreadyInstalled(address currentPreValidationHook);\n\n    /// @dev Thrown when there is an attempt to install a fallback handler for a selector already having one.\n    error FallbackAlreadyInstalledForSelector(bytes4 selector);\n\n    /// @dev Thrown when there is an attempt to uninstall a fallback handler for a selector that does not have one installed.\n    error FallbackNotInstalledForSelector(bytes4 selector);\n\n    /// @dev Thrown when a fallback handler fails to uninstall properly.\n    error FallbackHandlerUninstallFailed();\n\n    /// @dev Thrown when no fallback handler is available for a given selector.\n    error MissingFallbackHandler(bytes4 selector);\n\n    /// @dev Thrown when Invalid data is provided for MultiType install flow\n    error InvalidInput();\n\n    /// @dev Thrown when unable to validate Module Enable Mode signature\n    error EnableModeSigError();\n\n    /// @dev Thrown when unable to validate Emergency Uninstall signature\n    error EmergencyUninstallSigError();\n\n    /// @notice Error thrown when an invalid nonce is used\n    error InvalidNonce();\n\n    /// Error thrown when account installs/uninstalls module with mismatched moduleTypeId\n    error MismatchModuleTypeId();\n\n    /// @dev Thrown when there is an attempt to install a forbidden selector as a fallback handler.\n    error FallbackSelectorForbidden();\n\n    /// @dev Thrown when there is an attempt to install a fallback handler with an invalid calltype for a given selector.\n    error FallbackCallTypeInvalid();\n\n    /// @notice Error thrown when an execution with an unsupported CallType was made.\n    /// @param callType The unsupported call type.\n    error UnsupportedCallType(CallType callType);\n\n    /// @notice Error thrown when the default validator is already installed.\n    error DefaultValidatorAlreadyInstalled();\n}\n"}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/","account-abstraction/=node_modules/account-abstraction/contracts/","solady/=node_modules/solady/src/","excessively-safe-call/=node_modules/excessively-safe-call/src/","sentinellist/=node_modules/sentinellist/src/","solarray/=node_modules/solarray/src/","erc7739Validator/=node_modules/erc7739-validator-base/src/","composability/=node_modules/@biconomy/composability/contracts/","@ERC4337/=node_modules/@ERC4337/","@biconomy/=node_modules/@biconomy/","@erc7579/=node_modules/@erc7579/","@gnosis.pm/=node_modules/@gnosis.pm/","@prb/=node_modules/@prb/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@zerodev/=node_modules/@zerodev/","ExcessivelySafeCall/=node_modules/erc7739-validator-base/node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/","ds-test/=node_modules/ds-test/","enumerableset4337/=node_modules/erc7739-validator-base/node_modules/@erc7579/enumerablemap4337/src/","erc4337-validation/=node_modules/erc7739-validator-base/node_modules/@rhinestone/erc4337-validation/src/","erc7579/=node_modules/erc7579/","erc7739-validator-base/=node_modules/erc7739-validator-base/","eth-gas-reporter/=node_modules/eth-gas-reporter/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/erc7739-validator-base/node_modules/@zerodev/kernel/src/","module-bases/=node_modules/erc7739-validator-base/node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/erc7739-validator-base/node_modules/@rhinestone/modulekit/src/","prep/=node_modules/prep/","safe7579/=node_modules/erc7739-validator-base/node_modules/@rhinestone/safe7579/src/"],"optimizer":{"enabled":true,"runs":777},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
